/*
 * (C) Copyright IBM Corp. 2019, 2022
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package org.linuxforhealth.fhir.model.r4b.parser;

import static org.linuxforhealth.fhir.model.r4b.util.JsonSupport.*;
import static org.linuxforhealth.fhir.model.r4b.util.ModelSupport.getChoiceElementName;

import java.io.InputStream;
import java.io.Reader;
import java.util.Collection;
import java.util.Stack;
import java.util.StringJoiner;

import javax.annotation.Generated;

//import org.eclipse.parsson.api.JsonConfig;
import org.linuxforhealth.fhir.model.parser.exception.FHIRParserException;
import org.linuxforhealth.fhir.model.r4b.resource.*;
import org.linuxforhealth.fhir.model.r4b.type.*;
import org.linuxforhealth.fhir.model.r4b.type.Boolean;
import org.linuxforhealth.fhir.model.r4b.type.Integer;
import org.linuxforhealth.fhir.model.r4b.type.String;
import org.linuxforhealth.fhir.model.r4b.type.code.*;
import org.linuxforhealth.fhir.model.r4b.util.ElementFilter;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.*;

//import net.jcip.annotations.NotThreadSafe;

/*
 * Modifications:
 * 
 * - Use Guava and Jackson for low-level JSON node manipulation
 * - Disable @NotThreadSafe annotation
 */

//@NotThreadSafe
@Generated("org.linuxforhealth.fhir.tools.CodeGenerator")
public class FHIRJsonParser extends FHIRAbstractParser {
    public static boolean DEBUG = false;

    private final Stack<java.lang.String> stack = new Stack<>();

    FHIRJsonParser() {
        // only visible to subclasses or classes/interfaces in the same package (e.g. FHIRParser)
    }

    @Override
    public <T extends Resource> T parse(InputStream in) throws FHIRParserException {
        return parseAndFilter(in, null);
    }

    /**
     * Read a resource from the passed InputStream and filter its top-level elements to the collection of elementsToInclude.
     * This method does not close the passed InputStream.
     * 
     * @param <T>
     *     The resource type to read
     * @param in
     *     An input stream with the JSON contents of a FHIR resource
     * @param elementsToInclude
     *     The top-level elements to include or null to indicate that no filter should be applied
     * @return
     * @throws FHIRParserException
     *     if the resource could not be parsed for any reason
     */
    public <T extends Resource> T parseAndFilter(InputStream in, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
        try {
        	JsonNode jsonNode = JSON_OBJECT_MAPPER.readTree(nonClosingInputStream(in));
            return parseAndFilter(jsonNode, elementsToInclude);
        } catch (FHIRParserException e) {
            throw e;
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    @Override
    public <T extends Resource> T parse(Reader reader) throws FHIRParserException {
        return parseAndFilter(reader, null);
    }

    /**
     * Read a resource using the passed Reader and filter its top-level elements to the collection of elementsToInclude.
     * This method does not close the passed InputStream.
     * 
     * @param <T>
     *     The resource type to read
     * @param reader
     *     A reader with the JSON contents of a FHIR resource
     * @param elementsToInclude
     *     The top-level elements to include or null to indicate that no filter should be applied
     * @return
     * @throws FHIRParserException
     *     if the resource could not be parsed for any reason
     */
    public <T extends Resource> T parseAndFilter(Reader reader, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
    	try {
    		JsonNode jsonNode = JSON_OBJECT_MAPPER.readTree(nonClosingReader(reader));
            return parseAndFilter(jsonNode, elementsToInclude);
        } catch (FHIRParserException e) {
            throw e;
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    /**
     * Read a resource from a JsonNode. This method does not close the passed InputStream.
     * 
     * @param <T>
     *     The resource type to read
     * @param jsonNode
     *     A JsonNode with the contents of a FHIR resource
     * @return
     * @throws FHIRParserException
     *     if the resource could not be parsed for any reason
     */
    public <T extends Resource> T parse(JsonNode jsonNode) throws FHIRParserException {
        return parseAndFilter(jsonNode, null);
    }

    /**
     * Read a resource from a JsonNode and filter its top-level elements to the collection of elementsToInclude.
     * This method does not close the passed InputStream.
     * 
     * @param <T>
     *     The resource type to read
     * @param jsonNode
     *     A JsonNode with the contents of a FHIR resource
     * @param elementsToInclude
     *     The top-level elements to include or null to indicate that no filter should be applied
     * @return
     * @throws FHIRParserException
     *     if the resource could not be parsed for any reason
     */
    @SuppressWarnings("unchecked")
    public <T extends Resource> T parseAndFilter(JsonNode jsonNode, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
        try {
            reset();
            Class<?> resourceType = getResourceType(jsonNode);
            if (elementsToInclude != null) {
                ElementFilter elementFilter = new ElementFilter(resourceType, elementsToInclude);
                jsonNode = elementFilter.apply(jsonNode);
            }
            return (T) parseResource(resourceType.getSimpleName(), jsonNode, -1);
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    private void reset() {
        stack.clear();
    }

    private Resource parseResource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        Class<?> resourceType = getResourceType(jsonNode);
        switch (resourceType.getSimpleName()) {
        case "Account":
            return parseAccount(elementName, jsonNode, elementIndex);
        case "ActivityDefinition":
            return parseActivityDefinition(elementName, jsonNode, elementIndex);
        case "AdministrableProductDefinition":
            return parseAdministrableProductDefinition(elementName, jsonNode, elementIndex);
        case "AdverseEvent":
            return parseAdverseEvent(elementName, jsonNode, elementIndex);
        case "AllergyIntolerance":
            return parseAllergyIntolerance(elementName, jsonNode, elementIndex);
        case "Appointment":
            return parseAppointment(elementName, jsonNode, elementIndex);
        case "AppointmentResponse":
            return parseAppointmentResponse(elementName, jsonNode, elementIndex);
        case "AuditEvent":
            return parseAuditEvent(elementName, jsonNode, elementIndex);
        case "Basic":
            return parseBasic(elementName, jsonNode, elementIndex);
        case "Binary":
            return parseBinary(elementName, jsonNode, elementIndex);
        case "BiologicallyDerivedProduct":
            return parseBiologicallyDerivedProduct(elementName, jsonNode, elementIndex);
        case "BodyStructure":
            return parseBodyStructure(elementName, jsonNode, elementIndex);
        case "Bundle":
            return parseBundle(elementName, jsonNode, elementIndex);
        case "CapabilityStatement":
            return parseCapabilityStatement(elementName, jsonNode, elementIndex);
        case "CarePlan":
            return parseCarePlan(elementName, jsonNode, elementIndex);
        case "CareTeam":
            return parseCareTeam(elementName, jsonNode, elementIndex);
        case "CatalogEntry":
            return parseCatalogEntry(elementName, jsonNode, elementIndex);
        case "ChargeItem":
            return parseChargeItem(elementName, jsonNode, elementIndex);
        case "ChargeItemDefinition":
            return parseChargeItemDefinition(elementName, jsonNode, elementIndex);
        case "Citation":
            return parseCitation(elementName, jsonNode, elementIndex);
        case "Claim":
            return parseClaim(elementName, jsonNode, elementIndex);
        case "ClaimResponse":
            return parseClaimResponse(elementName, jsonNode, elementIndex);
        case "ClinicalImpression":
            return parseClinicalImpression(elementName, jsonNode, elementIndex);
        case "ClinicalUseDefinition":
            return parseClinicalUseDefinition(elementName, jsonNode, elementIndex);
        case "CodeSystem":
            return parseCodeSystem(elementName, jsonNode, elementIndex);
        case "Communication":
            return parseCommunication(elementName, jsonNode, elementIndex);
        case "CommunicationRequest":
            return parseCommunicationRequest(elementName, jsonNode, elementIndex);
        case "CompartmentDefinition":
            return parseCompartmentDefinition(elementName, jsonNode, elementIndex);
        case "Composition":
            return parseComposition(elementName, jsonNode, elementIndex);
        case "ConceptMap":
            return parseConceptMap(elementName, jsonNode, elementIndex);
        case "Condition":
            return parseCondition(elementName, jsonNode, elementIndex);
        case "Consent":
            return parseConsent(elementName, jsonNode, elementIndex);
        case "Contract":
            return parseContract(elementName, jsonNode, elementIndex);
        case "Coverage":
            return parseCoverage(elementName, jsonNode, elementIndex);
        case "CoverageEligibilityRequest":
            return parseCoverageEligibilityRequest(elementName, jsonNode, elementIndex);
        case "CoverageEligibilityResponse":
            return parseCoverageEligibilityResponse(elementName, jsonNode, elementIndex);
        case "DetectedIssue":
            return parseDetectedIssue(elementName, jsonNode, elementIndex);
        case "Device":
            return parseDevice(elementName, jsonNode, elementIndex);
        case "DeviceDefinition":
            return parseDeviceDefinition(elementName, jsonNode, elementIndex);
        case "DeviceMetric":
            return parseDeviceMetric(elementName, jsonNode, elementIndex);
        case "DeviceRequest":
            return parseDeviceRequest(elementName, jsonNode, elementIndex);
        case "DeviceUseStatement":
            return parseDeviceUseStatement(elementName, jsonNode, elementIndex);
        case "DiagnosticReport":
            return parseDiagnosticReport(elementName, jsonNode, elementIndex);
        case "DocumentManifest":
            return parseDocumentManifest(elementName, jsonNode, elementIndex);
        case "DocumentReference":
            return parseDocumentReference(elementName, jsonNode, elementIndex);
        case "Encounter":
            return parseEncounter(elementName, jsonNode, elementIndex);
        case "Endpoint":
            return parseEndpoint(elementName, jsonNode, elementIndex);
        case "EnrollmentRequest":
            return parseEnrollmentRequest(elementName, jsonNode, elementIndex);
        case "EnrollmentResponse":
            return parseEnrollmentResponse(elementName, jsonNode, elementIndex);
        case "EpisodeOfCare":
            return parseEpisodeOfCare(elementName, jsonNode, elementIndex);
        case "EventDefinition":
            return parseEventDefinition(elementName, jsonNode, elementIndex);
        case "Evidence":
            return parseEvidence(elementName, jsonNode, elementIndex);
        case "EvidenceReport":
            return parseEvidenceReport(elementName, jsonNode, elementIndex);
        case "EvidenceVariable":
            return parseEvidenceVariable(elementName, jsonNode, elementIndex);
        case "ExampleScenario":
            return parseExampleScenario(elementName, jsonNode, elementIndex);
        case "ExplanationOfBenefit":
            return parseExplanationOfBenefit(elementName, jsonNode, elementIndex);
        case "FamilyMemberHistory":
            return parseFamilyMemberHistory(elementName, jsonNode, elementIndex);
        case "Flag":
            return parseFlag(elementName, jsonNode, elementIndex);
        case "Goal":
            return parseGoal(elementName, jsonNode, elementIndex);
        case "GraphDefinition":
            return parseGraphDefinition(elementName, jsonNode, elementIndex);
        case "Group":
            return parseGroup(elementName, jsonNode, elementIndex);
        case "GuidanceResponse":
            return parseGuidanceResponse(elementName, jsonNode, elementIndex);
        case "HealthcareService":
            return parseHealthcareService(elementName, jsonNode, elementIndex);
        case "ImagingStudy":
            return parseImagingStudy(elementName, jsonNode, elementIndex);
        case "Immunization":
            return parseImmunization(elementName, jsonNode, elementIndex);
        case "ImmunizationEvaluation":
            return parseImmunizationEvaluation(elementName, jsonNode, elementIndex);
        case "ImmunizationRecommendation":
            return parseImmunizationRecommendation(elementName, jsonNode, elementIndex);
        case "ImplementationGuide":
            return parseImplementationGuide(elementName, jsonNode, elementIndex);
        case "Ingredient":
            return parseIngredient(elementName, jsonNode, elementIndex);
        case "InsurancePlan":
            return parseInsurancePlan(elementName, jsonNode, elementIndex);
        case "Invoice":
            return parseInvoice(elementName, jsonNode, elementIndex);
        case "Library":
            return parseLibrary(elementName, jsonNode, elementIndex);
        case "Linkage":
            return parseLinkage(elementName, jsonNode, elementIndex);
        case "List":
            return parseList(elementName, jsonNode, elementIndex);
        case "Location":
            return parseLocation(elementName, jsonNode, elementIndex);
        case "ManufacturedItemDefinition":
            return parseManufacturedItemDefinition(elementName, jsonNode, elementIndex);
        case "Measure":
            return parseMeasure(elementName, jsonNode, elementIndex);
        case "MeasureReport":
            return parseMeasureReport(elementName, jsonNode, elementIndex);
        case "Media":
            return parseMedia(elementName, jsonNode, elementIndex);
        case "Medication":
            return parseMedication(elementName, jsonNode, elementIndex);
        case "MedicationAdministration":
            return parseMedicationAdministration(elementName, jsonNode, elementIndex);
        case "MedicationDispense":
            return parseMedicationDispense(elementName, jsonNode, elementIndex);
        case "MedicationKnowledge":
            return parseMedicationKnowledge(elementName, jsonNode, elementIndex);
        case "MedicationRequest":
            return parseMedicationRequest(elementName, jsonNode, elementIndex);
        case "MedicationStatement":
            return parseMedicationStatement(elementName, jsonNode, elementIndex);
        case "MedicinalProductDefinition":
            return parseMedicinalProductDefinition(elementName, jsonNode, elementIndex);
        case "MessageDefinition":
            return parseMessageDefinition(elementName, jsonNode, elementIndex);
        case "MessageHeader":
            return parseMessageHeader(elementName, jsonNode, elementIndex);
        case "MolecularSequence":
            return parseMolecularSequence(elementName, jsonNode, elementIndex);
        case "NamingSystem":
            return parseNamingSystem(elementName, jsonNode, elementIndex);
        case "NutritionOrder":
            return parseNutritionOrder(elementName, jsonNode, elementIndex);
        case "NutritionProduct":
            return parseNutritionProduct(elementName, jsonNode, elementIndex);
        case "Observation":
            return parseObservation(elementName, jsonNode, elementIndex);
        case "ObservationDefinition":
            return parseObservationDefinition(elementName, jsonNode, elementIndex);
        case "OperationDefinition":
            return parseOperationDefinition(elementName, jsonNode, elementIndex);
        case "OperationOutcome":
            return parseOperationOutcome(elementName, jsonNode, elementIndex);
        case "Organization":
            return parseOrganization(elementName, jsonNode, elementIndex);
        case "OrganizationAffiliation":
            return parseOrganizationAffiliation(elementName, jsonNode, elementIndex);
        case "PackagedProductDefinition":
            return parsePackagedProductDefinition(elementName, jsonNode, elementIndex);
        case "Parameters":
            return parseParameters(elementName, jsonNode, elementIndex);
        case "Patient":
            return parsePatient(elementName, jsonNode, elementIndex);
        case "PaymentNotice":
            return parsePaymentNotice(elementName, jsonNode, elementIndex);
        case "PaymentReconciliation":
            return parsePaymentReconciliation(elementName, jsonNode, elementIndex);
        case "Person":
            return parsePerson(elementName, jsonNode, elementIndex);
        case "PlanDefinition":
            return parsePlanDefinition(elementName, jsonNode, elementIndex);
        case "Practitioner":
            return parsePractitioner(elementName, jsonNode, elementIndex);
        case "PractitionerRole":
            return parsePractitionerRole(elementName, jsonNode, elementIndex);
        case "Procedure":
            return parseProcedure(elementName, jsonNode, elementIndex);
        case "Provenance":
            return parseProvenance(elementName, jsonNode, elementIndex);
        case "Questionnaire":
            return parseQuestionnaire(elementName, jsonNode, elementIndex);
        case "QuestionnaireResponse":
            return parseQuestionnaireResponse(elementName, jsonNode, elementIndex);
        case "RegulatedAuthorization":
            return parseRegulatedAuthorization(elementName, jsonNode, elementIndex);
        case "RelatedPerson":
            return parseRelatedPerson(elementName, jsonNode, elementIndex);
        case "RequestGroup":
            return parseRequestGroup(elementName, jsonNode, elementIndex);
        case "ResearchDefinition":
            return parseResearchDefinition(elementName, jsonNode, elementIndex);
        case "ResearchElementDefinition":
            return parseResearchElementDefinition(elementName, jsonNode, elementIndex);
        case "ResearchStudy":
            return parseResearchStudy(elementName, jsonNode, elementIndex);
        case "ResearchSubject":
            return parseResearchSubject(elementName, jsonNode, elementIndex);
        case "RiskAssessment":
            return parseRiskAssessment(elementName, jsonNode, elementIndex);
        case "Schedule":
            return parseSchedule(elementName, jsonNode, elementIndex);
        case "SearchParameter":
            return parseSearchParameter(elementName, jsonNode, elementIndex);
        case "ServiceRequest":
            return parseServiceRequest(elementName, jsonNode, elementIndex);
        case "Slot":
            return parseSlot(elementName, jsonNode, elementIndex);
        case "Specimen":
            return parseSpecimen(elementName, jsonNode, elementIndex);
        case "SpecimenDefinition":
            return parseSpecimenDefinition(elementName, jsonNode, elementIndex);
        case "StructureDefinition":
            return parseStructureDefinition(elementName, jsonNode, elementIndex);
        case "StructureMap":
            return parseStructureMap(elementName, jsonNode, elementIndex);
        case "Subscription":
            return parseSubscription(elementName, jsonNode, elementIndex);
        case "SubscriptionStatus":
            return parseSubscriptionStatus(elementName, jsonNode, elementIndex);
        case "SubscriptionTopic":
            return parseSubscriptionTopic(elementName, jsonNode, elementIndex);
        case "Substance":
            return parseSubstance(elementName, jsonNode, elementIndex);
        case "SubstanceDefinition":
            return parseSubstanceDefinition(elementName, jsonNode, elementIndex);
        case "SupplyDelivery":
            return parseSupplyDelivery(elementName, jsonNode, elementIndex);
        case "SupplyRequest":
            return parseSupplyRequest(elementName, jsonNode, elementIndex);
        case "Task":
            return parseTask(elementName, jsonNode, elementIndex);
        case "TerminologyCapabilities":
            return parseTerminologyCapabilities(elementName, jsonNode, elementIndex);
        case "TestReport":
            return parseTestReport(elementName, jsonNode, elementIndex);
        case "TestScript":
            return parseTestScript(elementName, jsonNode, elementIndex);
        case "ValueSet":
            return parseValueSet(elementName, jsonNode, elementIndex);
        case "VerificationResult":
            return parseVerificationResult(elementName, jsonNode, elementIndex);
        case "VisionPrescription":
            return parseVisionPrescription(elementName, jsonNode, elementIndex);
        }
        return null;
    }

    private Account parseAccount(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Account.class, jsonNode);
        }
        Account.Builder builder = Account.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((AccountStatus) parseString(AccountStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        ArrayNode subjectArray = getArrayNode(jsonNode, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                if (subjectArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subjectArray.get(i).getNodeType() + " for element: subject");
                }
                builder.subject(parseReference("subject", subjectArray.get(i), i));
            }
        }
        builder.servicePeriod(parsePeriod("servicePeriod", getJsonNode(jsonNode, "servicePeriod", JsonNode.class), -1));
        ArrayNode coverageArray = getArrayNode(jsonNode, "coverage");
        if (coverageArray != null) {
            for (int i = 0; i < coverageArray.size(); i++) {
                if (coverageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + coverageArray.get(i).getNodeType() + " for element: coverage");
                }
                builder.coverage(parseAccountCoverage("coverage", coverageArray.get(i), i));
            }
        }
        builder.owner(parseReference("owner", getJsonNode(jsonNode, "owner", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode guarantorArray = getArrayNode(jsonNode, "guarantor");
        if (guarantorArray != null) {
            for (int i = 0; i < guarantorArray.size(); i++) {
                if (guarantorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + guarantorArray.get(i).getNodeType() + " for element: guarantor");
                }
                builder.guarantor(parseAccountGuarantor("guarantor", guarantorArray.get(i), i));
            }
        }
        builder.partOf(parseReference("partOf", getJsonNode(jsonNode, "partOf", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Account.Coverage parseAccountCoverage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Account.Coverage.class, jsonNode);
        }
        Account.Coverage.Builder builder = Account.Coverage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.coverage(parseReference("coverage", getJsonNode(jsonNode, "coverage", JsonNode.class), -1));
        builder.priority((PositiveInt) parseInteger(PositiveInt.builder(), "priority", getJsonNode(jsonNode, "priority", NumericNode.class), jsonNode.get("_priority"), -1));
        stackPop();
        return builder.build();
    }

    private Account.Guarantor parseAccountGuarantor(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Account.Guarantor.class, jsonNode);
        }
        Account.Guarantor.Builder builder = Account.Guarantor.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.party(parseReference("party", getJsonNode(jsonNode, "party", JsonNode.class), -1));
        builder.onHold(parseBoolean("onHold", getJsonNode(jsonNode, "onHold", JsonNode.class), jsonNode.get("_onHold"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ActivityDefinition parseActivityDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ActivityDefinition.class, jsonNode);
        }
        ActivityDefinition.Builder builder = ActivityDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class, Canonical.class));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonNode(jsonNode, "usage", TextNode.class), jsonNode.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode topicArray = getArrayNode(jsonNode, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                if (topicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + topicArray.get(i).getNodeType() + " for element: topic");
                }
                builder.topic(parseCodeableConcept("topic", topicArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        ArrayNode libraryArray = getArrayNode(jsonNode, "library", true);
        if (libraryArray != null) {
            ArrayNode _libraryArray = getArrayNode(jsonNode, "_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonNode(_libraryArray, i), i));
            }
        }
        builder.kind((ActivityDefinitionKind) parseString(ActivityDefinitionKind.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonNode(jsonNode, "profile", TextNode.class), jsonNode.get("_profile"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", getJsonNode(jsonNode, "intent", TextNode.class), jsonNode.get("_intent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonNode(jsonNode, "doNotPerform", JsonNode.class), jsonNode.get("_doNotPerform"), -1));
        builder.timing(parseChoiceElement("timing", jsonNode, Timing.class, DateTime.class, Age.class, Period.class, Range.class, Duration.class));
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        ArrayNode participantArray = getArrayNode(jsonNode, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                if (participantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantArray.get(i).getNodeType() + " for element: participant");
                }
                builder.participant(parseActivityDefinitionParticipant("participant", participantArray.get(i), i));
            }
        }
        builder.product(parseChoiceElement("product", jsonNode, Reference.class, CodeableConcept.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        ArrayNode dosageArray = getArrayNode(jsonNode, "dosage");
        if (dosageArray != null) {
            for (int i = 0; i < dosageArray.size(); i++) {
                if (dosageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dosageArray.get(i).getNodeType() + " for element: dosage");
                }
                builder.dosage(parseDosage("dosage", dosageArray.get(i), i));
            }
        }
        ArrayNode bodySiteArray = getArrayNode(jsonNode, "bodySite");
        if (bodySiteArray != null) {
            for (int i = 0; i < bodySiteArray.size(); i++) {
                if (bodySiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + bodySiteArray.get(i).getNodeType() + " for element: bodySite");
                }
                builder.bodySite(parseCodeableConcept("bodySite", bodySiteArray.get(i), i));
            }
        }
        ArrayNode specimenRequirementArray = getArrayNode(jsonNode, "specimenRequirement");
        if (specimenRequirementArray != null) {
            for (int i = 0; i < specimenRequirementArray.size(); i++) {
                if (specimenRequirementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specimenRequirementArray.get(i).getNodeType() + " for element: specimenRequirement");
                }
                builder.specimenRequirement(parseReference("specimenRequirement", specimenRequirementArray.get(i), i));
            }
        }
        ArrayNode observationRequirementArray = getArrayNode(jsonNode, "observationRequirement");
        if (observationRequirementArray != null) {
            for (int i = 0; i < observationRequirementArray.size(); i++) {
                if (observationRequirementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + observationRequirementArray.get(i).getNodeType() + " for element: observationRequirement");
                }
                builder.observationRequirement(parseReference("observationRequirement", observationRequirementArray.get(i), i));
            }
        }
        ArrayNode observationResultRequirementArray = getArrayNode(jsonNode, "observationResultRequirement");
        if (observationResultRequirementArray != null) {
            for (int i = 0; i < observationResultRequirementArray.size(); i++) {
                if (observationResultRequirementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + observationResultRequirementArray.get(i).getNodeType() + " for element: observationResultRequirement");
                }
                builder.observationResultRequirement(parseReference("observationResultRequirement", observationResultRequirementArray.get(i), i));
            }
        }
        builder.transform((Canonical) parseUri(Canonical.builder(), "transform", getJsonNode(jsonNode, "transform", TextNode.class), jsonNode.get("_transform"), -1));
        ArrayNode dynamicValueArray = getArrayNode(jsonNode, "dynamicValue");
        if (dynamicValueArray != null) {
            for (int i = 0; i < dynamicValueArray.size(); i++) {
                if (dynamicValueArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dynamicValueArray.get(i).getNodeType() + " for element: dynamicValue");
                }
                builder.dynamicValue(parseActivityDefinitionDynamicValue("dynamicValue", dynamicValueArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ActivityDefinition.DynamicValue parseActivityDefinitionDynamicValue(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ActivityDefinition.DynamicValue.class, jsonNode);
        }
        ActivityDefinition.DynamicValue.Builder builder = ActivityDefinition.DynamicValue.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.expression(parseExpression("expression", getJsonNode(jsonNode, "expression", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ActivityDefinition.Participant parseActivityDefinitionParticipant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ActivityDefinition.Participant.class, jsonNode);
        }
        ActivityDefinition.Participant.Builder builder = ActivityDefinition.Participant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((ActivityParticipantType) parseString(ActivityParticipantType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Address parseAddress(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Address.class, jsonNode);
        }
        Address.Builder builder = Address.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.use((AddressUse) parseString(AddressUse.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.type((AddressType) parseString(AddressType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        ArrayNode lineArray = getArrayNode(jsonNode, "line", true);
        if (lineArray != null) {
            ArrayNode _lineArray = getArrayNode(jsonNode, "_line");
            for (int i = 0; i < lineArray.size(); i++) {
                builder.line(parseString("line", lineArray.get(i), getJsonNode(_lineArray, i), i));
            }
        }
        builder.city(parseString("city", getJsonNode(jsonNode, "city", TextNode.class), jsonNode.get("_city"), -1));
        builder.district(parseString("district", getJsonNode(jsonNode, "district", TextNode.class), jsonNode.get("_district"), -1));
        builder.state(parseString("state", getJsonNode(jsonNode, "state", TextNode.class), jsonNode.get("_state"), -1));
        builder.postalCode(parseString("postalCode", getJsonNode(jsonNode, "postalCode", TextNode.class), jsonNode.get("_postalCode"), -1));
        builder.country(parseString("country", getJsonNode(jsonNode, "country", TextNode.class), jsonNode.get("_country"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private AdministrableProductDefinition parseAdministrableProductDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AdministrableProductDefinition.class, jsonNode);
        }
        AdministrableProductDefinition.Builder builder = AdministrableProductDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode formOfArray = getArrayNode(jsonNode, "formOf");
        if (formOfArray != null) {
            for (int i = 0; i < formOfArray.size(); i++) {
                if (formOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + formOfArray.get(i).getNodeType() + " for element: formOf");
                }
                builder.formOf(parseReference("formOf", formOfArray.get(i), i));
            }
        }
        builder.administrableDoseForm(parseCodeableConcept("administrableDoseForm", getJsonNode(jsonNode, "administrableDoseForm", JsonNode.class), -1));
        builder.unitOfPresentation(parseCodeableConcept("unitOfPresentation", getJsonNode(jsonNode, "unitOfPresentation", JsonNode.class), -1));
        ArrayNode producedFromArray = getArrayNode(jsonNode, "producedFrom");
        if (producedFromArray != null) {
            for (int i = 0; i < producedFromArray.size(); i++) {
                if (producedFromArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + producedFromArray.get(i).getNodeType() + " for element: producedFrom");
                }
                builder.producedFrom(parseReference("producedFrom", producedFromArray.get(i), i));
            }
        }
        ArrayNode ingredientArray = getArrayNode(jsonNode, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                if (ingredientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ingredientArray.get(i).getNodeType() + " for element: ingredient");
                }
                builder.ingredient(parseCodeableConcept("ingredient", ingredientArray.get(i), i));
            }
        }
        builder.device(parseReference("device", getJsonNode(jsonNode, "device", JsonNode.class), -1));
        ArrayNode propertyArray = getArrayNode(jsonNode, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                if (propertyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyArray.get(i).getNodeType() + " for element: property");
                }
                builder.property(parseAdministrableProductDefinitionProperty("property", propertyArray.get(i), i));
            }
        }
        ArrayNode routeOfAdministrationArray = getArrayNode(jsonNode, "routeOfAdministration");
        if (routeOfAdministrationArray != null) {
            for (int i = 0; i < routeOfAdministrationArray.size(); i++) {
                if (routeOfAdministrationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + routeOfAdministrationArray.get(i).getNodeType() + " for element: routeOfAdministration");
                }
                builder.routeOfAdministration(parseAdministrableProductDefinitionRouteOfAdministration("routeOfAdministration", routeOfAdministrationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AdministrableProductDefinition.Property parseAdministrableProductDefinitionProperty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AdministrableProductDefinition.Property.class, jsonNode);
        }
        AdministrableProductDefinition.Property.Builder builder = AdministrableProductDefinition.Property.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Date.class, Boolean.class, Attachment.class));
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private AdministrableProductDefinition.RouteOfAdministration parseAdministrableProductDefinitionRouteOfAdministration(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AdministrableProductDefinition.RouteOfAdministration.class, jsonNode);
        }
        AdministrableProductDefinition.RouteOfAdministration.Builder builder = AdministrableProductDefinition.RouteOfAdministration.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.firstDose(parseQuantity("firstDose", getJsonNode(jsonNode, "firstDose", JsonNode.class), -1));
        builder.maxSingleDose(parseQuantity("maxSingleDose", getJsonNode(jsonNode, "maxSingleDose", JsonNode.class), -1));
        builder.maxDosePerDay(parseQuantity("maxDosePerDay", getJsonNode(jsonNode, "maxDosePerDay", JsonNode.class), -1));
        builder.maxDosePerTreatmentPeriod(parseRatio("maxDosePerTreatmentPeriod", getJsonNode(jsonNode, "maxDosePerTreatmentPeriod", JsonNode.class), -1));
        builder.maxTreatmentPeriod((Duration) parseQuantity(Duration.builder(), "maxTreatmentPeriod", getJsonNode(jsonNode, "maxTreatmentPeriod", JsonNode.class), -1));
        ArrayNode targetSpeciesArray = getArrayNode(jsonNode, "targetSpecies");
        if (targetSpeciesArray != null) {
            for (int i = 0; i < targetSpeciesArray.size(); i++) {
                if (targetSpeciesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetSpeciesArray.get(i).getNodeType() + " for element: targetSpecies");
                }
                builder.targetSpecies(parseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies("targetSpecies", targetSpeciesArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AdministrableProductDefinition.RouteOfAdministration.TargetSpecies parseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AdministrableProductDefinition.RouteOfAdministration.TargetSpecies.class, jsonNode);
        }
        AdministrableProductDefinition.RouteOfAdministration.TargetSpecies.Builder builder = AdministrableProductDefinition.RouteOfAdministration.TargetSpecies.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode withdrawalPeriodArray = getArrayNode(jsonNode, "withdrawalPeriod");
        if (withdrawalPeriodArray != null) {
            for (int i = 0; i < withdrawalPeriodArray.size(); i++) {
                if (withdrawalPeriodArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + withdrawalPeriodArray.get(i).getNodeType() + " for element: withdrawalPeriod");
                }
                builder.withdrawalPeriod(parseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod("withdrawalPeriod", withdrawalPeriodArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AdministrableProductDefinition.RouteOfAdministration.TargetSpecies.WithdrawalPeriod parseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AdministrableProductDefinition.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.class, jsonNode);
        }
        AdministrableProductDefinition.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.Builder builder = AdministrableProductDefinition.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.tissue(parseCodeableConcept("tissue", getJsonNode(jsonNode, "tissue", JsonNode.class), -1));
        builder.value(parseQuantity("value", getJsonNode(jsonNode, "value", JsonNode.class), -1));
        builder.supportingInformation(parseString("supportingInformation", getJsonNode(jsonNode, "supportingInformation", TextNode.class), jsonNode.get("_supportingInformation"), -1));
        stackPop();
        return builder.build();
    }

    private AdverseEvent parseAdverseEvent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AdverseEvent.class, jsonNode);
        }
        AdverseEvent.Builder builder = AdverseEvent.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.actuality((AdverseEventActuality) parseString(AdverseEventActuality.builder(), "actuality", getJsonNode(jsonNode, "actuality", TextNode.class), jsonNode.get("_actuality"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.event(parseCodeableConcept("event", getJsonNode(jsonNode, "event", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.detected(parseDateTime("detected", getJsonNode(jsonNode, "detected", TextNode.class), jsonNode.get("_detected"), -1));
        builder.recordedDate(parseDateTime("recordedDate", getJsonNode(jsonNode, "recordedDate", TextNode.class), jsonNode.get("_recordedDate"), -1));
        ArrayNode resultingConditionArray = getArrayNode(jsonNode, "resultingCondition");
        if (resultingConditionArray != null) {
            for (int i = 0; i < resultingConditionArray.size(); i++) {
                if (resultingConditionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + resultingConditionArray.get(i).getNodeType() + " for element: resultingCondition");
                }
                builder.resultingCondition(parseReference("resultingCondition", resultingConditionArray.get(i), i));
            }
        }
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        builder.seriousness(parseCodeableConcept("seriousness", getJsonNode(jsonNode, "seriousness", JsonNode.class), -1));
        builder.severity(parseCodeableConcept("severity", getJsonNode(jsonNode, "severity", JsonNode.class), -1));
        builder.outcome(parseCodeableConcept("outcome", getJsonNode(jsonNode, "outcome", JsonNode.class), -1));
        builder.recorder(parseReference("recorder", getJsonNode(jsonNode, "recorder", JsonNode.class), -1));
        ArrayNode contributorArray = getArrayNode(jsonNode, "contributor");
        if (contributorArray != null) {
            for (int i = 0; i < contributorArray.size(); i++) {
                if (contributorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contributorArray.get(i).getNodeType() + " for element: contributor");
                }
                builder.contributor(parseReference("contributor", contributorArray.get(i), i));
            }
        }
        ArrayNode suspectEntityArray = getArrayNode(jsonNode, "suspectEntity");
        if (suspectEntityArray != null) {
            for (int i = 0; i < suspectEntityArray.size(); i++) {
                if (suspectEntityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + suspectEntityArray.get(i).getNodeType() + " for element: suspectEntity");
                }
                builder.suspectEntity(parseAdverseEventSuspectEntity("suspectEntity", suspectEntityArray.get(i), i));
            }
        }
        ArrayNode subjectMedicalHistoryArray = getArrayNode(jsonNode, "subjectMedicalHistory");
        if (subjectMedicalHistoryArray != null) {
            for (int i = 0; i < subjectMedicalHistoryArray.size(); i++) {
                if (subjectMedicalHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subjectMedicalHistoryArray.get(i).getNodeType() + " for element: subjectMedicalHistory");
                }
                builder.subjectMedicalHistory(parseReference("subjectMedicalHistory", subjectMedicalHistoryArray.get(i), i));
            }
        }
        ArrayNode referenceDocumentArray = getArrayNode(jsonNode, "referenceDocument");
        if (referenceDocumentArray != null) {
            for (int i = 0; i < referenceDocumentArray.size(); i++) {
                if (referenceDocumentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referenceDocumentArray.get(i).getNodeType() + " for element: referenceDocument");
                }
                builder.referenceDocument(parseReference("referenceDocument", referenceDocumentArray.get(i), i));
            }
        }
        ArrayNode studyArray = getArrayNode(jsonNode, "study");
        if (studyArray != null) {
            for (int i = 0; i < studyArray.size(); i++) {
                if (studyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + studyArray.get(i).getNodeType() + " for element: study");
                }
                builder.study(parseReference("study", studyArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AdverseEvent.SuspectEntity parseAdverseEventSuspectEntity(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AdverseEvent.SuspectEntity.class, jsonNode);
        }
        AdverseEvent.SuspectEntity.Builder builder = AdverseEvent.SuspectEntity.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.instance(parseReference("instance", getJsonNode(jsonNode, "instance", JsonNode.class), -1));
        ArrayNode causalityArray = getArrayNode(jsonNode, "causality");
        if (causalityArray != null) {
            for (int i = 0; i < causalityArray.size(); i++) {
                if (causalityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + causalityArray.get(i).getNodeType() + " for element: causality");
                }
                builder.causality(parseAdverseEventSuspectEntityCausality("causality", causalityArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AdverseEvent.SuspectEntity.Causality parseAdverseEventSuspectEntityCausality(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AdverseEvent.SuspectEntity.Causality.class, jsonNode);
        }
        AdverseEvent.SuspectEntity.Causality.Builder builder = AdverseEvent.SuspectEntity.Causality.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.assessment(parseCodeableConcept("assessment", getJsonNode(jsonNode, "assessment", JsonNode.class), -1));
        builder.productRelatedness(parseString("productRelatedness", getJsonNode(jsonNode, "productRelatedness", TextNode.class), jsonNode.get("_productRelatedness"), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private AllergyIntolerance parseAllergyIntolerance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AllergyIntolerance.class, jsonNode);
        }
        AllergyIntolerance.Builder builder = AllergyIntolerance.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.clinicalStatus(parseCodeableConcept("clinicalStatus", getJsonNode(jsonNode, "clinicalStatus", JsonNode.class), -1));
        builder.verificationStatus(parseCodeableConcept("verificationStatus", getJsonNode(jsonNode, "verificationStatus", JsonNode.class), -1));
        builder.type((AllergyIntoleranceType) parseString(AllergyIntoleranceType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category", true);
        if (categoryArray != null) {
            ArrayNode _categoryArray = getArrayNode(jsonNode, "_category");
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category((AllergyIntoleranceCategory) parseString(AllergyIntoleranceCategory.builder(), "category", categoryArray.get(i), getJsonNode(_categoryArray, i), i));
            }
        }
        builder.criticality((AllergyIntoleranceCriticality) parseString(AllergyIntoleranceCriticality.builder(), "criticality", getJsonNode(jsonNode, "criticality", TextNode.class), jsonNode.get("_criticality"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.onset(parseChoiceElement("onset", jsonNode, DateTime.class, Age.class, Period.class, Range.class, String.class));
        builder.recordedDate(parseDateTime("recordedDate", getJsonNode(jsonNode, "recordedDate", TextNode.class), jsonNode.get("_recordedDate"), -1));
        builder.recorder(parseReference("recorder", getJsonNode(jsonNode, "recorder", JsonNode.class), -1));
        builder.asserter(parseReference("asserter", getJsonNode(jsonNode, "asserter", JsonNode.class), -1));
        builder.lastOccurrence(parseDateTime("lastOccurrence", getJsonNode(jsonNode, "lastOccurrence", TextNode.class), jsonNode.get("_lastOccurrence"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode reactionArray = getArrayNode(jsonNode, "reaction");
        if (reactionArray != null) {
            for (int i = 0; i < reactionArray.size(); i++) {
                if (reactionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reactionArray.get(i).getNodeType() + " for element: reaction");
                }
                builder.reaction(parseAllergyIntoleranceReaction("reaction", reactionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AllergyIntolerance.Reaction parseAllergyIntoleranceReaction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AllergyIntolerance.Reaction.class, jsonNode);
        }
        AllergyIntolerance.Reaction.Builder builder = AllergyIntolerance.Reaction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.substance(parseCodeableConcept("substance", getJsonNode(jsonNode, "substance", JsonNode.class), -1));
        ArrayNode manifestationArray = getArrayNode(jsonNode, "manifestation");
        if (manifestationArray != null) {
            for (int i = 0; i < manifestationArray.size(); i++) {
                if (manifestationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + manifestationArray.get(i).getNodeType() + " for element: manifestation");
                }
                builder.manifestation(parseCodeableConcept("manifestation", manifestationArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.onset(parseDateTime("onset", getJsonNode(jsonNode, "onset", TextNode.class), jsonNode.get("_onset"), -1));
        builder.severity((AllergyIntoleranceSeverity) parseString(AllergyIntoleranceSeverity.builder(), "severity", getJsonNode(jsonNode, "severity", TextNode.class), jsonNode.get("_severity"), -1));
        builder.exposureRoute(parseCodeableConcept("exposureRoute", getJsonNode(jsonNode, "exposureRoute", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Annotation parseAnnotation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Annotation.class, jsonNode);
        }
        Annotation.Builder builder = Annotation.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.author(parseChoiceElement("author", jsonNode, Reference.class, String.class));
        builder.time(parseDateTime("time", getJsonNode(jsonNode, "time", TextNode.class), jsonNode.get("_time"), -1));
        builder.text((Markdown) parseString(Markdown.builder(), "text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Appointment parseAppointment(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Appointment.class, jsonNode);
        }
        Appointment.Builder builder = Appointment.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((AppointmentStatus) parseString(AppointmentStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.cancelationReason(parseCodeableConcept("cancelationReason", getJsonNode(jsonNode, "cancelationReason", JsonNode.class), -1));
        ArrayNode serviceCategoryArray = getArrayNode(jsonNode, "serviceCategory");
        if (serviceCategoryArray != null) {
            for (int i = 0; i < serviceCategoryArray.size(); i++) {
                if (serviceCategoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceCategoryArray.get(i).getNodeType() + " for element: serviceCategory");
                }
                builder.serviceCategory(parseCodeableConcept("serviceCategory", serviceCategoryArray.get(i), i));
            }
        }
        ArrayNode serviceTypeArray = getArrayNode(jsonNode, "serviceType");
        if (serviceTypeArray != null) {
            for (int i = 0; i < serviceTypeArray.size(); i++) {
                if (serviceTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceTypeArray.get(i).getNodeType() + " for element: serviceType");
                }
                builder.serviceType(parseCodeableConcept("serviceType", serviceTypeArray.get(i), i));
            }
        }
        ArrayNode specialtyArray = getArrayNode(jsonNode, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                if (specialtyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialtyArray.get(i).getNodeType() + " for element: specialty");
                }
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.get(i), i));
            }
        }
        builder.appointmentType(parseCodeableConcept("appointmentType", getJsonNode(jsonNode, "appointmentType", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        builder.priority((UnsignedInt) parseInteger(UnsignedInt.builder(), "priority", getJsonNode(jsonNode, "priority", NumericNode.class), jsonNode.get("_priority"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode supportingInformationArray = getArrayNode(jsonNode, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                if (supportingInformationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInformationArray.get(i).getNodeType() + " for element: supportingInformation");
                }
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.get(i), i));
            }
        }
        builder.start(parseInstant("start", getJsonNode(jsonNode, "start", TextNode.class), jsonNode.get("_start"), -1));
        builder.end(parseInstant("end", getJsonNode(jsonNode, "end", TextNode.class), jsonNode.get("_end"), -1));
        builder.minutesDuration((PositiveInt) parseInteger(PositiveInt.builder(), "minutesDuration", getJsonNode(jsonNode, "minutesDuration", NumericNode.class), jsonNode.get("_minutesDuration"), -1));
        ArrayNode slotArray = getArrayNode(jsonNode, "slot");
        if (slotArray != null) {
            for (int i = 0; i < slotArray.size(); i++) {
                if (slotArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + slotArray.get(i).getNodeType() + " for element: slot");
                }
                builder.slot(parseReference("slot", slotArray.get(i), i));
            }
        }
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        builder.patientInstruction(parseString("patientInstruction", getJsonNode(jsonNode, "patientInstruction", TextNode.class), jsonNode.get("_patientInstruction"), -1));
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode participantArray = getArrayNode(jsonNode, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                if (participantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantArray.get(i).getNodeType() + " for element: participant");
                }
                builder.participant(parseAppointmentParticipant("participant", participantArray.get(i), i));
            }
        }
        ArrayNode requestedPeriodArray = getArrayNode(jsonNode, "requestedPeriod");
        if (requestedPeriodArray != null) {
            for (int i = 0; i < requestedPeriodArray.size(); i++) {
                if (requestedPeriodArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + requestedPeriodArray.get(i).getNodeType() + " for element: requestedPeriod");
                }
                builder.requestedPeriod(parsePeriod("requestedPeriod", requestedPeriodArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Appointment.Participant parseAppointmentParticipant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Appointment.Participant.class, jsonNode);
        }
        Appointment.Participant.Builder builder = Appointment.Participant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        builder.required((ParticipantRequired) parseString(ParticipantRequired.builder(), "required", getJsonNode(jsonNode, "required", TextNode.class), jsonNode.get("_required"), -1));
        builder.status((ParticipationStatus) parseString(ParticipationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private AppointmentResponse parseAppointmentResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AppointmentResponse.class, jsonNode);
        }
        AppointmentResponse.Builder builder = AppointmentResponse.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.appointment(parseReference("appointment", getJsonNode(jsonNode, "appointment", JsonNode.class), -1));
        builder.start(parseInstant("start", getJsonNode(jsonNode, "start", TextNode.class), jsonNode.get("_start"), -1));
        builder.end(parseInstant("end", getJsonNode(jsonNode, "end", TextNode.class), jsonNode.get("_end"), -1));
        ArrayNode participantTypeArray = getArrayNode(jsonNode, "participantType");
        if (participantTypeArray != null) {
            for (int i = 0; i < participantTypeArray.size(); i++) {
                if (participantTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantTypeArray.get(i).getNodeType() + " for element: participantType");
                }
                builder.participantType(parseCodeableConcept("participantType", participantTypeArray.get(i), i));
            }
        }
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        builder.participantStatus((ParticipantStatus) parseString(ParticipantStatus.builder(), "participantStatus", getJsonNode(jsonNode, "participantStatus", TextNode.class), jsonNode.get("_participantStatus"), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private Attachment parseAttachment(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Attachment.class, jsonNode);
        }
        Attachment.Builder builder = Attachment.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.contentType((Code) parseString(Code.builder(), "contentType", getJsonNode(jsonNode, "contentType", TextNode.class), jsonNode.get("_contentType"), -1));
        builder.language((Code) parseString(Code.builder(), "language", getJsonNode(jsonNode, "language", TextNode.class), jsonNode.get("_language"), -1));
        builder.data(parseBase64Binary("data", getJsonNode(jsonNode, "data", TextNode.class), jsonNode.get("_data"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.size((UnsignedInt) parseInteger(UnsignedInt.builder(), "size", getJsonNode(jsonNode, "size", NumericNode.class), jsonNode.get("_size"), -1));
        builder.hash(parseBase64Binary("hash", getJsonNode(jsonNode, "hash", TextNode.class), jsonNode.get("_hash"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.creation(parseDateTime("creation", getJsonNode(jsonNode, "creation", TextNode.class), jsonNode.get("_creation"), -1));
        stackPop();
        return builder.build();
    }

    private AuditEvent parseAuditEvent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AuditEvent.class, jsonNode);
        }
        AuditEvent.Builder builder = AuditEvent.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.type(parseCoding("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode subtypeArray = getArrayNode(jsonNode, "subtype");
        if (subtypeArray != null) {
            for (int i = 0; i < subtypeArray.size(); i++) {
                if (subtypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subtypeArray.get(i).getNodeType() + " for element: subtype");
                }
                builder.subtype(parseCoding("subtype", subtypeArray.get(i), i));
            }
        }
        builder.action((AuditEventAction) parseString(AuditEventAction.builder(), "action", getJsonNode(jsonNode, "action", TextNode.class), jsonNode.get("_action"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.recorded(parseInstant("recorded", getJsonNode(jsonNode, "recorded", TextNode.class), jsonNode.get("_recorded"), -1));
        builder.outcome((AuditEventOutcome) parseString(AuditEventOutcome.builder(), "outcome", getJsonNode(jsonNode, "outcome", TextNode.class), jsonNode.get("_outcome"), -1));
        builder.outcomeDesc(parseString("outcomeDesc", getJsonNode(jsonNode, "outcomeDesc", TextNode.class), jsonNode.get("_outcomeDesc"), -1));
        ArrayNode purposeOfEventArray = getArrayNode(jsonNode, "purposeOfEvent");
        if (purposeOfEventArray != null) {
            for (int i = 0; i < purposeOfEventArray.size(); i++) {
                if (purposeOfEventArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + purposeOfEventArray.get(i).getNodeType() + " for element: purposeOfEvent");
                }
                builder.purposeOfEvent(parseCodeableConcept("purposeOfEvent", purposeOfEventArray.get(i), i));
            }
        }
        ArrayNode agentArray = getArrayNode(jsonNode, "agent");
        if (agentArray != null) {
            for (int i = 0; i < agentArray.size(); i++) {
                if (agentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + agentArray.get(i).getNodeType() + " for element: agent");
                }
                builder.agent(parseAuditEventAgent("agent", agentArray.get(i), i));
            }
        }
        builder.source(parseAuditEventSource("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        ArrayNode entityArray = getArrayNode(jsonNode, "entity");
        if (entityArray != null) {
            for (int i = 0; i < entityArray.size(); i++) {
                if (entityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entityArray.get(i).getNodeType() + " for element: entity");
                }
                builder.entity(parseAuditEventEntity("entity", entityArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AuditEvent.Agent parseAuditEventAgent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AuditEvent.Agent.class, jsonNode);
        }
        AuditEvent.Agent.Builder builder = AuditEvent.Agent.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode roleArray = getArrayNode(jsonNode, "role");
        if (roleArray != null) {
            for (int i = 0; i < roleArray.size(); i++) {
                if (roleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + roleArray.get(i).getNodeType() + " for element: role");
                }
                builder.role(parseCodeableConcept("role", roleArray.get(i), i));
            }
        }
        builder.who(parseReference("who", getJsonNode(jsonNode, "who", JsonNode.class), -1));
        builder.altId(parseString("altId", getJsonNode(jsonNode, "altId", TextNode.class), jsonNode.get("_altId"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.requestor(parseBoolean("requestor", getJsonNode(jsonNode, "requestor", JsonNode.class), jsonNode.get("_requestor"), -1));
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        ArrayNode policyArray = getArrayNode(jsonNode, "policy", true);
        if (policyArray != null) {
            ArrayNode _policyArray = getArrayNode(jsonNode, "_policy");
            for (int i = 0; i < policyArray.size(); i++) {
                builder.policy(parseUri("policy", policyArray.get(i), getJsonNode(_policyArray, i), i));
            }
        }
        builder.media(parseCoding("media", getJsonNode(jsonNode, "media", JsonNode.class), -1));
        builder.network(parseAuditEventAgentNetwork("network", getJsonNode(jsonNode, "network", JsonNode.class), -1));
        ArrayNode purposeOfUseArray = getArrayNode(jsonNode, "purposeOfUse");
        if (purposeOfUseArray != null) {
            for (int i = 0; i < purposeOfUseArray.size(); i++) {
                if (purposeOfUseArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + purposeOfUseArray.get(i).getNodeType() + " for element: purposeOfUse");
                }
                builder.purposeOfUse(parseCodeableConcept("purposeOfUse", purposeOfUseArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AuditEvent.Agent.Network parseAuditEventAgentNetwork(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AuditEvent.Agent.Network.class, jsonNode);
        }
        AuditEvent.Agent.Network.Builder builder = AuditEvent.Agent.Network.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.address(parseString("address", getJsonNode(jsonNode, "address", TextNode.class), jsonNode.get("_address"), -1));
        builder.type((AuditEventAgentNetworkType) parseString(AuditEventAgentNetworkType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private AuditEvent.Entity parseAuditEventEntity(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AuditEvent.Entity.class, jsonNode);
        }
        AuditEvent.Entity.Builder builder = AuditEvent.Entity.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.what(parseReference("what", getJsonNode(jsonNode, "what", JsonNode.class), -1));
        builder.type(parseCoding("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.role(parseCoding("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        builder.lifecycle(parseCoding("lifecycle", getJsonNode(jsonNode, "lifecycle", JsonNode.class), -1));
        ArrayNode securityLabelArray = getArrayNode(jsonNode, "securityLabel");
        if (securityLabelArray != null) {
            for (int i = 0; i < securityLabelArray.size(); i++) {
                if (securityLabelArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + securityLabelArray.get(i).getNodeType() + " for element: securityLabel");
                }
                builder.securityLabel(parseCoding("securityLabel", securityLabelArray.get(i), i));
            }
        }
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.query(parseBase64Binary("query", getJsonNode(jsonNode, "query", TextNode.class), jsonNode.get("_query"), -1));
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseAuditEventEntityDetail("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AuditEvent.Entity.Detail parseAuditEventEntityDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AuditEvent.Entity.Detail.class, jsonNode);
        }
        AuditEvent.Entity.Detail.Builder builder = AuditEvent.Entity.Detail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseString("type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.value(parseChoiceElement("value", jsonNode, String.class, Base64Binary.class));
        stackPop();
        return builder.build();
    }

    private AuditEvent.Source parseAuditEventSource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(AuditEvent.Source.class, jsonNode);
        }
        AuditEvent.Source.Builder builder = AuditEvent.Source.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.site(parseString("site", getJsonNode(jsonNode, "site", TextNode.class), jsonNode.get("_site"), -1));
        builder.observer(parseReference("observer", getJsonNode(jsonNode, "observer", JsonNode.class), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCoding("type", typeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private void parseBackboneElement(BackboneElement.Builder builder, JsonNode jsonNode) {
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        ArrayNode modifierExtensionArray = getArrayNode(jsonNode, "modifierExtension");
        if (modifierExtensionArray != null) {
            for (int i = 0; i < modifierExtensionArray.size(); i++) {
                if (modifierExtensionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierExtensionArray.get(i).getNodeType() + " for element: modifierExtension");
                }
                builder.modifierExtension(parseExtension("modifierExtension", modifierExtensionArray.get(i), i));
            }
        }
    }

    private Base64Binary parseBase64Binary(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Base64Binary.Builder builder = Base64Binary.builder();
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.STRING) {
            TextNode jsonString = (TextNode) jsonValue;
            builder.value(jsonString.textValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Basic parseBasic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Basic.class, jsonNode);
        }
        Basic.Builder builder = Basic.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.created(parseDate("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Binary parseBinary(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Binary.class, jsonNode);
        }
        Binary.Builder builder = Binary.builder();
        builder.setValidating(validating);
        parseResource(builder, jsonNode);
        builder.contentType((Code) parseString(Code.builder(), "contentType", getJsonNode(jsonNode, "contentType", TextNode.class), jsonNode.get("_contentType"), -1));
        builder.securityContext(parseReference("securityContext", getJsonNode(jsonNode, "securityContext", JsonNode.class), -1));
        builder.data(parseBase64Binary("data", getJsonNode(jsonNode, "data", TextNode.class), jsonNode.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct parseBiologicallyDerivedProduct(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.class, jsonNode);
        }
        BiologicallyDerivedProduct.Builder builder = BiologicallyDerivedProduct.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.productCategory((BiologicallyDerivedProductCategory) parseString(BiologicallyDerivedProductCategory.builder(), "productCategory", getJsonNode(jsonNode, "productCategory", TextNode.class), jsonNode.get("_productCategory"), -1));
        builder.productCode(parseCodeableConcept("productCode", getJsonNode(jsonNode, "productCode", JsonNode.class), -1));
        builder.status((BiologicallyDerivedProductStatus) parseString(BiologicallyDerivedProductStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode requestArray = getArrayNode(jsonNode, "request");
        if (requestArray != null) {
            for (int i = 0; i < requestArray.size(); i++) {
                if (requestArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + requestArray.get(i).getNodeType() + " for element: request");
                }
                builder.request(parseReference("request", requestArray.get(i), i));
            }
        }
        builder.quantity(parseInteger("quantity", getJsonNode(jsonNode, "quantity", NumericNode.class), jsonNode.get("_quantity"), -1));
        ArrayNode parentArray = getArrayNode(jsonNode, "parent");
        if (parentArray != null) {
            for (int i = 0; i < parentArray.size(); i++) {
                if (parentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parentArray.get(i).getNodeType() + " for element: parent");
                }
                builder.parent(parseReference("parent", parentArray.get(i), i));
            }
        }
        builder.collection(parseBiologicallyDerivedProductCollection("collection", getJsonNode(jsonNode, "collection", JsonNode.class), -1));
        ArrayNode processingArray = getArrayNode(jsonNode, "processing");
        if (processingArray != null) {
            for (int i = 0; i < processingArray.size(); i++) {
                if (processingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + processingArray.get(i).getNodeType() + " for element: processing");
                }
                builder.processing(parseBiologicallyDerivedProductProcessing("processing", processingArray.get(i), i));
            }
        }
        builder.manipulation(parseBiologicallyDerivedProductManipulation("manipulation", getJsonNode(jsonNode, "manipulation", JsonNode.class), -1));
        ArrayNode storageArray = getArrayNode(jsonNode, "storage");
        if (storageArray != null) {
            for (int i = 0; i < storageArray.size(); i++) {
                if (storageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + storageArray.get(i).getNodeType() + " for element: storage");
                }
                builder.storage(parseBiologicallyDerivedProductStorage("storage", storageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct.Collection parseBiologicallyDerivedProductCollection(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.Collection.class, jsonNode);
        }
        BiologicallyDerivedProduct.Collection.Builder builder = BiologicallyDerivedProduct.Collection.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.collector(parseReference("collector", getJsonNode(jsonNode, "collector", JsonNode.class), -1));
        builder.source(parseReference("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        builder.collected(parseChoiceElement("collected", jsonNode, DateTime.class, Period.class));
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct.Manipulation parseBiologicallyDerivedProductManipulation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.Manipulation.class, jsonNode);
        }
        BiologicallyDerivedProduct.Manipulation.Builder builder = BiologicallyDerivedProduct.Manipulation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.time(parseChoiceElement("time", jsonNode, DateTime.class, Period.class));
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct.Processing parseBiologicallyDerivedProductProcessing(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.Processing.class, jsonNode);
        }
        BiologicallyDerivedProduct.Processing.Builder builder = BiologicallyDerivedProduct.Processing.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.procedure(parseCodeableConcept("procedure", getJsonNode(jsonNode, "procedure", JsonNode.class), -1));
        builder.additive(parseReference("additive", getJsonNode(jsonNode, "additive", JsonNode.class), -1));
        builder.time(parseChoiceElement("time", jsonNode, DateTime.class, Period.class));
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct.Storage parseBiologicallyDerivedProductStorage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.Storage.class, jsonNode);
        }
        BiologicallyDerivedProduct.Storage.Builder builder = BiologicallyDerivedProduct.Storage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.temperature(parseDecimal("temperature", getJsonNode(jsonNode, "temperature", NumericNode.class), jsonNode.get("_temperature"), -1));
        builder.scale((BiologicallyDerivedProductStorageScale) parseString(BiologicallyDerivedProductStorageScale.builder(), "scale", getJsonNode(jsonNode, "scale", TextNode.class), jsonNode.get("_scale"), -1));
        builder.duration(parsePeriod("duration", getJsonNode(jsonNode, "duration", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private BodyStructure parseBodyStructure(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(BodyStructure.class, jsonNode);
        }
        BodyStructure.Builder builder = BodyStructure.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        builder.morphology(parseCodeableConcept("morphology", getJsonNode(jsonNode, "morphology", JsonNode.class), -1));
        builder.location(parseCodeableConcept("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        ArrayNode locationQualifierArray = getArrayNode(jsonNode, "locationQualifier");
        if (locationQualifierArray != null) {
            for (int i = 0; i < locationQualifierArray.size(); i++) {
                if (locationQualifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + locationQualifierArray.get(i).getNodeType() + " for element: locationQualifier");
                }
                builder.locationQualifier(parseCodeableConcept("locationQualifier", locationQualifierArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode imageArray = getArrayNode(jsonNode, "image");
        if (imageArray != null) {
            for (int i = 0; i < imageArray.size(); i++) {
                if (imageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + imageArray.get(i).getNodeType() + " for element: image");
                }
                builder.image(parseAttachment("image", imageArray.get(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Boolean parseBoolean(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Boolean.Builder builder = Boolean.builder();
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (BooleanNode.TRUE.equals(jsonValue) || BooleanNode.FALSE.equals(jsonValue)) {
            builder.value(BooleanNode.TRUE.equals(jsonValue) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE);
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: TRUE or FALSE but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Bundle parseBundle(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Bundle.class, jsonNode);
        }
        Bundle.Builder builder = Bundle.builder();
        builder.setValidating(validating);
        parseResource(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.type((BundleType) parseString(BundleType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.timestamp(parseInstant("timestamp", getJsonNode(jsonNode, "timestamp", TextNode.class), jsonNode.get("_timestamp"), -1));
        builder.total((UnsignedInt) parseInteger(UnsignedInt.builder(), "total", getJsonNode(jsonNode, "total", NumericNode.class), jsonNode.get("_total"), -1));
        ArrayNode linkArray = getArrayNode(jsonNode, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                if (linkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + linkArray.get(i).getNodeType() + " for element: link");
                }
                builder.link(parseBundleLink("link", linkArray.get(i), i));
            }
        }
        ArrayNode entryArray = getArrayNode(jsonNode, "entry");
        if (entryArray != null) {
            for (int i = 0; i < entryArray.size(); i++) {
                if (entryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entryArray.get(i).getNodeType() + " for element: entry");
                }
                builder.entry(parseBundleEntry("entry", entryArray.get(i), i));
            }
        }
        builder.signature(parseSignature("signature", getJsonNode(jsonNode, "signature", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Entry parseBundleEntry(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Bundle.Entry.class, jsonNode);
        }
        Bundle.Entry.Builder builder = Bundle.Entry.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode linkArray = getArrayNode(jsonNode, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                if (linkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + linkArray.get(i).getNodeType() + " for element: link");
                }
                builder.link(parseBundleLink("link", linkArray.get(i), i));
            }
        }
        builder.fullUrl(parseUri("fullUrl", getJsonNode(jsonNode, "fullUrl", TextNode.class), jsonNode.get("_fullUrl"), -1));
        builder.resource(parseResource("resource", getJsonNode(jsonNode, "resource", JsonNode.class), -1));
        builder.search(parseBundleEntrySearch("search", getJsonNode(jsonNode, "search", JsonNode.class), -1));
        builder.request(parseBundleEntryRequest("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        builder.response(parseBundleEntryResponse("response", getJsonNode(jsonNode, "response", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Entry.Request parseBundleEntryRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Bundle.Entry.Request.class, jsonNode);
        }
        Bundle.Entry.Request.Builder builder = Bundle.Entry.Request.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.method((HTTPVerb) parseString(HTTPVerb.builder(), "method", getJsonNode(jsonNode, "method", TextNode.class), jsonNode.get("_method"), -1));
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.ifNoneMatch(parseString("ifNoneMatch", getJsonNode(jsonNode, "ifNoneMatch", TextNode.class), jsonNode.get("_ifNoneMatch"), -1));
        builder.ifModifiedSince(parseInstant("ifModifiedSince", getJsonNode(jsonNode, "ifModifiedSince", TextNode.class), jsonNode.get("_ifModifiedSince"), -1));
        builder.ifMatch(parseString("ifMatch", getJsonNode(jsonNode, "ifMatch", TextNode.class), jsonNode.get("_ifMatch"), -1));
        builder.ifNoneExist(parseString("ifNoneExist", getJsonNode(jsonNode, "ifNoneExist", TextNode.class), jsonNode.get("_ifNoneExist"), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Entry.Response parseBundleEntryResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Bundle.Entry.Response.class, jsonNode);
        }
        Bundle.Entry.Response.Builder builder = Bundle.Entry.Response.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.status(parseString("status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.location(parseUri("location", getJsonNode(jsonNode, "location", TextNode.class), jsonNode.get("_location"), -1));
        builder.etag(parseString("etag", getJsonNode(jsonNode, "etag", TextNode.class), jsonNode.get("_etag"), -1));
        builder.lastModified(parseInstant("lastModified", getJsonNode(jsonNode, "lastModified", TextNode.class), jsonNode.get("_lastModified"), -1));
        builder.outcome(parseResource("outcome", getJsonNode(jsonNode, "outcome", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Entry.Search parseBundleEntrySearch(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Bundle.Entry.Search.class, jsonNode);
        }
        Bundle.Entry.Search.Builder builder = Bundle.Entry.Search.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.mode((SearchEntryMode) parseString(SearchEntryMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.score(parseDecimal("score", getJsonNode(jsonNode, "score", NumericNode.class), jsonNode.get("_score"), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Link parseBundleLink(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Bundle.Link.class, jsonNode);
        }
        Bundle.Link.Builder builder = Bundle.Link.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.relation(parseString("relation", getJsonNode(jsonNode, "relation", TextNode.class), jsonNode.get("_relation"), -1));
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement parseCapabilityStatement(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.class, jsonNode);
        }
        CapabilityStatement.Builder builder = CapabilityStatement.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.kind((CapabilityStatementKind) parseString(CapabilityStatementKind.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        ArrayNode instantiatesArray = getArrayNode(jsonNode, "instantiates", true);
        if (instantiatesArray != null) {
            ArrayNode _instantiatesArray = getArrayNode(jsonNode, "_instantiates");
            for (int i = 0; i < instantiatesArray.size(); i++) {
                builder.instantiates((Canonical) parseUri(Canonical.builder(), "instantiates", instantiatesArray.get(i), getJsonNode(_instantiatesArray, i), i));
            }
        }
        ArrayNode importsArray = getArrayNode(jsonNode, "imports", true);
        if (importsArray != null) {
            ArrayNode _importsArray = getArrayNode(jsonNode, "_imports");
            for (int i = 0; i < importsArray.size(); i++) {
                builder.imports((Canonical) parseUri(Canonical.builder(), "imports", importsArray.get(i), getJsonNode(_importsArray, i), i));
            }
        }
        builder.software(parseCapabilityStatementSoftware("software", getJsonNode(jsonNode, "software", JsonNode.class), -1));
        builder.implementation(parseCapabilityStatementImplementation("implementation", getJsonNode(jsonNode, "implementation", JsonNode.class), -1));
        builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", getJsonNode(jsonNode, "fhirVersion", TextNode.class), jsonNode.get("_fhirVersion"), -1));
        ArrayNode formatArray = getArrayNode(jsonNode, "format", true);
        if (formatArray != null) {
            ArrayNode _formatArray = getArrayNode(jsonNode, "_format");
            for (int i = 0; i < formatArray.size(); i++) {
                builder.format((Code) parseString(Code.builder(), "format", formatArray.get(i), getJsonNode(_formatArray, i), i));
            }
        }
        ArrayNode patchFormatArray = getArrayNode(jsonNode, "patchFormat", true);
        if (patchFormatArray != null) {
            ArrayNode _patchFormatArray = getArrayNode(jsonNode, "_patchFormat");
            for (int i = 0; i < patchFormatArray.size(); i++) {
                builder.patchFormat((Code) parseString(Code.builder(), "patchFormat", patchFormatArray.get(i), getJsonNode(_patchFormatArray, i), i));
            }
        }
        ArrayNode implementationGuideArray = getArrayNode(jsonNode, "implementationGuide", true);
        if (implementationGuideArray != null) {
            ArrayNode _implementationGuideArray = getArrayNode(jsonNode, "_implementationGuide");
            for (int i = 0; i < implementationGuideArray.size(); i++) {
                builder.implementationGuide((Canonical) parseUri(Canonical.builder(), "implementationGuide", implementationGuideArray.get(i), getJsonNode(_implementationGuideArray, i), i));
            }
        }
        ArrayNode restArray = getArrayNode(jsonNode, "rest");
        if (restArray != null) {
            for (int i = 0; i < restArray.size(); i++) {
                if (restArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + restArray.get(i).getNodeType() + " for element: rest");
                }
                builder.rest(parseCapabilityStatementRest("rest", restArray.get(i), i));
            }
        }
        ArrayNode messagingArray = getArrayNode(jsonNode, "messaging");
        if (messagingArray != null) {
            for (int i = 0; i < messagingArray.size(); i++) {
                if (messagingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + messagingArray.get(i).getNodeType() + " for element: messaging");
                }
                builder.messaging(parseCapabilityStatementMessaging("messaging", messagingArray.get(i), i));
            }
        }
        ArrayNode documentArray = getArrayNode(jsonNode, "document");
        if (documentArray != null) {
            for (int i = 0; i < documentArray.size(); i++) {
                if (documentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + documentArray.get(i).getNodeType() + " for element: document");
                }
                builder.document(parseCapabilityStatementDocument("document", documentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Document parseCapabilityStatementDocument(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Document.class, jsonNode);
        }
        CapabilityStatement.Document.Builder builder = CapabilityStatement.Document.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.mode((DocumentMode) parseString(DocumentMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonNode(jsonNode, "profile", TextNode.class), jsonNode.get("_profile"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Implementation parseCapabilityStatementImplementation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Implementation.class, jsonNode);
        }
        CapabilityStatement.Implementation.Builder builder = CapabilityStatement.Implementation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.custodian(parseReference("custodian", getJsonNode(jsonNode, "custodian", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Messaging parseCapabilityStatementMessaging(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Messaging.class, jsonNode);
        }
        CapabilityStatement.Messaging.Builder builder = CapabilityStatement.Messaging.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseCapabilityStatementMessagingEndpoint("endpoint", endpointArray.get(i), i));
            }
        }
        builder.reliableCache((UnsignedInt) parseInteger(UnsignedInt.builder(), "reliableCache", getJsonNode(jsonNode, "reliableCache", NumericNode.class), jsonNode.get("_reliableCache"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        ArrayNode supportedMessageArray = getArrayNode(jsonNode, "supportedMessage");
        if (supportedMessageArray != null) {
            for (int i = 0; i < supportedMessageArray.size(); i++) {
                if (supportedMessageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportedMessageArray.get(i).getNodeType() + " for element: supportedMessage");
                }
                builder.supportedMessage(parseCapabilityStatementMessagingSupportedMessage("supportedMessage", supportedMessageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Messaging.Endpoint parseCapabilityStatementMessagingEndpoint(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Messaging.Endpoint.class, jsonNode);
        }
        CapabilityStatement.Messaging.Endpoint.Builder builder = CapabilityStatement.Messaging.Endpoint.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.protocol(parseCoding("protocol", getJsonNode(jsonNode, "protocol", JsonNode.class), -1));
        builder.address((Url) parseUri(Url.builder(), "address", getJsonNode(jsonNode, "address", TextNode.class), jsonNode.get("_address"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Messaging.SupportedMessage parseCapabilityStatementMessagingSupportedMessage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Messaging.SupportedMessage.class, jsonNode);
        }
        CapabilityStatement.Messaging.SupportedMessage.Builder builder = CapabilityStatement.Messaging.SupportedMessage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.mode((EventCapabilityMode) parseString(EventCapabilityMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest parseCapabilityStatementRest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.class, jsonNode);
        }
        CapabilityStatement.Rest.Builder builder = CapabilityStatement.Rest.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.mode((RestfulCapabilityMode) parseString(RestfulCapabilityMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        builder.security(parseCapabilityStatementRestSecurity("security", getJsonNode(jsonNode, "security", JsonNode.class), -1));
        ArrayNode resourceArray = getArrayNode(jsonNode, "resource");
        if (resourceArray != null) {
            for (int i = 0; i < resourceArray.size(); i++) {
                if (resourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + resourceArray.get(i).getNodeType() + " for element: resource");
                }
                builder.resource(parseCapabilityStatementRestResource("resource", resourceArray.get(i), i));
            }
        }
        ArrayNode interactionArray = getArrayNode(jsonNode, "interaction");
        if (interactionArray != null) {
            for (int i = 0; i < interactionArray.size(); i++) {
                if (interactionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + interactionArray.get(i).getNodeType() + " for element: interaction");
                }
                builder.interaction(parseCapabilityStatementRestInteraction("interaction", interactionArray.get(i), i));
            }
        }
        ArrayNode searchParamArray = getArrayNode(jsonNode, "searchParam");
        if (searchParamArray != null) {
            for (int i = 0; i < searchParamArray.size(); i++) {
                if (searchParamArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + searchParamArray.get(i).getNodeType() + " for element: searchParam");
                }
                builder.searchParam(parseCapabilityStatementRestResourceSearchParam("searchParam", searchParamArray.get(i), i));
            }
        }
        ArrayNode operationArray = getArrayNode(jsonNode, "operation");
        if (operationArray != null) {
            for (int i = 0; i < operationArray.size(); i++) {
                if (operationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + operationArray.get(i).getNodeType() + " for element: operation");
                }
                builder.operation(parseCapabilityStatementRestResourceOperation("operation", operationArray.get(i), i));
            }
        }
        ArrayNode compartmentArray = getArrayNode(jsonNode, "compartment", true);
        if (compartmentArray != null) {
            ArrayNode _compartmentArray = getArrayNode(jsonNode, "_compartment");
            for (int i = 0; i < compartmentArray.size(); i++) {
                builder.compartment((Canonical) parseUri(Canonical.builder(), "compartment", compartmentArray.get(i), getJsonNode(_compartmentArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Interaction parseCapabilityStatementRestInteraction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Interaction.class, jsonNode);
        }
        CapabilityStatement.Rest.Interaction.Builder builder = CapabilityStatement.Rest.Interaction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((SystemRestfulInteraction) parseString(SystemRestfulInteraction.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Resource parseCapabilityStatementRestResource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Resource.class, jsonNode);
        }
        CapabilityStatement.Rest.Resource.Builder builder = CapabilityStatement.Rest.Resource.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonNode(jsonNode, "profile", TextNode.class), jsonNode.get("_profile"), -1));
        ArrayNode supportedProfileArray = getArrayNode(jsonNode, "supportedProfile", true);
        if (supportedProfileArray != null) {
            ArrayNode _supportedProfileArray = getArrayNode(jsonNode, "_supportedProfile");
            for (int i = 0; i < supportedProfileArray.size(); i++) {
                builder.supportedProfile((Canonical) parseUri(Canonical.builder(), "supportedProfile", supportedProfileArray.get(i), getJsonNode(_supportedProfileArray, i), i));
            }
        }
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        ArrayNode interactionArray = getArrayNode(jsonNode, "interaction");
        if (interactionArray != null) {
            for (int i = 0; i < interactionArray.size(); i++) {
                if (interactionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + interactionArray.get(i).getNodeType() + " for element: interaction");
                }
                builder.interaction(parseCapabilityStatementRestResourceInteraction("interaction", interactionArray.get(i), i));
            }
        }
        builder.versioning((ResourceVersionPolicy) parseString(ResourceVersionPolicy.builder(), "versioning", getJsonNode(jsonNode, "versioning", TextNode.class), jsonNode.get("_versioning"), -1));
        builder.readHistory(parseBoolean("readHistory", getJsonNode(jsonNode, "readHistory", JsonNode.class), jsonNode.get("_readHistory"), -1));
        builder.updateCreate(parseBoolean("updateCreate", getJsonNode(jsonNode, "updateCreate", JsonNode.class), jsonNode.get("_updateCreate"), -1));
        builder.conditionalCreate(parseBoolean("conditionalCreate", getJsonNode(jsonNode, "conditionalCreate", JsonNode.class), jsonNode.get("_conditionalCreate"), -1));
        builder.conditionalRead((ConditionalReadStatus) parseString(ConditionalReadStatus.builder(), "conditionalRead", getJsonNode(jsonNode, "conditionalRead", TextNode.class), jsonNode.get("_conditionalRead"), -1));
        builder.conditionalUpdate(parseBoolean("conditionalUpdate", getJsonNode(jsonNode, "conditionalUpdate", JsonNode.class), jsonNode.get("_conditionalUpdate"), -1));
        builder.conditionalDelete((ConditionalDeleteStatus) parseString(ConditionalDeleteStatus.builder(), "conditionalDelete", getJsonNode(jsonNode, "conditionalDelete", TextNode.class), jsonNode.get("_conditionalDelete"), -1));
        ArrayNode referencePolicyArray = getArrayNode(jsonNode, "referencePolicy", true);
        if (referencePolicyArray != null) {
            ArrayNode _referencePolicyArray = getArrayNode(jsonNode, "_referencePolicy");
            for (int i = 0; i < referencePolicyArray.size(); i++) {
                builder.referencePolicy((ReferenceHandlingPolicy) parseString(ReferenceHandlingPolicy.builder(), "referencePolicy", referencePolicyArray.get(i), getJsonNode(_referencePolicyArray, i), i));
            }
        }
        ArrayNode searchIncludeArray = getArrayNode(jsonNode, "searchInclude", true);
        if (searchIncludeArray != null) {
            ArrayNode _searchIncludeArray = getArrayNode(jsonNode, "_searchInclude");
            for (int i = 0; i < searchIncludeArray.size(); i++) {
                builder.searchInclude(parseString("searchInclude", searchIncludeArray.get(i), getJsonNode(_searchIncludeArray, i), i));
            }
        }
        ArrayNode searchRevIncludeArray = getArrayNode(jsonNode, "searchRevInclude", true);
        if (searchRevIncludeArray != null) {
            ArrayNode _searchRevIncludeArray = getArrayNode(jsonNode, "_searchRevInclude");
            for (int i = 0; i < searchRevIncludeArray.size(); i++) {
                builder.searchRevInclude(parseString("searchRevInclude", searchRevIncludeArray.get(i), getJsonNode(_searchRevIncludeArray, i), i));
            }
        }
        ArrayNode searchParamArray = getArrayNode(jsonNode, "searchParam");
        if (searchParamArray != null) {
            for (int i = 0; i < searchParamArray.size(); i++) {
                if (searchParamArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + searchParamArray.get(i).getNodeType() + " for element: searchParam");
                }
                builder.searchParam(parseCapabilityStatementRestResourceSearchParam("searchParam", searchParamArray.get(i), i));
            }
        }
        ArrayNode operationArray = getArrayNode(jsonNode, "operation");
        if (operationArray != null) {
            for (int i = 0; i < operationArray.size(); i++) {
                if (operationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + operationArray.get(i).getNodeType() + " for element: operation");
                }
                builder.operation(parseCapabilityStatementRestResourceOperation("operation", operationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Resource.Interaction parseCapabilityStatementRestResourceInteraction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Resource.Interaction.class, jsonNode);
        }
        CapabilityStatement.Rest.Resource.Interaction.Builder builder = CapabilityStatement.Rest.Resource.Interaction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((TypeRestfulInteraction) parseString(TypeRestfulInteraction.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Resource.Operation parseCapabilityStatementRestResourceOperation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Resource.Operation.class, jsonNode);
        }
        CapabilityStatement.Rest.Resource.Operation.Builder builder = CapabilityStatement.Rest.Resource.Operation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Resource.SearchParam parseCapabilityStatementRestResourceSearchParam(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Resource.SearchParam.class, jsonNode);
        }
        CapabilityStatement.Rest.Resource.SearchParam.Builder builder = CapabilityStatement.Rest.Resource.SearchParam.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        builder.type((SearchParamType) parseString(SearchParamType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Security parseCapabilityStatementRestSecurity(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Security.class, jsonNode);
        }
        CapabilityStatement.Rest.Security.Builder builder = CapabilityStatement.Rest.Security.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.cors(parseBoolean("cors", getJsonNode(jsonNode, "cors", JsonNode.class), jsonNode.get("_cors"), -1));
        ArrayNode serviceArray = getArrayNode(jsonNode, "service");
        if (serviceArray != null) {
            for (int i = 0; i < serviceArray.size(); i++) {
                if (serviceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceArray.get(i).getNodeType() + " for element: service");
                }
                builder.service(parseCodeableConcept("service", serviceArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Software parseCapabilityStatementSoftware(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CapabilityStatement.Software.class, jsonNode);
        }
        CapabilityStatement.Software.Builder builder = CapabilityStatement.Software.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.releaseDate(parseDateTime("releaseDate", getJsonNode(jsonNode, "releaseDate", TextNode.class), jsonNode.get("_releaseDate"), -1));
        stackPop();
        return builder.build();
    }

    private CarePlan parseCarePlan(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CarePlan.class, jsonNode);
        }
        CarePlan.Builder builder = CarePlan.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode replacesArray = getArrayNode(jsonNode, "replaces");
        if (replacesArray != null) {
            for (int i = 0; i < replacesArray.size(); i++) {
                if (replacesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + replacesArray.get(i).getNodeType() + " for element: replaces");
                }
                builder.replaces(parseReference("replaces", replacesArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((CarePlanStatus) parseString(CarePlanStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.intent((CarePlanIntent) parseString(CarePlanIntent.builder(), "intent", getJsonNode(jsonNode, "intent", TextNode.class), jsonNode.get("_intent"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        ArrayNode contributorArray = getArrayNode(jsonNode, "contributor");
        if (contributorArray != null) {
            for (int i = 0; i < contributorArray.size(); i++) {
                if (contributorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contributorArray.get(i).getNodeType() + " for element: contributor");
                }
                builder.contributor(parseReference("contributor", contributorArray.get(i), i));
            }
        }
        ArrayNode careTeamArray = getArrayNode(jsonNode, "careTeam");
        if (careTeamArray != null) {
            for (int i = 0; i < careTeamArray.size(); i++) {
                if (careTeamArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + careTeamArray.get(i).getNodeType() + " for element: careTeam");
                }
                builder.careTeam(parseReference("careTeam", careTeamArray.get(i), i));
            }
        }
        ArrayNode addressesArray = getArrayNode(jsonNode, "addresses");
        if (addressesArray != null) {
            for (int i = 0; i < addressesArray.size(); i++) {
                if (addressesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressesArray.get(i).getNodeType() + " for element: addresses");
                }
                builder.addresses(parseReference("addresses", addressesArray.get(i), i));
            }
        }
        ArrayNode supportingInfoArray = getArrayNode(jsonNode, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                if (supportingInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInfoArray.get(i).getNodeType() + " for element: supportingInfo");
                }
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.get(i), i));
            }
        }
        ArrayNode goalArray = getArrayNode(jsonNode, "goal");
        if (goalArray != null) {
            for (int i = 0; i < goalArray.size(); i++) {
                if (goalArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + goalArray.get(i).getNodeType() + " for element: goal");
                }
                builder.goal(parseReference("goal", goalArray.get(i), i));
            }
        }
        ArrayNode activityArray = getArrayNode(jsonNode, "activity");
        if (activityArray != null) {
            for (int i = 0; i < activityArray.size(); i++) {
                if (activityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + activityArray.get(i).getNodeType() + " for element: activity");
                }
                builder.activity(parseCarePlanActivity("activity", activityArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CarePlan.Activity parseCarePlanActivity(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CarePlan.Activity.class, jsonNode);
        }
        CarePlan.Activity.Builder builder = CarePlan.Activity.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode outcomeCodeableConceptArray = getArrayNode(jsonNode, "outcomeCodeableConcept");
        if (outcomeCodeableConceptArray != null) {
            for (int i = 0; i < outcomeCodeableConceptArray.size(); i++) {
                if (outcomeCodeableConceptArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + outcomeCodeableConceptArray.get(i).getNodeType() + " for element: outcomeCodeableConcept");
                }
                builder.outcomeCodeableConcept(parseCodeableConcept("outcomeCodeableConcept", outcomeCodeableConceptArray.get(i), i));
            }
        }
        ArrayNode outcomeReferenceArray = getArrayNode(jsonNode, "outcomeReference");
        if (outcomeReferenceArray != null) {
            for (int i = 0; i < outcomeReferenceArray.size(); i++) {
                if (outcomeReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + outcomeReferenceArray.get(i).getNodeType() + " for element: outcomeReference");
                }
                builder.outcomeReference(parseReference("outcomeReference", outcomeReferenceArray.get(i), i));
            }
        }
        ArrayNode progressArray = getArrayNode(jsonNode, "progress");
        if (progressArray != null) {
            for (int i = 0; i < progressArray.size(); i++) {
                if (progressArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + progressArray.get(i).getNodeType() + " for element: progress");
                }
                builder.progress(parseAnnotation("progress", progressArray.get(i), i));
            }
        }
        builder.reference(parseReference("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        builder.detail(parseCarePlanActivityDetail("detail", getJsonNode(jsonNode, "detail", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private CarePlan.Activity.Detail parseCarePlanActivityDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CarePlan.Activity.Detail.class, jsonNode);
        }
        CarePlan.Activity.Detail.Builder builder = CarePlan.Activity.Detail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.kind((CarePlanActivityKind) parseString(CarePlanActivityKind.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode goalArray = getArrayNode(jsonNode, "goal");
        if (goalArray != null) {
            for (int i = 0; i < goalArray.size(); i++) {
                if (goalArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + goalArray.get(i).getNodeType() + " for element: goal");
                }
                builder.goal(parseReference("goal", goalArray.get(i), i));
            }
        }
        builder.status((CarePlanActivityStatus) parseString(CarePlanActivityStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonNode(jsonNode, "statusReason", JsonNode.class), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonNode(jsonNode, "doNotPerform", JsonNode.class), jsonNode.get("_doNotPerform"), -1));
        builder.scheduled(parseChoiceElement("scheduled", jsonNode, Timing.class, Period.class, String.class));
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseReference("performer", performerArray.get(i), i));
            }
        }
        builder.product(parseChoiceElement("product", jsonNode, CodeableConcept.class, Reference.class));
        builder.dailyAmount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "dailyAmount", getJsonNode(jsonNode, "dailyAmount", JsonNode.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private CareTeam parseCareTeam(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CareTeam.class, jsonNode);
        }
        CareTeam.Builder builder = CareTeam.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((CareTeamStatus) parseString(CareTeamStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode participantArray = getArrayNode(jsonNode, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                if (participantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantArray.get(i).getNodeType() + " for element: participant");
                }
                builder.participant(parseCareTeamParticipant("participant", participantArray.get(i), i));
            }
        }
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode managingOrganizationArray = getArrayNode(jsonNode, "managingOrganization");
        if (managingOrganizationArray != null) {
            for (int i = 0; i < managingOrganizationArray.size(); i++) {
                if (managingOrganizationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + managingOrganizationArray.get(i).getNodeType() + " for element: managingOrganization");
                }
                builder.managingOrganization(parseReference("managingOrganization", managingOrganizationArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CareTeam.Participant parseCareTeamParticipant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CareTeam.Participant.class, jsonNode);
        }
        CareTeam.Participant.Builder builder = CareTeam.Participant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode roleArray = getArrayNode(jsonNode, "role");
        if (roleArray != null) {
            for (int i = 0; i < roleArray.size(); i++) {
                if (roleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + roleArray.get(i).getNodeType() + " for element: role");
                }
                builder.role(parseCodeableConcept("role", roleArray.get(i), i));
            }
        }
        builder.member(parseReference("member", getJsonNode(jsonNode, "member", JsonNode.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonNode(jsonNode, "onBehalfOf", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private CatalogEntry parseCatalogEntry(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CatalogEntry.class, jsonNode);
        }
        CatalogEntry.Builder builder = CatalogEntry.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.orderable(parseBoolean("orderable", getJsonNode(jsonNode, "orderable", JsonNode.class), jsonNode.get("_orderable"), -1));
        builder.referencedItem(parseReference("referencedItem", getJsonNode(jsonNode, "referencedItem", JsonNode.class), -1));
        ArrayNode additionalIdentifierArray = getArrayNode(jsonNode, "additionalIdentifier");
        if (additionalIdentifierArray != null) {
            for (int i = 0; i < additionalIdentifierArray.size(); i++) {
                if (additionalIdentifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + additionalIdentifierArray.get(i).getNodeType() + " for element: additionalIdentifier");
                }
                builder.additionalIdentifier(parseIdentifier("additionalIdentifier", additionalIdentifierArray.get(i), i));
            }
        }
        ArrayNode classificationArray = getArrayNode(jsonNode, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                if (classificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classificationArray.get(i).getNodeType() + " for element: classification");
                }
                builder.classification(parseCodeableConcept("classification", classificationArray.get(i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", getJsonNode(jsonNode, "validityPeriod", JsonNode.class), -1));
        builder.validTo(parseDateTime("validTo", getJsonNode(jsonNode, "validTo", TextNode.class), jsonNode.get("_validTo"), -1));
        builder.lastUpdated(parseDateTime("lastUpdated", getJsonNode(jsonNode, "lastUpdated", TextNode.class), jsonNode.get("_lastUpdated"), -1));
        ArrayNode additionalCharacteristicArray = getArrayNode(jsonNode, "additionalCharacteristic");
        if (additionalCharacteristicArray != null) {
            for (int i = 0; i < additionalCharacteristicArray.size(); i++) {
                if (additionalCharacteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + additionalCharacteristicArray.get(i).getNodeType() + " for element: additionalCharacteristic");
                }
                builder.additionalCharacteristic(parseCodeableConcept("additionalCharacteristic", additionalCharacteristicArray.get(i), i));
            }
        }
        ArrayNode additionalClassificationArray = getArrayNode(jsonNode, "additionalClassification");
        if (additionalClassificationArray != null) {
            for (int i = 0; i < additionalClassificationArray.size(); i++) {
                if (additionalClassificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + additionalClassificationArray.get(i).getNodeType() + " for element: additionalClassification");
                }
                builder.additionalClassification(parseCodeableConcept("additionalClassification", additionalClassificationArray.get(i), i));
            }
        }
        ArrayNode relatedEntryArray = getArrayNode(jsonNode, "relatedEntry");
        if (relatedEntryArray != null) {
            for (int i = 0; i < relatedEntryArray.size(); i++) {
                if (relatedEntryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedEntryArray.get(i).getNodeType() + " for element: relatedEntry");
                }
                builder.relatedEntry(parseCatalogEntryRelatedEntry("relatedEntry", relatedEntryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CatalogEntry.RelatedEntry parseCatalogEntryRelatedEntry(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CatalogEntry.RelatedEntry.class, jsonNode);
        }
        CatalogEntry.RelatedEntry.Builder builder = CatalogEntry.RelatedEntry.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.relationtype((CatalogEntryRelationType) parseString(CatalogEntryRelationType.builder(), "relationtype", getJsonNode(jsonNode, "relationtype", TextNode.class), jsonNode.get("_relationtype"), -1));
        builder.item(parseReference("item", getJsonNode(jsonNode, "item", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ChargeItem parseChargeItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ChargeItem.class, jsonNode);
        }
        ChargeItem.Builder builder = ChargeItem.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode definitionUriArray = getArrayNode(jsonNode, "definitionUri", true);
        if (definitionUriArray != null) {
            ArrayNode _definitionUriArray = getArrayNode(jsonNode, "_definitionUri");
            for (int i = 0; i < definitionUriArray.size(); i++) {
                builder.definitionUri(parseUri("definitionUri", definitionUriArray.get(i), getJsonNode(_definitionUriArray, i), i));
            }
        }
        ArrayNode definitionCanonicalArray = getArrayNode(jsonNode, "definitionCanonical", true);
        if (definitionCanonicalArray != null) {
            ArrayNode _definitionCanonicalArray = getArrayNode(jsonNode, "_definitionCanonical");
            for (int i = 0; i < definitionCanonicalArray.size(); i++) {
                builder.definitionCanonical((Canonical) parseUri(Canonical.builder(), "definitionCanonical", definitionCanonicalArray.get(i), getJsonNode(_definitionCanonicalArray, i), i));
            }
        }
        builder.status((ChargeItemStatus) parseString(ChargeItemStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.context(parseReference("context", getJsonNode(jsonNode, "context", JsonNode.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, Period.class, Timing.class));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseChargeItemPerformer("performer", performerArray.get(i), i));
            }
        }
        builder.performingOrganization(parseReference("performingOrganization", getJsonNode(jsonNode, "performingOrganization", JsonNode.class), -1));
        builder.requestingOrganization(parseReference("requestingOrganization", getJsonNode(jsonNode, "requestingOrganization", JsonNode.class), -1));
        builder.costCenter(parseReference("costCenter", getJsonNode(jsonNode, "costCenter", JsonNode.class), -1));
        builder.quantity(parseQuantity("quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        ArrayNode bodysiteArray = getArrayNode(jsonNode, "bodysite");
        if (bodysiteArray != null) {
            for (int i = 0; i < bodysiteArray.size(); i++) {
                if (bodysiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + bodysiteArray.get(i).getNodeType() + " for element: bodysite");
                }
                builder.bodysite(parseCodeableConcept("bodysite", bodysiteArray.get(i), i));
            }
        }
        builder.factorOverride(parseDecimal("factorOverride", getJsonNode(jsonNode, "factorOverride", NumericNode.class), jsonNode.get("_factorOverride"), -1));
        builder.priceOverride(parseMoney("priceOverride", getJsonNode(jsonNode, "priceOverride", JsonNode.class), -1));
        builder.overrideReason(parseString("overrideReason", getJsonNode(jsonNode, "overrideReason", TextNode.class), jsonNode.get("_overrideReason"), -1));
        builder.enterer(parseReference("enterer", getJsonNode(jsonNode, "enterer", JsonNode.class), -1));
        builder.enteredDate(parseDateTime("enteredDate", getJsonNode(jsonNode, "enteredDate", TextNode.class), jsonNode.get("_enteredDate"), -1));
        ArrayNode reasonArray = getArrayNode(jsonNode, "reason");
        if (reasonArray != null) {
            for (int i = 0; i < reasonArray.size(); i++) {
                if (reasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonArray.get(i).getNodeType() + " for element: reason");
                }
                builder.reason(parseCodeableConcept("reason", reasonArray.get(i), i));
            }
        }
        ArrayNode serviceArray = getArrayNode(jsonNode, "service");
        if (serviceArray != null) {
            for (int i = 0; i < serviceArray.size(); i++) {
                if (serviceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceArray.get(i).getNodeType() + " for element: service");
                }
                builder.service(parseReference("service", serviceArray.get(i), i));
            }
        }
        builder.product(parseChoiceElement("product", jsonNode, Reference.class, CodeableConcept.class));
        ArrayNode accountArray = getArrayNode(jsonNode, "account");
        if (accountArray != null) {
            for (int i = 0; i < accountArray.size(); i++) {
                if (accountArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + accountArray.get(i).getNodeType() + " for element: account");
                }
                builder.account(parseReference("account", accountArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode supportingInformationArray = getArrayNode(jsonNode, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                if (supportingInformationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInformationArray.get(i).getNodeType() + " for element: supportingInformation");
                }
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ChargeItem.Performer parseChargeItemPerformer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ChargeItem.Performer.class, jsonNode);
        }
        ChargeItem.Performer.Builder builder = ChargeItem.Performer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.function(parseCodeableConcept("function", getJsonNode(jsonNode, "function", JsonNode.class), -1));
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ChargeItemDefinition parseChargeItemDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ChargeItemDefinition.class, jsonNode);
        }
        ChargeItemDefinition.Builder builder = ChargeItemDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        ArrayNode derivedFromUriArray = getArrayNode(jsonNode, "derivedFromUri", true);
        if (derivedFromUriArray != null) {
            ArrayNode _derivedFromUriArray = getArrayNode(jsonNode, "_derivedFromUri");
            for (int i = 0; i < derivedFromUriArray.size(); i++) {
                builder.derivedFromUri(parseUri("derivedFromUri", derivedFromUriArray.get(i), getJsonNode(_derivedFromUriArray, i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf", true);
        if (partOfArray != null) {
            ArrayNode _partOfArray = getArrayNode(jsonNode, "_partOf");
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf((Canonical) parseUri(Canonical.builder(), "partOf", partOfArray.get(i), getJsonNode(_partOfArray, i), i));
            }
        }
        ArrayNode replacesArray = getArrayNode(jsonNode, "replaces", true);
        if (replacesArray != null) {
            ArrayNode _replacesArray = getArrayNode(jsonNode, "_replaces");
            for (int i = 0; i < replacesArray.size(); i++) {
                builder.replaces((Canonical) parseUri(Canonical.builder(), "replaces", replacesArray.get(i), getJsonNode(_replacesArray, i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode instanceArray = getArrayNode(jsonNode, "instance");
        if (instanceArray != null) {
            for (int i = 0; i < instanceArray.size(); i++) {
                if (instanceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + instanceArray.get(i).getNodeType() + " for element: instance");
                }
                builder.instance(parseReference("instance", instanceArray.get(i), i));
            }
        }
        ArrayNode applicabilityArray = getArrayNode(jsonNode, "applicability");
        if (applicabilityArray != null) {
            for (int i = 0; i < applicabilityArray.size(); i++) {
                if (applicabilityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + applicabilityArray.get(i).getNodeType() + " for element: applicability");
                }
                builder.applicability(parseChargeItemDefinitionApplicability("applicability", applicabilityArray.get(i), i));
            }
        }
        ArrayNode propertyGroupArray = getArrayNode(jsonNode, "propertyGroup");
        if (propertyGroupArray != null) {
            for (int i = 0; i < propertyGroupArray.size(); i++) {
                if (propertyGroupArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyGroupArray.get(i).getNodeType() + " for element: propertyGroup");
                }
                builder.propertyGroup(parseChargeItemDefinitionPropertyGroup("propertyGroup", propertyGroupArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ChargeItemDefinition.Applicability parseChargeItemDefinitionApplicability(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ChargeItemDefinition.Applicability.class, jsonNode);
        }
        ChargeItemDefinition.Applicability.Builder builder = ChargeItemDefinition.Applicability.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.language(parseString("language", getJsonNode(jsonNode, "language", TextNode.class), jsonNode.get("_language"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        stackPop();
        return builder.build();
    }

    private ChargeItemDefinition.PropertyGroup parseChargeItemDefinitionPropertyGroup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ChargeItemDefinition.PropertyGroup.class, jsonNode);
        }
        ChargeItemDefinition.PropertyGroup.Builder builder = ChargeItemDefinition.PropertyGroup.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode applicabilityArray = getArrayNode(jsonNode, "applicability");
        if (applicabilityArray != null) {
            for (int i = 0; i < applicabilityArray.size(); i++) {
                if (applicabilityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + applicabilityArray.get(i).getNodeType() + " for element: applicability");
                }
                builder.applicability(parseChargeItemDefinitionApplicability("applicability", applicabilityArray.get(i), i));
            }
        }
        ArrayNode priceComponentArray = getArrayNode(jsonNode, "priceComponent");
        if (priceComponentArray != null) {
            for (int i = 0; i < priceComponentArray.size(); i++) {
                if (priceComponentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + priceComponentArray.get(i).getNodeType() + " for element: priceComponent");
                }
                builder.priceComponent(parseChargeItemDefinitionPropertyGroupPriceComponent("priceComponent", priceComponentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ChargeItemDefinition.PropertyGroup.PriceComponent parseChargeItemDefinitionPropertyGroupPriceComponent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ChargeItemDefinition.PropertyGroup.PriceComponent.class, jsonNode);
        }
        ChargeItemDefinition.PropertyGroup.PriceComponent.Builder builder = ChargeItemDefinition.PropertyGroup.PriceComponent.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((ChargeItemDefinitionPriceComponentType) parseString(ChargeItemDefinitionPriceComponentType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Citation parseCitation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.class, jsonNode);
        }
        Citation.Builder builder = Citation.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode summaryArray = getArrayNode(jsonNode, "summary");
        if (summaryArray != null) {
            for (int i = 0; i < summaryArray.size(); i++) {
                if (summaryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + summaryArray.get(i).getNodeType() + " for element: summary");
                }
                builder.summary(parseCitationSummary("summary", summaryArray.get(i), i));
            }
        }
        ArrayNode classificationArray = getArrayNode(jsonNode, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                if (classificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classificationArray.get(i).getNodeType() + " for element: classification");
                }
                builder.classification(parseCitationClassification("classification", classificationArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode currentStateArray = getArrayNode(jsonNode, "currentState");
        if (currentStateArray != null) {
            for (int i = 0; i < currentStateArray.size(); i++) {
                if (currentStateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + currentStateArray.get(i).getNodeType() + " for element: currentState");
                }
                builder.currentState(parseCodeableConcept("currentState", currentStateArray.get(i), i));
            }
        }
        ArrayNode statusDateArray = getArrayNode(jsonNode, "statusDate");
        if (statusDateArray != null) {
            for (int i = 0; i < statusDateArray.size(); i++) {
                if (statusDateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + statusDateArray.get(i).getNodeType() + " for element: statusDate");
                }
                builder.statusDate(parseCitationStatusDate("statusDate", statusDateArray.get(i), i));
            }
        }
        ArrayNode relatesToArray = getArrayNode(jsonNode, "relatesTo");
        if (relatesToArray != null) {
            for (int i = 0; i < relatesToArray.size(); i++) {
                if (relatesToArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatesToArray.get(i).getNodeType() + " for element: relatesTo");
                }
                builder.relatesTo(parseCitationRelatesTo("relatesTo", relatesToArray.get(i), i));
            }
        }
        builder.citedArtifact(parseCitationCitedArtifact("citedArtifact", getJsonNode(jsonNode, "citedArtifact", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact parseCitationCitedArtifact(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.class, jsonNode);
        }
        Citation.CitedArtifact.Builder builder = Citation.CitedArtifact.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode relatedIdentifierArray = getArrayNode(jsonNode, "relatedIdentifier");
        if (relatedIdentifierArray != null) {
            for (int i = 0; i < relatedIdentifierArray.size(); i++) {
                if (relatedIdentifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedIdentifierArray.get(i).getNodeType() + " for element: relatedIdentifier");
                }
                builder.relatedIdentifier(parseIdentifier("relatedIdentifier", relatedIdentifierArray.get(i), i));
            }
        }
        builder.dateAccessed(parseDateTime("dateAccessed", getJsonNode(jsonNode, "dateAccessed", TextNode.class), jsonNode.get("_dateAccessed"), -1));
        builder.version(parseCitationCitedArtifactVersion("version", getJsonNode(jsonNode, "version", JsonNode.class), -1));
        ArrayNode currentStateArray = getArrayNode(jsonNode, "currentState");
        if (currentStateArray != null) {
            for (int i = 0; i < currentStateArray.size(); i++) {
                if (currentStateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + currentStateArray.get(i).getNodeType() + " for element: currentState");
                }
                builder.currentState(parseCodeableConcept("currentState", currentStateArray.get(i), i));
            }
        }
        ArrayNode statusDateArray = getArrayNode(jsonNode, "statusDate");
        if (statusDateArray != null) {
            for (int i = 0; i < statusDateArray.size(); i++) {
                if (statusDateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + statusDateArray.get(i).getNodeType() + " for element: statusDate");
                }
                builder.statusDate(parseCitationCitedArtifactStatusDate("statusDate", statusDateArray.get(i), i));
            }
        }
        ArrayNode titleArray = getArrayNode(jsonNode, "title");
        if (titleArray != null) {
            for (int i = 0; i < titleArray.size(); i++) {
                if (titleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + titleArray.get(i).getNodeType() + " for element: title");
                }
                builder.title(parseCitationCitedArtifactTitle("title", titleArray.get(i), i));
            }
        }
        ArrayNode abstractArray = getArrayNode(jsonNode, "abstract");
        if (abstractArray != null) {
            for (int i = 0; i < abstractArray.size(); i++) {
                if (abstractArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + abstractArray.get(i).getNodeType() + " for element: abstract");
                }
                builder._abstract(parseCitationCitedArtifactAbstract("abstract", abstractArray.get(i), i));
            }
        }
        builder.part(parseCitationCitedArtifactPart("part", getJsonNode(jsonNode, "part", JsonNode.class), -1));
        ArrayNode relatesToArray = getArrayNode(jsonNode, "relatesTo");
        if (relatesToArray != null) {
            for (int i = 0; i < relatesToArray.size(); i++) {
                if (relatesToArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatesToArray.get(i).getNodeType() + " for element: relatesTo");
                }
                builder.relatesTo(parseCitationCitedArtifactRelatesTo("relatesTo", relatesToArray.get(i), i));
            }
        }
        ArrayNode publicationFormArray = getArrayNode(jsonNode, "publicationForm");
        if (publicationFormArray != null) {
            for (int i = 0; i < publicationFormArray.size(); i++) {
                if (publicationFormArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + publicationFormArray.get(i).getNodeType() + " for element: publicationForm");
                }
                builder.publicationForm(parseCitationCitedArtifactPublicationForm("publicationForm", publicationFormArray.get(i), i));
            }
        }
        ArrayNode webLocationArray = getArrayNode(jsonNode, "webLocation");
        if (webLocationArray != null) {
            for (int i = 0; i < webLocationArray.size(); i++) {
                if (webLocationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + webLocationArray.get(i).getNodeType() + " for element: webLocation");
                }
                builder.webLocation(parseCitationCitedArtifactWebLocation("webLocation", webLocationArray.get(i), i));
            }
        }
        ArrayNode classificationArray = getArrayNode(jsonNode, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                if (classificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classificationArray.get(i).getNodeType() + " for element: classification");
                }
                builder.classification(parseCitationCitedArtifactClassification("classification", classificationArray.get(i), i));
            }
        }
        builder.contributorship(parseCitationCitedArtifactContributorship("contributorship", getJsonNode(jsonNode, "contributorship", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Abstract parseCitationCitedArtifactAbstract(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Abstract.class, jsonNode);
        }
        Citation.CitedArtifact.Abstract.Builder builder = Citation.CitedArtifact.Abstract.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.language(parseCodeableConcept("language", getJsonNode(jsonNode, "language", JsonNode.class), -1));
        builder.text((Markdown) parseString(Markdown.builder(), "text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Classification parseCitationCitedArtifactClassification(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Classification.class, jsonNode);
        }
        Citation.CitedArtifact.Classification.Builder builder = Citation.CitedArtifact.Classification.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode classifierArray = getArrayNode(jsonNode, "classifier");
        if (classifierArray != null) {
            for (int i = 0; i < classifierArray.size(); i++) {
                if (classifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classifierArray.get(i).getNodeType() + " for element: classifier");
                }
                builder.classifier(parseCodeableConcept("classifier", classifierArray.get(i), i));
            }
        }
        builder.whoClassified(parseCitationCitedArtifactClassificationWhoClassified("whoClassified", getJsonNode(jsonNode, "whoClassified", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Classification.WhoClassified parseCitationCitedArtifactClassificationWhoClassified(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Classification.WhoClassified.class, jsonNode);
        }
        Citation.CitedArtifact.Classification.WhoClassified.Builder builder = Citation.CitedArtifact.Classification.WhoClassified.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.person(parseReference("person", getJsonNode(jsonNode, "person", JsonNode.class), -1));
        builder.organization(parseReference("organization", getJsonNode(jsonNode, "organization", JsonNode.class), -1));
        builder.publisher(parseReference("publisher", getJsonNode(jsonNode, "publisher", JsonNode.class), -1));
        builder.classifierCopyright(parseString("classifierCopyright", getJsonNode(jsonNode, "classifierCopyright", TextNode.class), jsonNode.get("_classifierCopyright"), -1));
        builder.freeToShare(parseBoolean("freeToShare", getJsonNode(jsonNode, "freeToShare", JsonNode.class), jsonNode.get("_freeToShare"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Contributorship parseCitationCitedArtifactContributorship(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Contributorship.class, jsonNode);
        }
        Citation.CitedArtifact.Contributorship.Builder builder = Citation.CitedArtifact.Contributorship.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.complete(parseBoolean("complete", getJsonNode(jsonNode, "complete", JsonNode.class), jsonNode.get("_complete"), -1));
        ArrayNode entryArray = getArrayNode(jsonNode, "entry");
        if (entryArray != null) {
            for (int i = 0; i < entryArray.size(); i++) {
                if (entryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entryArray.get(i).getNodeType() + " for element: entry");
                }
                builder.entry(parseCitationCitedArtifactContributorshipEntry("entry", entryArray.get(i), i));
            }
        }
        ArrayNode summaryArray = getArrayNode(jsonNode, "summary");
        if (summaryArray != null) {
            for (int i = 0; i < summaryArray.size(); i++) {
                if (summaryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + summaryArray.get(i).getNodeType() + " for element: summary");
                }
                builder.summary(parseCitationCitedArtifactContributorshipSummary("summary", summaryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Contributorship.Entry parseCitationCitedArtifactContributorshipEntry(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Contributorship.Entry.class, jsonNode);
        }
        Citation.CitedArtifact.Contributorship.Entry.Builder builder = Citation.CitedArtifact.Contributorship.Entry.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseHumanName("name", getJsonNode(jsonNode, "name", JsonNode.class), -1));
        builder.initials(parseString("initials", getJsonNode(jsonNode, "initials", TextNode.class), jsonNode.get("_initials"), -1));
        builder.collectiveName(parseString("collectiveName", getJsonNode(jsonNode, "collectiveName", TextNode.class), jsonNode.get("_collectiveName"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode affiliationInfoArray = getArrayNode(jsonNode, "affiliationInfo");
        if (affiliationInfoArray != null) {
            for (int i = 0; i < affiliationInfoArray.size(); i++) {
                if (affiliationInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + affiliationInfoArray.get(i).getNodeType() + " for element: affiliationInfo");
                }
                builder.affiliationInfo(parseCitationCitedArtifactContributorshipEntryAffiliationInfo("affiliationInfo", affiliationInfoArray.get(i), i));
            }
        }
        ArrayNode addressArray = getArrayNode(jsonNode, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                if (addressArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressArray.get(i).getNodeType() + " for element: address");
                }
                builder.address(parseAddress("address", addressArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        ArrayNode contributionTypeArray = getArrayNode(jsonNode, "contributionType");
        if (contributionTypeArray != null) {
            for (int i = 0; i < contributionTypeArray.size(); i++) {
                if (contributionTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contributionTypeArray.get(i).getNodeType() + " for element: contributionType");
                }
                builder.contributionType(parseCodeableConcept("contributionType", contributionTypeArray.get(i), i));
            }
        }
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        ArrayNode contributionInstanceArray = getArrayNode(jsonNode, "contributionInstance");
        if (contributionInstanceArray != null) {
            for (int i = 0; i < contributionInstanceArray.size(); i++) {
                if (contributionInstanceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contributionInstanceArray.get(i).getNodeType() + " for element: contributionInstance");
                }
                builder.contributionInstance(parseCitationCitedArtifactContributorshipEntryContributionInstance("contributionInstance", contributionInstanceArray.get(i), i));
            }
        }
        builder.correspondingContact(parseBoolean("correspondingContact", getJsonNode(jsonNode, "correspondingContact", JsonNode.class), jsonNode.get("_correspondingContact"), -1));
        builder.listOrder((PositiveInt) parseInteger(PositiveInt.builder(), "listOrder", getJsonNode(jsonNode, "listOrder", NumericNode.class), jsonNode.get("_listOrder"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Contributorship.Entry.AffiliationInfo parseCitationCitedArtifactContributorshipEntryAffiliationInfo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Contributorship.Entry.AffiliationInfo.class, jsonNode);
        }
        Citation.CitedArtifact.Contributorship.Entry.AffiliationInfo.Builder builder = Citation.CitedArtifact.Contributorship.Entry.AffiliationInfo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.affiliation(parseString("affiliation", getJsonNode(jsonNode, "affiliation", TextNode.class), jsonNode.get("_affiliation"), -1));
        builder.role(parseString("role", getJsonNode(jsonNode, "role", TextNode.class), jsonNode.get("_role"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Contributorship.Entry.ContributionInstance parseCitationCitedArtifactContributorshipEntryContributionInstance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Contributorship.Entry.ContributionInstance.class, jsonNode);
        }
        Citation.CitedArtifact.Contributorship.Entry.ContributionInstance.Builder builder = Citation.CitedArtifact.Contributorship.Entry.ContributionInstance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.time(parseDateTime("time", getJsonNode(jsonNode, "time", TextNode.class), jsonNode.get("_time"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Contributorship.Summary parseCitationCitedArtifactContributorshipSummary(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Contributorship.Summary.class, jsonNode);
        }
        Citation.CitedArtifact.Contributorship.Summary.Builder builder = Citation.CitedArtifact.Contributorship.Summary.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.style(parseCodeableConcept("style", getJsonNode(jsonNode, "style", JsonNode.class), -1));
        builder.source(parseCodeableConcept("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        builder.value((Markdown) parseString(Markdown.builder(), "value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Part parseCitationCitedArtifactPart(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Part.class, jsonNode);
        }
        Citation.CitedArtifact.Part.Builder builder = Citation.CitedArtifact.Part.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        builder.baseCitation(parseReference("baseCitation", getJsonNode(jsonNode, "baseCitation", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.PublicationForm parseCitationCitedArtifactPublicationForm(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.PublicationForm.class, jsonNode);
        }
        Citation.CitedArtifact.PublicationForm.Builder builder = Citation.CitedArtifact.PublicationForm.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.publishedIn(parseCitationCitedArtifactPublicationFormPublishedIn("publishedIn", getJsonNode(jsonNode, "publishedIn", JsonNode.class), -1));
        builder.periodicRelease(parseCitationCitedArtifactPublicationFormPeriodicRelease("periodicRelease", getJsonNode(jsonNode, "periodicRelease", JsonNode.class), -1));
        builder.articleDate(parseDateTime("articleDate", getJsonNode(jsonNode, "articleDate", TextNode.class), jsonNode.get("_articleDate"), -1));
        builder.lastRevisionDate(parseDateTime("lastRevisionDate", getJsonNode(jsonNode, "lastRevisionDate", TextNode.class), jsonNode.get("_lastRevisionDate"), -1));
        ArrayNode languageArray = getArrayNode(jsonNode, "language");
        if (languageArray != null) {
            for (int i = 0; i < languageArray.size(); i++) {
                if (languageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + languageArray.get(i).getNodeType() + " for element: language");
                }
                builder.language(parseCodeableConcept("language", languageArray.get(i), i));
            }
        }
        builder.accessionNumber(parseString("accessionNumber", getJsonNode(jsonNode, "accessionNumber", TextNode.class), jsonNode.get("_accessionNumber"), -1));
        builder.pageString(parseString("pageString", getJsonNode(jsonNode, "pageString", TextNode.class), jsonNode.get("_pageString"), -1));
        builder.firstPage(parseString("firstPage", getJsonNode(jsonNode, "firstPage", TextNode.class), jsonNode.get("_firstPage"), -1));
        builder.lastPage(parseString("lastPage", getJsonNode(jsonNode, "lastPage", TextNode.class), jsonNode.get("_lastPage"), -1));
        builder.pageCount(parseString("pageCount", getJsonNode(jsonNode, "pageCount", TextNode.class), jsonNode.get("_pageCount"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.PublicationForm.PeriodicRelease parseCitationCitedArtifactPublicationFormPeriodicRelease(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.PublicationForm.PeriodicRelease.class, jsonNode);
        }
        Citation.CitedArtifact.PublicationForm.PeriodicRelease.Builder builder = Citation.CitedArtifact.PublicationForm.PeriodicRelease.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.citedMedium(parseCodeableConcept("citedMedium", getJsonNode(jsonNode, "citedMedium", JsonNode.class), -1));
        builder.volume(parseString("volume", getJsonNode(jsonNode, "volume", TextNode.class), jsonNode.get("_volume"), -1));
        builder.issue(parseString("issue", getJsonNode(jsonNode, "issue", TextNode.class), jsonNode.get("_issue"), -1));
        builder.dateOfPublication(parseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication("dateOfPublication", getJsonNode(jsonNode, "dateOfPublication", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.PublicationForm.PeriodicRelease.DateOfPublication parseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.PublicationForm.PeriodicRelease.DateOfPublication.class, jsonNode);
        }
        Citation.CitedArtifact.PublicationForm.PeriodicRelease.DateOfPublication.Builder builder = Citation.CitedArtifact.PublicationForm.PeriodicRelease.DateOfPublication.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.date(parseDate("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.year(parseString("year", getJsonNode(jsonNode, "year", TextNode.class), jsonNode.get("_year"), -1));
        builder.month(parseString("month", getJsonNode(jsonNode, "month", TextNode.class), jsonNode.get("_month"), -1));
        builder.day(parseString("day", getJsonNode(jsonNode, "day", TextNode.class), jsonNode.get("_day"), -1));
        builder.season(parseString("season", getJsonNode(jsonNode, "season", TextNode.class), jsonNode.get("_season"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.PublicationForm.PublishedIn parseCitationCitedArtifactPublicationFormPublishedIn(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.PublicationForm.PublishedIn.class, jsonNode);
        }
        Citation.CitedArtifact.PublicationForm.PublishedIn.Builder builder = Citation.CitedArtifact.PublicationForm.PublishedIn.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.publisher(parseReference("publisher", getJsonNode(jsonNode, "publisher", JsonNode.class), -1));
        builder.publisherLocation(parseString("publisherLocation", getJsonNode(jsonNode, "publisherLocation", TextNode.class), jsonNode.get("_publisherLocation"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.RelatesTo parseCitationCitedArtifactRelatesTo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.RelatesTo.class, jsonNode);
        }
        Citation.CitedArtifact.RelatesTo.Builder builder = Citation.CitedArtifact.RelatesTo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.relationshipType(parseCodeableConcept("relationshipType", getJsonNode(jsonNode, "relationshipType", JsonNode.class), -1));
        ArrayNode targetClassifierArray = getArrayNode(jsonNode, "targetClassifier");
        if (targetClassifierArray != null) {
            for (int i = 0; i < targetClassifierArray.size(); i++) {
                if (targetClassifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetClassifierArray.get(i).getNodeType() + " for element: targetClassifier");
                }
                builder.targetClassifier(parseCodeableConcept("targetClassifier", targetClassifierArray.get(i), i));
            }
        }
        builder.target(parseChoiceElement("target", jsonNode, Uri.class, Identifier.class, Reference.class, Attachment.class));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.StatusDate parseCitationCitedArtifactStatusDate(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.StatusDate.class, jsonNode);
        }
        Citation.CitedArtifact.StatusDate.Builder builder = Citation.CitedArtifact.StatusDate.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.activity(parseCodeableConcept("activity", getJsonNode(jsonNode, "activity", JsonNode.class), -1));
        builder.actual(parseBoolean("actual", getJsonNode(jsonNode, "actual", JsonNode.class), jsonNode.get("_actual"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Title parseCitationCitedArtifactTitle(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Title.class, jsonNode);
        }
        Citation.CitedArtifact.Title.Builder builder = Citation.CitedArtifact.Title.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.language(parseCodeableConcept("language", getJsonNode(jsonNode, "language", JsonNode.class), -1));
        builder.text((Markdown) parseString(Markdown.builder(), "text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.Version parseCitationCitedArtifactVersion(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.Version.class, jsonNode);
        }
        Citation.CitedArtifact.Version.Builder builder = Citation.CitedArtifact.Version.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        builder.baseCitation(parseReference("baseCitation", getJsonNode(jsonNode, "baseCitation", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Citation.CitedArtifact.WebLocation parseCitationCitedArtifactWebLocation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.CitedArtifact.WebLocation.class, jsonNode);
        }
        Citation.CitedArtifact.WebLocation.Builder builder = Citation.CitedArtifact.WebLocation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private Citation.Classification parseCitationClassification(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.Classification.class, jsonNode);
        }
        Citation.Classification.Builder builder = Citation.Classification.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode classifierArray = getArrayNode(jsonNode, "classifier");
        if (classifierArray != null) {
            for (int i = 0; i < classifierArray.size(); i++) {
                if (classifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classifierArray.get(i).getNodeType() + " for element: classifier");
                }
                builder.classifier(parseCodeableConcept("classifier", classifierArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Citation.RelatesTo parseCitationRelatesTo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.RelatesTo.class, jsonNode);
        }
        Citation.RelatesTo.Builder builder = Citation.RelatesTo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.relationshipType(parseCodeableConcept("relationshipType", getJsonNode(jsonNode, "relationshipType", JsonNode.class), -1));
        ArrayNode targetClassifierArray = getArrayNode(jsonNode, "targetClassifier");
        if (targetClassifierArray != null) {
            for (int i = 0; i < targetClassifierArray.size(); i++) {
                if (targetClassifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetClassifierArray.get(i).getNodeType() + " for element: targetClassifier");
                }
                builder.targetClassifier(parseCodeableConcept("targetClassifier", targetClassifierArray.get(i), i));
            }
        }
        builder.target(parseChoiceElement("target", jsonNode, Uri.class, Identifier.class, Reference.class, Attachment.class));
        stackPop();
        return builder.build();
    }

    private Citation.StatusDate parseCitationStatusDate(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.StatusDate.class, jsonNode);
        }
        Citation.StatusDate.Builder builder = Citation.StatusDate.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.activity(parseCodeableConcept("activity", getJsonNode(jsonNode, "activity", JsonNode.class), -1));
        builder.actual(parseBoolean("actual", getJsonNode(jsonNode, "actual", JsonNode.class), jsonNode.get("_actual"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Citation.Summary parseCitationSummary(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Citation.Summary.class, jsonNode);
        }
        Citation.Summary.Builder builder = Citation.Summary.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.style(parseCodeableConcept("style", getJsonNode(jsonNode, "style", JsonNode.class), -1));
        builder.text((Markdown) parseString(Markdown.builder(), "text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Claim parseClaim(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.class, jsonNode);
        }
        Claim.Builder builder = Claim.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ClaimStatus) parseString(ClaimStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonNode(jsonNode, "subType", JsonNode.class), -1));
        builder.use((Use) parseString(Use.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.billablePeriod(parsePeriod("billablePeriod", getJsonNode(jsonNode, "billablePeriod", JsonNode.class), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.enterer(parseReference("enterer", getJsonNode(jsonNode, "enterer", JsonNode.class), -1));
        builder.insurer(parseReference("insurer", getJsonNode(jsonNode, "insurer", JsonNode.class), -1));
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.priority(parseCodeableConcept("priority", getJsonNode(jsonNode, "priority", JsonNode.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", getJsonNode(jsonNode, "fundsReserve", JsonNode.class), -1));
        ArrayNode relatedArray = getArrayNode(jsonNode, "related");
        if (relatedArray != null) {
            for (int i = 0; i < relatedArray.size(); i++) {
                if (relatedArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArray.get(i).getNodeType() + " for element: related");
                }
                builder.related(parseClaimRelated("related", relatedArray.get(i), i));
            }
        }
        builder.prescription(parseReference("prescription", getJsonNode(jsonNode, "prescription", JsonNode.class), -1));
        builder.originalPrescription(parseReference("originalPrescription", getJsonNode(jsonNode, "originalPrescription", JsonNode.class), -1));
        builder.payee(parseClaimPayee("payee", getJsonNode(jsonNode, "payee", JsonNode.class), -1));
        builder.referral(parseReference("referral", getJsonNode(jsonNode, "referral", JsonNode.class), -1));
        builder.facility(parseReference("facility", getJsonNode(jsonNode, "facility", JsonNode.class), -1));
        ArrayNode careTeamArray = getArrayNode(jsonNode, "careTeam");
        if (careTeamArray != null) {
            for (int i = 0; i < careTeamArray.size(); i++) {
                if (careTeamArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + careTeamArray.get(i).getNodeType() + " for element: careTeam");
                }
                builder.careTeam(parseClaimCareTeam("careTeam", careTeamArray.get(i), i));
            }
        }
        ArrayNode supportingInfoArray = getArrayNode(jsonNode, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                if (supportingInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInfoArray.get(i).getNodeType() + " for element: supportingInfo");
                }
                builder.supportingInfo(parseClaimSupportingInfo("supportingInfo", supportingInfoArray.get(i), i));
            }
        }
        ArrayNode diagnosisArray = getArrayNode(jsonNode, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                if (diagnosisArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + diagnosisArray.get(i).getNodeType() + " for element: diagnosis");
                }
                builder.diagnosis(parseClaimDiagnosis("diagnosis", diagnosisArray.get(i), i));
            }
        }
        ArrayNode procedureArray = getArrayNode(jsonNode, "procedure");
        if (procedureArray != null) {
            for (int i = 0; i < procedureArray.size(); i++) {
                if (procedureArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + procedureArray.get(i).getNodeType() + " for element: procedure");
                }
                builder.procedure(parseClaimProcedure("procedure", procedureArray.get(i), i));
            }
        }
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseClaimInsurance("insurance", insuranceArray.get(i), i));
            }
        }
        builder.accident(parseClaimAccident("accident", getJsonNode(jsonNode, "accident", JsonNode.class), -1));
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseClaimItem("item", itemArray.get(i), i));
            }
        }
        builder.total(parseMoney("total", getJsonNode(jsonNode, "total", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Accident parseClaimAccident(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Accident.class, jsonNode);
        }
        Claim.Accident.Builder builder = Claim.Accident.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.date(parseDate("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.location(parseChoiceElement("location", jsonNode, Address.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Claim.CareTeam parseClaimCareTeam(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.CareTeam.class, jsonNode);
        }
        Claim.CareTeam.Builder builder = Claim.CareTeam.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.responsible(parseBoolean("responsible", getJsonNode(jsonNode, "responsible", JsonNode.class), jsonNode.get("_responsible"), -1));
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        builder.qualification(parseCodeableConcept("qualification", getJsonNode(jsonNode, "qualification", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Diagnosis parseClaimDiagnosis(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Diagnosis.class, jsonNode);
        }
        Claim.Diagnosis.Builder builder = Claim.Diagnosis.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.diagnosis(parseChoiceElement("diagnosis", jsonNode, CodeableConcept.class, Reference.class));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.onAdmission(parseCodeableConcept("onAdmission", getJsonNode(jsonNode, "onAdmission", JsonNode.class), -1));
        builder.packageCode(parseCodeableConcept("packageCode", getJsonNode(jsonNode, "packageCode", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Insurance parseClaimInsurance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Insurance.class, jsonNode);
        }
        Claim.Insurance.Builder builder = Claim.Insurance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.focal(parseBoolean("focal", getJsonNode(jsonNode, "focal", JsonNode.class), jsonNode.get("_focal"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.coverage(parseReference("coverage", getJsonNode(jsonNode, "coverage", JsonNode.class), -1));
        builder.businessArrangement(parseString("businessArrangement", getJsonNode(jsonNode, "businessArrangement", TextNode.class), jsonNode.get("_businessArrangement"), -1));
        ArrayNode preAuthRefArray = getArrayNode(jsonNode, "preAuthRef", true);
        if (preAuthRefArray != null) {
            ArrayNode _preAuthRefArray = getArrayNode(jsonNode, "_preAuthRef");
            for (int i = 0; i < preAuthRefArray.size(); i++) {
                builder.preAuthRef(parseString("preAuthRef", preAuthRefArray.get(i), getJsonNode(_preAuthRefArray, i), i));
            }
        }
        builder.claimResponse(parseReference("claimResponse", getJsonNode(jsonNode, "claimResponse", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Item parseClaimItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Item.class, jsonNode);
        }
        Claim.Item.Builder builder = Claim.Item.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        ArrayNode careTeamSequenceArray = getArrayNode(jsonNode, "careTeamSequence", true);
        if (careTeamSequenceArray != null) {
            ArrayNode _careTeamSequenceArray = getArrayNode(jsonNode, "_careTeamSequence");
            for (int i = 0; i < careTeamSequenceArray.size(); i++) {
                builder.careTeamSequence((PositiveInt) parseInteger(PositiveInt.builder(), "careTeamSequence", careTeamSequenceArray.get(i), getJsonNode(_careTeamSequenceArray, i), i));
            }
        }
        ArrayNode diagnosisSequenceArray = getArrayNode(jsonNode, "diagnosisSequence", true);
        if (diagnosisSequenceArray != null) {
            ArrayNode _diagnosisSequenceArray = getArrayNode(jsonNode, "_diagnosisSequence");
            for (int i = 0; i < diagnosisSequenceArray.size(); i++) {
                builder.diagnosisSequence((PositiveInt) parseInteger(PositiveInt.builder(), "diagnosisSequence", diagnosisSequenceArray.get(i), getJsonNode(_diagnosisSequenceArray, i), i));
            }
        }
        ArrayNode procedureSequenceArray = getArrayNode(jsonNode, "procedureSequence", true);
        if (procedureSequenceArray != null) {
            ArrayNode _procedureSequenceArray = getArrayNode(jsonNode, "_procedureSequence");
            for (int i = 0; i < procedureSequenceArray.size(); i++) {
                builder.procedureSequence((PositiveInt) parseInteger(PositiveInt.builder(), "procedureSequence", procedureSequenceArray.get(i), getJsonNode(_procedureSequenceArray, i), i));
            }
        }
        ArrayNode informationSequenceArray = getArrayNode(jsonNode, "informationSequence", true);
        if (informationSequenceArray != null) {
            ArrayNode _informationSequenceArray = getArrayNode(jsonNode, "_informationSequence");
            for (int i = 0; i < informationSequenceArray.size(); i++) {
                builder.informationSequence((PositiveInt) parseInteger(PositiveInt.builder(), "informationSequence", informationSequenceArray.get(i), getJsonNode(_informationSequenceArray, i), i));
            }
        }
        builder.revenue(parseCodeableConcept("revenue", getJsonNode(jsonNode, "revenue", JsonNode.class), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        ArrayNode programCodeArray = getArrayNode(jsonNode, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                if (programCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programCodeArray.get(i).getNodeType() + " for element: programCode");
                }
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.get(i), i));
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonNode, Date.class, Period.class));
        builder.location(parseChoiceElement("location", jsonNode, CodeableConcept.class, Address.class, Reference.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode udiArray = getArrayNode(jsonNode, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                if (udiArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiArray.get(i).getNodeType() + " for element: udi");
                }
                builder.udi(parseReference("udi", udiArray.get(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        ArrayNode subSiteArray = getArrayNode(jsonNode, "subSite");
        if (subSiteArray != null) {
            for (int i = 0; i < subSiteArray.size(); i++) {
                if (subSiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subSiteArray.get(i).getNodeType() + " for element: subSite");
                }
                builder.subSite(parseCodeableConcept("subSite", subSiteArray.get(i), i));
            }
        }
        ArrayNode encounterArray = getArrayNode(jsonNode, "encounter");
        if (encounterArray != null) {
            for (int i = 0; i < encounterArray.size(); i++) {
                if (encounterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + encounterArray.get(i).getNodeType() + " for element: encounter");
                }
                builder.encounter(parseReference("encounter", encounterArray.get(i), i));
            }
        }
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseClaimItemDetail("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Claim.Item.Detail parseClaimItemDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Item.Detail.class, jsonNode);
        }
        Claim.Item.Detail.Builder builder = Claim.Item.Detail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.revenue(parseCodeableConcept("revenue", getJsonNode(jsonNode, "revenue", JsonNode.class), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        ArrayNode programCodeArray = getArrayNode(jsonNode, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                if (programCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programCodeArray.get(i).getNodeType() + " for element: programCode");
                }
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode udiArray = getArrayNode(jsonNode, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                if (udiArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiArray.get(i).getNodeType() + " for element: udi");
                }
                builder.udi(parseReference("udi", udiArray.get(i), i));
            }
        }
        ArrayNode subDetailArray = getArrayNode(jsonNode, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                if (subDetailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subDetailArray.get(i).getNodeType() + " for element: subDetail");
                }
                builder.subDetail(parseClaimItemDetailSubDetail("subDetail", subDetailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Claim.Item.Detail.SubDetail parseClaimItemDetailSubDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Item.Detail.SubDetail.class, jsonNode);
        }
        Claim.Item.Detail.SubDetail.Builder builder = Claim.Item.Detail.SubDetail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.revenue(parseCodeableConcept("revenue", getJsonNode(jsonNode, "revenue", JsonNode.class), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        ArrayNode programCodeArray = getArrayNode(jsonNode, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                if (programCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programCodeArray.get(i).getNodeType() + " for element: programCode");
                }
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode udiArray = getArrayNode(jsonNode, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                if (udiArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiArray.get(i).getNodeType() + " for element: udi");
                }
                builder.udi(parseReference("udi", udiArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Claim.Payee parseClaimPayee(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Payee.class, jsonNode);
        }
        Claim.Payee.Builder builder = Claim.Payee.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.party(parseReference("party", getJsonNode(jsonNode, "party", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Procedure parseClaimProcedure(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Procedure.class, jsonNode);
        }
        Claim.Procedure.Builder builder = Claim.Procedure.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.procedure(parseChoiceElement("procedure", jsonNode, CodeableConcept.class, Reference.class));
        ArrayNode udiArray = getArrayNode(jsonNode, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                if (udiArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiArray.get(i).getNodeType() + " for element: udi");
                }
                builder.udi(parseReference("udi", udiArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Claim.Related parseClaimRelated(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.Related.class, jsonNode);
        }
        Claim.Related.Builder builder = Claim.Related.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.claim(parseReference("claim", getJsonNode(jsonNode, "claim", JsonNode.class), -1));
        builder.relationship(parseCodeableConcept("relationship", getJsonNode(jsonNode, "relationship", JsonNode.class), -1));
        builder.reference(parseIdentifier("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.SupportingInfo parseClaimSupportingInfo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Claim.SupportingInfo.class, jsonNode);
        }
        Claim.SupportingInfo.Builder builder = Claim.SupportingInfo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.timing(parseChoiceElement("timing", jsonNode, Date.class, Period.class));
        builder.value(parseChoiceElement("value", jsonNode, Boolean.class, String.class, Quantity.class, Attachment.class, Reference.class));
        builder.reason(parseCodeableConcept("reason", getJsonNode(jsonNode, "reason", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse parseClaimResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.class, jsonNode);
        }
        ClaimResponse.Builder builder = ClaimResponse.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ClaimResponseStatus) parseString(ClaimResponseStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonNode(jsonNode, "subType", JsonNode.class), -1));
        builder.use((Use) parseString(Use.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.insurer(parseReference("insurer", getJsonNode(jsonNode, "insurer", JsonNode.class), -1));
        builder.requestor(parseReference("requestor", getJsonNode(jsonNode, "requestor", JsonNode.class), -1));
        builder.request(parseReference("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonNode(jsonNode, "outcome", TextNode.class), jsonNode.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonNode(jsonNode, "disposition", TextNode.class), jsonNode.get("_disposition"), -1));
        builder.preAuthRef(parseString("preAuthRef", getJsonNode(jsonNode, "preAuthRef", TextNode.class), jsonNode.get("_preAuthRef"), -1));
        builder.preAuthPeriod(parsePeriod("preAuthPeriod", getJsonNode(jsonNode, "preAuthPeriod", JsonNode.class), -1));
        builder.payeeType(parseCodeableConcept("payeeType", getJsonNode(jsonNode, "payeeType", JsonNode.class), -1));
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseClaimResponseItem("item", itemArray.get(i), i));
            }
        }
        ArrayNode addItemArray = getArrayNode(jsonNode, "addItem");
        if (addItemArray != null) {
            for (int i = 0; i < addItemArray.size(); i++) {
                if (addItemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addItemArray.get(i).getNodeType() + " for element: addItem");
                }
                builder.addItem(parseClaimResponseAddItem("addItem", addItemArray.get(i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode totalArray = getArrayNode(jsonNode, "total");
        if (totalArray != null) {
            for (int i = 0; i < totalArray.size(); i++) {
                if (totalArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + totalArray.get(i).getNodeType() + " for element: total");
                }
                builder.total(parseClaimResponseTotal("total", totalArray.get(i), i));
            }
        }
        builder.payment(parseClaimResponsePayment("payment", getJsonNode(jsonNode, "payment", JsonNode.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", getJsonNode(jsonNode, "fundsReserve", JsonNode.class), -1));
        builder.formCode(parseCodeableConcept("formCode", getJsonNode(jsonNode, "formCode", JsonNode.class), -1));
        builder.form(parseAttachment("form", getJsonNode(jsonNode, "form", JsonNode.class), -1));
        ArrayNode processNoteArray = getArrayNode(jsonNode, "processNote");
        if (processNoteArray != null) {
            for (int i = 0; i < processNoteArray.size(); i++) {
                if (processNoteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + processNoteArray.get(i).getNodeType() + " for element: processNote");
                }
                builder.processNote(parseClaimResponseProcessNote("processNote", processNoteArray.get(i), i));
            }
        }
        ArrayNode communicationRequestArray = getArrayNode(jsonNode, "communicationRequest");
        if (communicationRequestArray != null) {
            for (int i = 0; i < communicationRequestArray.size(); i++) {
                if (communicationRequestArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + communicationRequestArray.get(i).getNodeType() + " for element: communicationRequest");
                }
                builder.communicationRequest(parseReference("communicationRequest", communicationRequestArray.get(i), i));
            }
        }
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseClaimResponseInsurance("insurance", insuranceArray.get(i), i));
            }
        }
        ArrayNode errorArray = getArrayNode(jsonNode, "error");
        if (errorArray != null) {
            for (int i = 0; i < errorArray.size(); i++) {
                if (errorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + errorArray.get(i).getNodeType() + " for element: error");
                }
                builder.error(parseClaimResponseError("error", errorArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.AddItem parseClaimResponseAddItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.AddItem.class, jsonNode);
        }
        ClaimResponse.AddItem.Builder builder = ClaimResponse.AddItem.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode itemSequenceArray = getArrayNode(jsonNode, "itemSequence", true);
        if (itemSequenceArray != null) {
            ArrayNode _itemSequenceArray = getArrayNode(jsonNode, "_itemSequence");
            for (int i = 0; i < itemSequenceArray.size(); i++) {
                builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", itemSequenceArray.get(i), getJsonNode(_itemSequenceArray, i), i));
            }
        }
        ArrayNode detailSequenceArray = getArrayNode(jsonNode, "detailSequence", true);
        if (detailSequenceArray != null) {
            ArrayNode _detailSequenceArray = getArrayNode(jsonNode, "_detailSequence");
            for (int i = 0; i < detailSequenceArray.size(); i++) {
                builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", detailSequenceArray.get(i), getJsonNode(_detailSequenceArray, i), i));
            }
        }
        ArrayNode subdetailSequenceArray = getArrayNode(jsonNode, "subdetailSequence", true);
        if (subdetailSequenceArray != null) {
            ArrayNode _subdetailSequenceArray = getArrayNode(jsonNode, "_subdetailSequence");
            for (int i = 0; i < subdetailSequenceArray.size(); i++) {
                builder.subdetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subdetailSequence", subdetailSequenceArray.get(i), getJsonNode(_subdetailSequenceArray, i), i));
            }
        }
        ArrayNode providerArray = getArrayNode(jsonNode, "provider");
        if (providerArray != null) {
            for (int i = 0; i < providerArray.size(); i++) {
                if (providerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + providerArray.get(i).getNodeType() + " for element: provider");
                }
                builder.provider(parseReference("provider", providerArray.get(i), i));
            }
        }
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        ArrayNode programCodeArray = getArrayNode(jsonNode, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                if (programCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programCodeArray.get(i).getNodeType() + " for element: programCode");
                }
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.get(i), i));
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonNode, Date.class, Period.class));
        builder.location(parseChoiceElement("location", jsonNode, CodeableConcept.class, Address.class, Reference.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        ArrayNode subSiteArray = getArrayNode(jsonNode, "subSite");
        if (subSiteArray != null) {
            for (int i = 0; i < subSiteArray.size(); i++) {
                if (subSiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subSiteArray.get(i).getNodeType() + " for element: subSite");
                }
                builder.subSite(parseCodeableConcept("subSite", subSiteArray.get(i), i));
            }
        }
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseClaimResponseAddItemDetail("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.AddItem.Detail parseClaimResponseAddItemDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.AddItem.Detail.class, jsonNode);
        }
        ClaimResponse.AddItem.Detail.Builder builder = ClaimResponse.AddItem.Detail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode subDetailArray = getArrayNode(jsonNode, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                if (subDetailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subDetailArray.get(i).getNodeType() + " for element: subDetail");
                }
                builder.subDetail(parseClaimResponseAddItemDetailSubDetail("subDetail", subDetailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.AddItem.Detail.SubDetail parseClaimResponseAddItemDetailSubDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.AddItem.Detail.SubDetail.class, jsonNode);
        }
        ClaimResponse.AddItem.Detail.SubDetail.Builder builder = ClaimResponse.AddItem.Detail.SubDetail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Error parseClaimResponseError(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.Error.class, jsonNode);
        }
        ClaimResponse.Error.Builder builder = ClaimResponse.Error.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", getJsonNode(jsonNode, "itemSequence", NumericNode.class), jsonNode.get("_itemSequence"), -1));
        builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", getJsonNode(jsonNode, "detailSequence", NumericNode.class), jsonNode.get("_detailSequence"), -1));
        builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", getJsonNode(jsonNode, "subDetailSequence", NumericNode.class), jsonNode.get("_subDetailSequence"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Insurance parseClaimResponseInsurance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.Insurance.class, jsonNode);
        }
        ClaimResponse.Insurance.Builder builder = ClaimResponse.Insurance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.focal(parseBoolean("focal", getJsonNode(jsonNode, "focal", JsonNode.class), jsonNode.get("_focal"), -1));
        builder.coverage(parseReference("coverage", getJsonNode(jsonNode, "coverage", JsonNode.class), -1));
        builder.businessArrangement(parseString("businessArrangement", getJsonNode(jsonNode, "businessArrangement", TextNode.class), jsonNode.get("_businessArrangement"), -1));
        builder.claimResponse(parseReference("claimResponse", getJsonNode(jsonNode, "claimResponse", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Item parseClaimResponseItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.Item.class, jsonNode);
        }
        ClaimResponse.Item.Builder builder = ClaimResponse.Item.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", getJsonNode(jsonNode, "itemSequence", NumericNode.class), jsonNode.get("_itemSequence"), -1));
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseClaimResponseItemDetail("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Item.Adjudication parseClaimResponseItemAdjudication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.Item.Adjudication.class, jsonNode);
        }
        ClaimResponse.Item.Adjudication.Builder builder = ClaimResponse.Item.Adjudication.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.reason(parseCodeableConcept("reason", getJsonNode(jsonNode, "reason", JsonNode.class), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        builder.value(parseDecimal("value", getJsonNode(jsonNode, "value", NumericNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Item.Detail parseClaimResponseItemDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.Item.Detail.class, jsonNode);
        }
        ClaimResponse.Item.Detail.Builder builder = ClaimResponse.Item.Detail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", getJsonNode(jsonNode, "detailSequence", NumericNode.class), jsonNode.get("_detailSequence"), -1));
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode subDetailArray = getArrayNode(jsonNode, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                if (subDetailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subDetailArray.get(i).getNodeType() + " for element: subDetail");
                }
                builder.subDetail(parseClaimResponseItemDetailSubDetail("subDetail", subDetailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Item.Detail.SubDetail parseClaimResponseItemDetailSubDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.Item.Detail.SubDetail.class, jsonNode);
        }
        ClaimResponse.Item.Detail.SubDetail.Builder builder = ClaimResponse.Item.Detail.SubDetail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", getJsonNode(jsonNode, "subDetailSequence", NumericNode.class), jsonNode.get("_subDetailSequence"), -1));
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Payment parseClaimResponsePayment(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.Payment.class, jsonNode);
        }
        ClaimResponse.Payment.Builder builder = ClaimResponse.Payment.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.adjustment(parseMoney("adjustment", getJsonNode(jsonNode, "adjustment", JsonNode.class), -1));
        builder.adjustmentReason(parseCodeableConcept("adjustmentReason", getJsonNode(jsonNode, "adjustmentReason", JsonNode.class), -1));
        builder.date(parseDate("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.ProcessNote parseClaimResponseProcessNote(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.ProcessNote.class, jsonNode);
        }
        ClaimResponse.ProcessNote.Builder builder = ClaimResponse.ProcessNote.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.number((PositiveInt) parseInteger(PositiveInt.builder(), "number", getJsonNode(jsonNode, "number", NumericNode.class), jsonNode.get("_number"), -1));
        builder.type((NoteType) parseString(NoteType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        builder.language(parseCodeableConcept("language", getJsonNode(jsonNode, "language", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Total parseClaimResponseTotal(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClaimResponse.Total.class, jsonNode);
        }
        ClaimResponse.Total.Builder builder = ClaimResponse.Total.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClinicalImpression parseClinicalImpression(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalImpression.class, jsonNode);
        }
        ClinicalImpression.Builder builder = ClinicalImpression.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ClinicalImpressionStatus) parseString(ClinicalImpressionStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonNode(jsonNode, "statusReason", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.effective(parseChoiceElement("effective", jsonNode, DateTime.class, Period.class));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.assessor(parseReference("assessor", getJsonNode(jsonNode, "assessor", JsonNode.class), -1));
        builder.previous(parseReference("previous", getJsonNode(jsonNode, "previous", JsonNode.class), -1));
        ArrayNode problemArray = getArrayNode(jsonNode, "problem");
        if (problemArray != null) {
            for (int i = 0; i < problemArray.size(); i++) {
                if (problemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + problemArray.get(i).getNodeType() + " for element: problem");
                }
                builder.problem(parseReference("problem", problemArray.get(i), i));
            }
        }
        ArrayNode investigationArray = getArrayNode(jsonNode, "investigation");
        if (investigationArray != null) {
            for (int i = 0; i < investigationArray.size(); i++) {
                if (investigationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + investigationArray.get(i).getNodeType() + " for element: investigation");
                }
                builder.investigation(parseClinicalImpressionInvestigation("investigation", investigationArray.get(i), i));
            }
        }
        ArrayNode protocolArray = getArrayNode(jsonNode, "protocol", true);
        if (protocolArray != null) {
            ArrayNode _protocolArray = getArrayNode(jsonNode, "_protocol");
            for (int i = 0; i < protocolArray.size(); i++) {
                builder.protocol(parseUri("protocol", protocolArray.get(i), getJsonNode(_protocolArray, i), i));
            }
        }
        builder.summary(parseString("summary", getJsonNode(jsonNode, "summary", TextNode.class), jsonNode.get("_summary"), -1));
        ArrayNode findingArray = getArrayNode(jsonNode, "finding");
        if (findingArray != null) {
            for (int i = 0; i < findingArray.size(); i++) {
                if (findingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + findingArray.get(i).getNodeType() + " for element: finding");
                }
                builder.finding(parseClinicalImpressionFinding("finding", findingArray.get(i), i));
            }
        }
        ArrayNode prognosisCodeableConceptArray = getArrayNode(jsonNode, "prognosisCodeableConcept");
        if (prognosisCodeableConceptArray != null) {
            for (int i = 0; i < prognosisCodeableConceptArray.size(); i++) {
                if (prognosisCodeableConceptArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + prognosisCodeableConceptArray.get(i).getNodeType() + " for element: prognosisCodeableConcept");
                }
                builder.prognosisCodeableConcept(parseCodeableConcept("prognosisCodeableConcept", prognosisCodeableConceptArray.get(i), i));
            }
        }
        ArrayNode prognosisReferenceArray = getArrayNode(jsonNode, "prognosisReference");
        if (prognosisReferenceArray != null) {
            for (int i = 0; i < prognosisReferenceArray.size(); i++) {
                if (prognosisReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + prognosisReferenceArray.get(i).getNodeType() + " for element: prognosisReference");
                }
                builder.prognosisReference(parseReference("prognosisReference", prognosisReferenceArray.get(i), i));
            }
        }
        ArrayNode supportingInfoArray = getArrayNode(jsonNode, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                if (supportingInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInfoArray.get(i).getNodeType() + " for element: supportingInfo");
                }
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClinicalImpression.Finding parseClinicalImpressionFinding(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalImpression.Finding.class, jsonNode);
        }
        ClinicalImpression.Finding.Builder builder = ClinicalImpression.Finding.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.itemCodeableConcept(parseCodeableConcept("itemCodeableConcept", getJsonNode(jsonNode, "itemCodeableConcept", JsonNode.class), -1));
        builder.itemReference(parseReference("itemReference", getJsonNode(jsonNode, "itemReference", JsonNode.class), -1));
        builder.basis(parseString("basis", getJsonNode(jsonNode, "basis", TextNode.class), jsonNode.get("_basis"), -1));
        stackPop();
        return builder.build();
    }

    private ClinicalImpression.Investigation parseClinicalImpressionInvestigation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalImpression.Investigation.class, jsonNode);
        }
        ClinicalImpression.Investigation.Builder builder = ClinicalImpression.Investigation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseReference("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClinicalUseDefinition parseClinicalUseDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalUseDefinition.class, jsonNode);
        }
        ClinicalUseDefinition.Builder builder = ClinicalUseDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.type((ClinicalUseDefinitionType) parseString(ClinicalUseDefinitionType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        ArrayNode subjectArray = getArrayNode(jsonNode, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                if (subjectArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subjectArray.get(i).getNodeType() + " for element: subject");
                }
                builder.subject(parseReference("subject", subjectArray.get(i), i));
            }
        }
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.contraindication(parseClinicalUseDefinitionContraindication("contraindication", getJsonNode(jsonNode, "contraindication", JsonNode.class), -1));
        builder.indication(parseClinicalUseDefinitionIndication("indication", getJsonNode(jsonNode, "indication", JsonNode.class), -1));
        builder.interaction(parseClinicalUseDefinitionInteraction("interaction", getJsonNode(jsonNode, "interaction", JsonNode.class), -1));
        ArrayNode populationArray = getArrayNode(jsonNode, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                if (populationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + populationArray.get(i).getNodeType() + " for element: population");
                }
                builder.population(parseReference("population", populationArray.get(i), i));
            }
        }
        builder.undesirableEffect(parseClinicalUseDefinitionUndesirableEffect("undesirableEffect", getJsonNode(jsonNode, "undesirableEffect", JsonNode.class), -1));
        builder.warning(parseClinicalUseDefinitionWarning("warning", getJsonNode(jsonNode, "warning", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClinicalUseDefinition.Contraindication parseClinicalUseDefinitionContraindication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalUseDefinition.Contraindication.class, jsonNode);
        }
        ClinicalUseDefinition.Contraindication.Builder builder = ClinicalUseDefinition.Contraindication.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.diseaseSymptomProcedure(parseCodeableReference("diseaseSymptomProcedure", getJsonNode(jsonNode, "diseaseSymptomProcedure", JsonNode.class), -1));
        builder.diseaseStatus(parseCodeableReference("diseaseStatus", getJsonNode(jsonNode, "diseaseStatus", JsonNode.class), -1));
        ArrayNode comorbidityArray = getArrayNode(jsonNode, "comorbidity");
        if (comorbidityArray != null) {
            for (int i = 0; i < comorbidityArray.size(); i++) {
                if (comorbidityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + comorbidityArray.get(i).getNodeType() + " for element: comorbidity");
                }
                builder.comorbidity(parseCodeableReference("comorbidity", comorbidityArray.get(i), i));
            }
        }
        ArrayNode indicationArray = getArrayNode(jsonNode, "indication");
        if (indicationArray != null) {
            for (int i = 0; i < indicationArray.size(); i++) {
                if (indicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + indicationArray.get(i).getNodeType() + " for element: indication");
                }
                builder.indication(parseReference("indication", indicationArray.get(i), i));
            }
        }
        ArrayNode otherTherapyArray = getArrayNode(jsonNode, "otherTherapy");
        if (otherTherapyArray != null) {
            for (int i = 0; i < otherTherapyArray.size(); i++) {
                if (otherTherapyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + otherTherapyArray.get(i).getNodeType() + " for element: otherTherapy");
                }
                builder.otherTherapy(parseClinicalUseDefinitionContraindicationOtherTherapy("otherTherapy", otherTherapyArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClinicalUseDefinition.Contraindication.OtherTherapy parseClinicalUseDefinitionContraindicationOtherTherapy(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalUseDefinition.Contraindication.OtherTherapy.class, jsonNode);
        }
        ClinicalUseDefinition.Contraindication.OtherTherapy.Builder builder = ClinicalUseDefinition.Contraindication.OtherTherapy.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.relationshipType(parseCodeableConcept("relationshipType", getJsonNode(jsonNode, "relationshipType", JsonNode.class), -1));
        builder.therapy(parseCodeableReference("therapy", getJsonNode(jsonNode, "therapy", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClinicalUseDefinition.Indication parseClinicalUseDefinitionIndication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalUseDefinition.Indication.class, jsonNode);
        }
        ClinicalUseDefinition.Indication.Builder builder = ClinicalUseDefinition.Indication.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.diseaseSymptomProcedure(parseCodeableReference("diseaseSymptomProcedure", getJsonNode(jsonNode, "diseaseSymptomProcedure", JsonNode.class), -1));
        builder.diseaseStatus(parseCodeableReference("diseaseStatus", getJsonNode(jsonNode, "diseaseStatus", JsonNode.class), -1));
        ArrayNode comorbidityArray = getArrayNode(jsonNode, "comorbidity");
        if (comorbidityArray != null) {
            for (int i = 0; i < comorbidityArray.size(); i++) {
                if (comorbidityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + comorbidityArray.get(i).getNodeType() + " for element: comorbidity");
                }
                builder.comorbidity(parseCodeableReference("comorbidity", comorbidityArray.get(i), i));
            }
        }
        builder.intendedEffect(parseCodeableReference("intendedEffect", getJsonNode(jsonNode, "intendedEffect", JsonNode.class), -1));
        builder.duration(parseChoiceElement("duration", jsonNode, Range.class, String.class));
        ArrayNode undesirableEffectArray = getArrayNode(jsonNode, "undesirableEffect");
        if (undesirableEffectArray != null) {
            for (int i = 0; i < undesirableEffectArray.size(); i++) {
                if (undesirableEffectArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + undesirableEffectArray.get(i).getNodeType() + " for element: undesirableEffect");
                }
                builder.undesirableEffect(parseReference("undesirableEffect", undesirableEffectArray.get(i), i));
            }
        }
        ArrayNode otherTherapyArray = getArrayNode(jsonNode, "otherTherapy");
        if (otherTherapyArray != null) {
            for (int i = 0; i < otherTherapyArray.size(); i++) {
                if (otherTherapyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + otherTherapyArray.get(i).getNodeType() + " for element: otherTherapy");
                }
                builder.otherTherapy(parseClinicalUseDefinitionContraindicationOtherTherapy("otherTherapy", otherTherapyArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClinicalUseDefinition.Interaction parseClinicalUseDefinitionInteraction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalUseDefinition.Interaction.class, jsonNode);
        }
        ClinicalUseDefinition.Interaction.Builder builder = ClinicalUseDefinition.Interaction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode interactantArray = getArrayNode(jsonNode, "interactant");
        if (interactantArray != null) {
            for (int i = 0; i < interactantArray.size(); i++) {
                if (interactantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + interactantArray.get(i).getNodeType() + " for element: interactant");
                }
                builder.interactant(parseClinicalUseDefinitionInteractionInteractant("interactant", interactantArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.effect(parseCodeableReference("effect", getJsonNode(jsonNode, "effect", JsonNode.class), -1));
        builder.incidence(parseCodeableConcept("incidence", getJsonNode(jsonNode, "incidence", JsonNode.class), -1));
        ArrayNode managementArray = getArrayNode(jsonNode, "management");
        if (managementArray != null) {
            for (int i = 0; i < managementArray.size(); i++) {
                if (managementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + managementArray.get(i).getNodeType() + " for element: management");
                }
                builder.management(parseCodeableConcept("management", managementArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClinicalUseDefinition.Interaction.Interactant parseClinicalUseDefinitionInteractionInteractant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalUseDefinition.Interaction.Interactant.class, jsonNode);
        }
        ClinicalUseDefinition.Interaction.Interactant.Builder builder = ClinicalUseDefinition.Interaction.Interactant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.item(parseChoiceElement("item", jsonNode, Reference.class, CodeableConcept.class));
        stackPop();
        return builder.build();
    }

    private ClinicalUseDefinition.UndesirableEffect parseClinicalUseDefinitionUndesirableEffect(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalUseDefinition.UndesirableEffect.class, jsonNode);
        }
        ClinicalUseDefinition.UndesirableEffect.Builder builder = ClinicalUseDefinition.UndesirableEffect.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.symptomConditionEffect(parseCodeableReference("symptomConditionEffect", getJsonNode(jsonNode, "symptomConditionEffect", JsonNode.class), -1));
        builder.classification(parseCodeableConcept("classification", getJsonNode(jsonNode, "classification", JsonNode.class), -1));
        builder.frequencyOfOccurrence(parseCodeableConcept("frequencyOfOccurrence", getJsonNode(jsonNode, "frequencyOfOccurrence", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ClinicalUseDefinition.Warning parseClinicalUseDefinitionWarning(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ClinicalUseDefinition.Warning.class, jsonNode);
        }
        ClinicalUseDefinition.Warning.Builder builder = ClinicalUseDefinition.Warning.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private CodeSystem parseCodeSystem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CodeSystem.class, jsonNode);
        }
        CodeSystem.Builder builder = CodeSystem.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.caseSensitive(parseBoolean("caseSensitive", getJsonNode(jsonNode, "caseSensitive", JsonNode.class), jsonNode.get("_caseSensitive"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", getJsonNode(jsonNode, "valueSet", TextNode.class), jsonNode.get("_valueSet"), -1));
        builder.hierarchyMeaning((CodeSystemHierarchyMeaning) parseString(CodeSystemHierarchyMeaning.builder(), "hierarchyMeaning", getJsonNode(jsonNode, "hierarchyMeaning", TextNode.class), jsonNode.get("_hierarchyMeaning"), -1));
        builder.compositional(parseBoolean("compositional", getJsonNode(jsonNode, "compositional", JsonNode.class), jsonNode.get("_compositional"), -1));
        builder.versionNeeded(parseBoolean("versionNeeded", getJsonNode(jsonNode, "versionNeeded", JsonNode.class), jsonNode.get("_versionNeeded"), -1));
        builder.content((CodeSystemContentMode) parseString(CodeSystemContentMode.builder(), "content", getJsonNode(jsonNode, "content", TextNode.class), jsonNode.get("_content"), -1));
        builder.supplements((Canonical) parseUri(Canonical.builder(), "supplements", getJsonNode(jsonNode, "supplements", TextNode.class), jsonNode.get("_supplements"), -1));
        builder.count((UnsignedInt) parseInteger(UnsignedInt.builder(), "count", getJsonNode(jsonNode, "count", NumericNode.class), jsonNode.get("_count"), -1));
        ArrayNode filterArray = getArrayNode(jsonNode, "filter");
        if (filterArray != null) {
            for (int i = 0; i < filterArray.size(); i++) {
                if (filterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + filterArray.get(i).getNodeType() + " for element: filter");
                }
                builder.filter(parseCodeSystemFilter("filter", filterArray.get(i), i));
            }
        }
        ArrayNode propertyArray = getArrayNode(jsonNode, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                if (propertyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyArray.get(i).getNodeType() + " for element: property");
                }
                builder.property(parseCodeSystemProperty("property", propertyArray.get(i), i));
            }
        }
        ArrayNode conceptArray = getArrayNode(jsonNode, "concept");
        if (conceptArray != null) {
            for (int i = 0; i < conceptArray.size(); i++) {
                if (conceptArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conceptArray.get(i).getNodeType() + " for element: concept");
                }
                builder.concept(parseCodeSystemConcept("concept", conceptArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CodeSystem.Concept parseCodeSystemConcept(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CodeSystem.Concept.class, jsonNode);
        }
        CodeSystem.Concept.Builder builder = CodeSystem.Concept.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        builder.definition(parseString("definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        ArrayNode designationArray = getArrayNode(jsonNode, "designation");
        if (designationArray != null) {
            for (int i = 0; i < designationArray.size(); i++) {
                if (designationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + designationArray.get(i).getNodeType() + " for element: designation");
                }
                builder.designation(parseCodeSystemConceptDesignation("designation", designationArray.get(i), i));
            }
        }
        ArrayNode propertyArray = getArrayNode(jsonNode, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                if (propertyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyArray.get(i).getNodeType() + " for element: property");
                }
                builder.property(parseCodeSystemConceptProperty("property", propertyArray.get(i), i));
            }
        }
        ArrayNode conceptArray = getArrayNode(jsonNode, "concept");
        if (conceptArray != null) {
            for (int i = 0; i < conceptArray.size(); i++) {
                if (conceptArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conceptArray.get(i).getNodeType() + " for element: concept");
                }
                builder.concept(parseCodeSystemConcept("concept", conceptArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CodeSystem.Concept.Designation parseCodeSystemConceptDesignation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CodeSystem.Concept.Designation.class, jsonNode);
        }
        CodeSystem.Concept.Designation.Builder builder = CodeSystem.Concept.Designation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.language((Code) parseString(Code.builder(), "language", getJsonNode(jsonNode, "language", TextNode.class), jsonNode.get("_language"), -1));
        builder.use(parseCoding("use", getJsonNode(jsonNode, "use", JsonNode.class), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private CodeSystem.Concept.Property parseCodeSystemConceptProperty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CodeSystem.Concept.Property.class, jsonNode);
        }
        CodeSystem.Concept.Property.Builder builder = CodeSystem.Concept.Property.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.value(parseChoiceElement("value", jsonNode, Code.class, Coding.class, String.class, Integer.class, Boolean.class, DateTime.class, Decimal.class));
        stackPop();
        return builder.build();
    }

    private CodeSystem.Filter parseCodeSystemFilter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CodeSystem.Filter.class, jsonNode);
        }
        CodeSystem.Filter.Builder builder = CodeSystem.Filter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode operatorArray = getArrayNode(jsonNode, "operator", true);
        if (operatorArray != null) {
            ArrayNode _operatorArray = getArrayNode(jsonNode, "_operator");
            for (int i = 0; i < operatorArray.size(); i++) {
                builder.operator((FilterOperator) parseString(FilterOperator.builder(), "operator", operatorArray.get(i), getJsonNode(_operatorArray, i), i));
            }
        }
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private CodeSystem.Property parseCodeSystemProperty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CodeSystem.Property.class, jsonNode);
        }
        CodeSystem.Property.Builder builder = CodeSystem.Property.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.uri(parseUri("uri", getJsonNode(jsonNode, "uri", TextNode.class), jsonNode.get("_uri"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.type((PropertyType) parseString(PropertyType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private CodeableConcept parseCodeableConcept(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CodeableConcept.class, jsonNode);
        }
        CodeableConcept.Builder builder = CodeableConcept.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        ArrayNode codingArray = getArrayNode(jsonNode, "coding");
        if (codingArray != null) {
            for (int i = 0; i < codingArray.size(); i++) {
                if (codingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codingArray.get(i).getNodeType() + " for element: coding");
                }
                builder.coding(parseCoding("coding", codingArray.get(i), i));
            }
        }
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private CodeableReference parseCodeableReference(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CodeableReference.class, jsonNode);
        }
        CodeableReference.Builder builder = CodeableReference.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.concept(parseCodeableConcept("concept", getJsonNode(jsonNode, "concept", JsonNode.class), -1));
        builder.reference(parseReference("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Coding parseCoding(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Coding.class, jsonNode);
        }
        Coding.Builder builder = Coding.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.system(parseUri("system", getJsonNode(jsonNode, "system", TextNode.class), jsonNode.get("_system"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        builder.userSelected(parseBoolean("userSelected", getJsonNode(jsonNode, "userSelected", JsonNode.class), jsonNode.get("_userSelected"), -1));
        stackPop();
        return builder.build();
    }

    private Communication parseCommunication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Communication.class, jsonNode);
        }
        Communication.Builder builder = Communication.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        ArrayNode inResponseToArray = getArrayNode(jsonNode, "inResponseTo");
        if (inResponseToArray != null) {
            for (int i = 0; i < inResponseToArray.size(); i++) {
                if (inResponseToArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + inResponseToArray.get(i).getNodeType() + " for element: inResponseTo");
                }
                builder.inResponseTo(parseReference("inResponseTo", inResponseToArray.get(i), i));
            }
        }
        builder.status((CommunicationStatus) parseString(CommunicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonNode(jsonNode, "statusReason", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.priority((CommunicationPriority) parseString(CommunicationPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        ArrayNode mediumArray = getArrayNode(jsonNode, "medium");
        if (mediumArray != null) {
            for (int i = 0; i < mediumArray.size(); i++) {
                if (mediumArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + mediumArray.get(i).getNodeType() + " for element: medium");
                }
                builder.medium(parseCodeableConcept("medium", mediumArray.get(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.topic(parseCodeableConcept("topic", getJsonNode(jsonNode, "topic", JsonNode.class), -1));
        ArrayNode aboutArray = getArrayNode(jsonNode, "about");
        if (aboutArray != null) {
            for (int i = 0; i < aboutArray.size(); i++) {
                if (aboutArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + aboutArray.get(i).getNodeType() + " for element: about");
                }
                builder.about(parseReference("about", aboutArray.get(i), i));
            }
        }
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.sent(parseDateTime("sent", getJsonNode(jsonNode, "sent", TextNode.class), jsonNode.get("_sent"), -1));
        builder.received(parseDateTime("received", getJsonNode(jsonNode, "received", TextNode.class), jsonNode.get("_received"), -1));
        ArrayNode recipientArray = getArrayNode(jsonNode, "recipient");
        if (recipientArray != null) {
            for (int i = 0; i < recipientArray.size(); i++) {
                if (recipientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + recipientArray.get(i).getNodeType() + " for element: recipient");
                }
                builder.recipient(parseReference("recipient", recipientArray.get(i), i));
            }
        }
        builder.sender(parseReference("sender", getJsonNode(jsonNode, "sender", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode payloadArray = getArrayNode(jsonNode, "payload");
        if (payloadArray != null) {
            for (int i = 0; i < payloadArray.size(); i++) {
                if (payloadArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + payloadArray.get(i).getNodeType() + " for element: payload");
                }
                builder.payload(parseCommunicationPayload("payload", payloadArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Communication.Payload parseCommunicationPayload(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Communication.Payload.class, jsonNode);
        }
        Communication.Payload.Builder builder = Communication.Payload.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.content(parseChoiceElement("content", jsonNode, String.class, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private CommunicationRequest parseCommunicationRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CommunicationRequest.class, jsonNode);
        }
        CommunicationRequest.Builder builder = CommunicationRequest.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode replacesArray = getArrayNode(jsonNode, "replaces");
        if (replacesArray != null) {
            for (int i = 0; i < replacesArray.size(); i++) {
                if (replacesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + replacesArray.get(i).getNodeType() + " for element: replaces");
                }
                builder.replaces(parseReference("replaces", replacesArray.get(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonNode(jsonNode, "groupIdentifier", JsonNode.class), -1));
        builder.status((CommunicationRequestStatus) parseString(CommunicationRequestStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonNode(jsonNode, "statusReason", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.priority((CommunicationPriority) parseString(CommunicationPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonNode(jsonNode, "doNotPerform", JsonNode.class), jsonNode.get("_doNotPerform"), -1));
        ArrayNode mediumArray = getArrayNode(jsonNode, "medium");
        if (mediumArray != null) {
            for (int i = 0; i < mediumArray.size(); i++) {
                if (mediumArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + mediumArray.get(i).getNodeType() + " for element: medium");
                }
                builder.medium(parseCodeableConcept("medium", mediumArray.get(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        ArrayNode aboutArray = getArrayNode(jsonNode, "about");
        if (aboutArray != null) {
            for (int i = 0; i < aboutArray.size(); i++) {
                if (aboutArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + aboutArray.get(i).getNodeType() + " for element: about");
                }
                builder.about(parseReference("about", aboutArray.get(i), i));
            }
        }
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        ArrayNode payloadArray = getArrayNode(jsonNode, "payload");
        if (payloadArray != null) {
            for (int i = 0; i < payloadArray.size(); i++) {
                if (payloadArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + payloadArray.get(i).getNodeType() + " for element: payload");
                }
                builder.payload(parseCommunicationRequestPayload("payload", payloadArray.get(i), i));
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, Period.class));
        builder.authoredOn(parseDateTime("authoredOn", getJsonNode(jsonNode, "authoredOn", TextNode.class), jsonNode.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonNode(jsonNode, "requester", JsonNode.class), -1));
        ArrayNode recipientArray = getArrayNode(jsonNode, "recipient");
        if (recipientArray != null) {
            for (int i = 0; i < recipientArray.size(); i++) {
                if (recipientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + recipientArray.get(i).getNodeType() + " for element: recipient");
                }
                builder.recipient(parseReference("recipient", recipientArray.get(i), i));
            }
        }
        builder.sender(parseReference("sender", getJsonNode(jsonNode, "sender", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CommunicationRequest.Payload parseCommunicationRequestPayload(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CommunicationRequest.Payload.class, jsonNode);
        }
        CommunicationRequest.Payload.Builder builder = CommunicationRequest.Payload.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.content(parseChoiceElement("content", jsonNode, String.class, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private CompartmentDefinition parseCompartmentDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CompartmentDefinition.class, jsonNode);
        }
        CompartmentDefinition.Builder builder = CompartmentDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.code((CompartmentType) parseString(CompartmentType.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.search(parseBoolean("search", getJsonNode(jsonNode, "search", JsonNode.class), jsonNode.get("_search"), -1));
        ArrayNode resourceArray = getArrayNode(jsonNode, "resource");
        if (resourceArray != null) {
            for (int i = 0; i < resourceArray.size(); i++) {
                if (resourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + resourceArray.get(i).getNodeType() + " for element: resource");
                }
                builder.resource(parseCompartmentDefinitionResource("resource", resourceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CompartmentDefinition.Resource parseCompartmentDefinitionResource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CompartmentDefinition.Resource.class, jsonNode);
        }
        CompartmentDefinition.Resource.Builder builder = CompartmentDefinition.Resource.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        ArrayNode paramArray = getArrayNode(jsonNode, "param", true);
        if (paramArray != null) {
            ArrayNode _paramArray = getArrayNode(jsonNode, "_param");
            for (int i = 0; i < paramArray.size(); i++) {
                builder.param(parseString("param", paramArray.get(i), getJsonNode(_paramArray, i), i));
            }
        }
        builder.documentation(parseString("documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private Composition parseComposition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Composition.class, jsonNode);
        }
        Composition.Builder builder = Composition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.status((CompositionStatus) parseString(CompositionStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseReference("author", authorArray.get(i), i));
            }
        }
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.confidentiality((DocumentConfidentiality) parseString(DocumentConfidentiality.builder(), "confidentiality", getJsonNode(jsonNode, "confidentiality", TextNode.class), jsonNode.get("_confidentiality"), -1));
        ArrayNode attesterArray = getArrayNode(jsonNode, "attester");
        if (attesterArray != null) {
            for (int i = 0; i < attesterArray.size(); i++) {
                if (attesterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + attesterArray.get(i).getNodeType() + " for element: attester");
                }
                builder.attester(parseCompositionAttester("attester", attesterArray.get(i), i));
            }
        }
        builder.custodian(parseReference("custodian", getJsonNode(jsonNode, "custodian", JsonNode.class), -1));
        ArrayNode relatesToArray = getArrayNode(jsonNode, "relatesTo");
        if (relatesToArray != null) {
            for (int i = 0; i < relatesToArray.size(); i++) {
                if (relatesToArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatesToArray.get(i).getNodeType() + " for element: relatesTo");
                }
                builder.relatesTo(parseCompositionRelatesTo("relatesTo", relatesToArray.get(i), i));
            }
        }
        ArrayNode eventArray = getArrayNode(jsonNode, "event");
        if (eventArray != null) {
            for (int i = 0; i < eventArray.size(); i++) {
                if (eventArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + eventArray.get(i).getNodeType() + " for element: event");
                }
                builder.event(parseCompositionEvent("event", eventArray.get(i), i));
            }
        }
        ArrayNode sectionArray = getArrayNode(jsonNode, "section");
        if (sectionArray != null) {
            for (int i = 0; i < sectionArray.size(); i++) {
                if (sectionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sectionArray.get(i).getNodeType() + " for element: section");
                }
                builder.section(parseCompositionSection("section", sectionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Composition.Attester parseCompositionAttester(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Composition.Attester.class, jsonNode);
        }
        Composition.Attester.Builder builder = Composition.Attester.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.mode((CompositionAttestationMode) parseString(CompositionAttestationMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.time(parseDateTime("time", getJsonNode(jsonNode, "time", TextNode.class), jsonNode.get("_time"), -1));
        builder.party(parseReference("party", getJsonNode(jsonNode, "party", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Composition.Event parseCompositionEvent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Composition.Event.class, jsonNode);
        }
        Composition.Event.Builder builder = Composition.Event.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseReference("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Composition.RelatesTo parseCompositionRelatesTo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Composition.RelatesTo.class, jsonNode);
        }
        Composition.RelatesTo.Builder builder = Composition.RelatesTo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((DocumentRelationshipType) parseString(DocumentRelationshipType.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.target(parseChoiceElement("target", jsonNode, Identifier.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Composition.Section parseCompositionSection(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Composition.Section.class, jsonNode);
        }
        Composition.Section.Builder builder = Composition.Section.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseReference("author", authorArray.get(i), i));
            }
        }
        builder.focus(parseReference("focus", getJsonNode(jsonNode, "focus", JsonNode.class), -1));
        builder.text(parseNarrative("text", getJsonNode(jsonNode, "text", JsonNode.class), -1));
        builder.mode((SectionMode) parseString(SectionMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.orderedBy(parseCodeableConcept("orderedBy", getJsonNode(jsonNode, "orderedBy", JsonNode.class), -1));
        ArrayNode entryArray = getArrayNode(jsonNode, "entry");
        if (entryArray != null) {
            for (int i = 0; i < entryArray.size(); i++) {
                if (entryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entryArray.get(i).getNodeType() + " for element: entry");
                }
                builder.entry(parseReference("entry", entryArray.get(i), i));
            }
        }
        builder.emptyReason(parseCodeableConcept("emptyReason", getJsonNode(jsonNode, "emptyReason", JsonNode.class), -1));
        ArrayNode sectionArray = getArrayNode(jsonNode, "section");
        if (sectionArray != null) {
            for (int i = 0; i < sectionArray.size(); i++) {
                if (sectionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sectionArray.get(i).getNodeType() + " for element: section");
                }
                builder.section(parseCompositionSection("section", sectionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ConceptMap parseConceptMap(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ConceptMap.class, jsonNode);
        }
        ConceptMap.Builder builder = ConceptMap.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.source(parseChoiceElement("source", jsonNode, Uri.class, Canonical.class));
        builder.target(parseChoiceElement("target", jsonNode, Uri.class, Canonical.class));
        ArrayNode groupArray = getArrayNode(jsonNode, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                if (groupArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + groupArray.get(i).getNodeType() + " for element: group");
                }
                builder.group(parseConceptMapGroup("group", groupArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group parseConceptMapGroup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ConceptMap.Group.class, jsonNode);
        }
        ConceptMap.Group.Builder builder = ConceptMap.Group.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.source(parseUri("source", getJsonNode(jsonNode, "source", TextNode.class), jsonNode.get("_source"), -1));
        builder.sourceVersion(parseString("sourceVersion", getJsonNode(jsonNode, "sourceVersion", TextNode.class), jsonNode.get("_sourceVersion"), -1));
        builder.target(parseUri("target", getJsonNode(jsonNode, "target", TextNode.class), jsonNode.get("_target"), -1));
        builder.targetVersion(parseString("targetVersion", getJsonNode(jsonNode, "targetVersion", TextNode.class), jsonNode.get("_targetVersion"), -1));
        ArrayNode elementArray = getArrayNode(jsonNode, "element");
        if (elementArray != null) {
            for (int i = 0; i < elementArray.size(); i++) {
                if (elementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + elementArray.get(i).getNodeType() + " for element: element");
                }
                builder.element(parseConceptMapGroupElement("element", elementArray.get(i), i));
            }
        }
        builder.unmapped(parseConceptMapGroupUnmapped("unmapped", getJsonNode(jsonNode, "unmapped", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group.Element parseConceptMapGroupElement(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ConceptMap.Group.Element.class, jsonNode);
        }
        ConceptMap.Group.Element.Builder builder = ConceptMap.Group.Element.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        ArrayNode targetArray = getArrayNode(jsonNode, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                if (targetArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetArray.get(i).getNodeType() + " for element: target");
                }
                builder.target(parseConceptMapGroupElementTarget("target", targetArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group.Element.Target parseConceptMapGroupElementTarget(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ConceptMap.Group.Element.Target.class, jsonNode);
        }
        ConceptMap.Group.Element.Target.Builder builder = ConceptMap.Group.Element.Target.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        builder.equivalence((ConceptMapEquivalence) parseString(ConceptMapEquivalence.builder(), "equivalence", getJsonNode(jsonNode, "equivalence", TextNode.class), jsonNode.get("_equivalence"), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        ArrayNode dependsOnArray = getArrayNode(jsonNode, "dependsOn");
        if (dependsOnArray != null) {
            for (int i = 0; i < dependsOnArray.size(); i++) {
                if (dependsOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dependsOnArray.get(i).getNodeType() + " for element: dependsOn");
                }
                builder.dependsOn(parseConceptMapGroupElementTargetDependsOn("dependsOn", dependsOnArray.get(i), i));
            }
        }
        ArrayNode productArray = getArrayNode(jsonNode, "product");
        if (productArray != null) {
            for (int i = 0; i < productArray.size(); i++) {
                if (productArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + productArray.get(i).getNodeType() + " for element: product");
                }
                builder.product(parseConceptMapGroupElementTargetDependsOn("product", productArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group.Element.Target.DependsOn parseConceptMapGroupElementTargetDependsOn(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ConceptMap.Group.Element.Target.DependsOn.class, jsonNode);
        }
        ConceptMap.Group.Element.Target.DependsOn.Builder builder = ConceptMap.Group.Element.Target.DependsOn.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.property(parseUri("property", getJsonNode(jsonNode, "property", TextNode.class), jsonNode.get("_property"), -1));
        builder.system((Canonical) parseUri(Canonical.builder(), "system", getJsonNode(jsonNode, "system", TextNode.class), jsonNode.get("_system"), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group.Unmapped parseConceptMapGroupUnmapped(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ConceptMap.Group.Unmapped.class, jsonNode);
        }
        ConceptMap.Group.Unmapped.Builder builder = ConceptMap.Group.Unmapped.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.mode((ConceptMapGroupUnmappedMode) parseString(ConceptMapGroupUnmappedMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        builder.url((Canonical) parseUri(Canonical.builder(), "url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private Condition parseCondition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Condition.class, jsonNode);
        }
        Condition.Builder builder = Condition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.clinicalStatus(parseCodeableConcept("clinicalStatus", getJsonNode(jsonNode, "clinicalStatus", JsonNode.class), -1));
        builder.verificationStatus(parseCodeableConcept("verificationStatus", getJsonNode(jsonNode, "verificationStatus", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.severity(parseCodeableConcept("severity", getJsonNode(jsonNode, "severity", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode bodySiteArray = getArrayNode(jsonNode, "bodySite");
        if (bodySiteArray != null) {
            for (int i = 0; i < bodySiteArray.size(); i++) {
                if (bodySiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + bodySiteArray.get(i).getNodeType() + " for element: bodySite");
                }
                builder.bodySite(parseCodeableConcept("bodySite", bodySiteArray.get(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.onset(parseChoiceElement("onset", jsonNode, DateTime.class, Age.class, Period.class, Range.class, String.class));
        builder.abatement(parseChoiceElement("abatement", jsonNode, DateTime.class, Age.class, Period.class, Range.class, String.class));
        builder.recordedDate(parseDateTime("recordedDate", getJsonNode(jsonNode, "recordedDate", TextNode.class), jsonNode.get("_recordedDate"), -1));
        builder.recorder(parseReference("recorder", getJsonNode(jsonNode, "recorder", JsonNode.class), -1));
        builder.asserter(parseReference("asserter", getJsonNode(jsonNode, "asserter", JsonNode.class), -1));
        ArrayNode stageArray = getArrayNode(jsonNode, "stage");
        if (stageArray != null) {
            for (int i = 0; i < stageArray.size(); i++) {
                if (stageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + stageArray.get(i).getNodeType() + " for element: stage");
                }
                builder.stage(parseConditionStage("stage", stageArray.get(i), i));
            }
        }
        ArrayNode evidenceArray = getArrayNode(jsonNode, "evidence");
        if (evidenceArray != null) {
            for (int i = 0; i < evidenceArray.size(); i++) {
                if (evidenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + evidenceArray.get(i).getNodeType() + " for element: evidence");
                }
                builder.evidence(parseConditionEvidence("evidence", evidenceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Condition.Evidence parseConditionEvidence(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Condition.Evidence.class, jsonNode);
        }
        Condition.Evidence.Builder builder = Condition.Evidence.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseReference("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Condition.Stage parseConditionStage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Condition.Stage.class, jsonNode);
        }
        Condition.Stage.Builder builder = Condition.Stage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.summary(parseCodeableConcept("summary", getJsonNode(jsonNode, "summary", JsonNode.class), -1));
        ArrayNode assessmentArray = getArrayNode(jsonNode, "assessment");
        if (assessmentArray != null) {
            for (int i = 0; i < assessmentArray.size(); i++) {
                if (assessmentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + assessmentArray.get(i).getNodeType() + " for element: assessment");
                }
                builder.assessment(parseReference("assessment", assessmentArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Consent parseConsent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Consent.class, jsonNode);
        }
        Consent.Builder builder = Consent.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ConsentState) parseString(ConsentState.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.scope(parseCodeableConcept("scope", getJsonNode(jsonNode, "scope", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.dateTime(parseDateTime("dateTime", getJsonNode(jsonNode, "dateTime", TextNode.class), jsonNode.get("_dateTime"), -1));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseReference("performer", performerArray.get(i), i));
            }
        }
        ArrayNode organizationArray = getArrayNode(jsonNode, "organization");
        if (organizationArray != null) {
            for (int i = 0; i < organizationArray.size(); i++) {
                if (organizationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + organizationArray.get(i).getNodeType() + " for element: organization");
                }
                builder.organization(parseReference("organization", organizationArray.get(i), i));
            }
        }
        builder.source(parseChoiceElement("source", jsonNode, Attachment.class, Reference.class));
        ArrayNode policyArray = getArrayNode(jsonNode, "policy");
        if (policyArray != null) {
            for (int i = 0; i < policyArray.size(); i++) {
                if (policyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + policyArray.get(i).getNodeType() + " for element: policy");
                }
                builder.policy(parseConsentPolicy("policy", policyArray.get(i), i));
            }
        }
        builder.policyRule(parseCodeableConcept("policyRule", getJsonNode(jsonNode, "policyRule", JsonNode.class), -1));
        ArrayNode verificationArray = getArrayNode(jsonNode, "verification");
        if (verificationArray != null) {
            for (int i = 0; i < verificationArray.size(); i++) {
                if (verificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + verificationArray.get(i).getNodeType() + " for element: verification");
                }
                builder.verification(parseConsentVerification("verification", verificationArray.get(i), i));
            }
        }
        builder.provision(parseConsentProvision("provision", getJsonNode(jsonNode, "provision", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Consent.Policy parseConsentPolicy(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Consent.Policy.class, jsonNode);
        }
        Consent.Policy.Builder builder = Consent.Policy.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.authority(parseUri("authority", getJsonNode(jsonNode, "authority", TextNode.class), jsonNode.get("_authority"), -1));
        builder.uri(parseUri("uri", getJsonNode(jsonNode, "uri", TextNode.class), jsonNode.get("_uri"), -1));
        stackPop();
        return builder.build();
    }

    private Consent.Provision parseConsentProvision(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Consent.Provision.class, jsonNode);
        }
        Consent.Provision.Builder builder = Consent.Provision.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((ConsentProvisionType) parseString(ConsentProvisionType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode actorArray = getArrayNode(jsonNode, "actor");
        if (actorArray != null) {
            for (int i = 0; i < actorArray.size(); i++) {
                if (actorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actorArray.get(i).getNodeType() + " for element: actor");
                }
                builder.actor(parseConsentProvisionActor("actor", actorArray.get(i), i));
            }
        }
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseCodeableConcept("action", actionArray.get(i), i));
            }
        }
        ArrayNode securityLabelArray = getArrayNode(jsonNode, "securityLabel");
        if (securityLabelArray != null) {
            for (int i = 0; i < securityLabelArray.size(); i++) {
                if (securityLabelArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + securityLabelArray.get(i).getNodeType() + " for element: securityLabel");
                }
                builder.securityLabel(parseCoding("securityLabel", securityLabelArray.get(i), i));
            }
        }
        ArrayNode purposeArray = getArrayNode(jsonNode, "purpose");
        if (purposeArray != null) {
            for (int i = 0; i < purposeArray.size(); i++) {
                if (purposeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + purposeArray.get(i).getNodeType() + " for element: purpose");
                }
                builder.purpose(parseCoding("purpose", purposeArray.get(i), i));
            }
        }
        ArrayNode classArray = getArrayNode(jsonNode, "class");
        if (classArray != null) {
            for (int i = 0; i < classArray.size(); i++) {
                if (classArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classArray.get(i).getNodeType() + " for element: class");
                }
                builder.clazz(parseCoding("class", classArray.get(i), i));
            }
        }
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        builder.dataPeriod(parsePeriod("dataPeriod", getJsonNode(jsonNode, "dataPeriod", JsonNode.class), -1));
        ArrayNode dataArray = getArrayNode(jsonNode, "data");
        if (dataArray != null) {
            for (int i = 0; i < dataArray.size(); i++) {
                if (dataArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dataArray.get(i).getNodeType() + " for element: data");
                }
                builder.data(parseConsentProvisionData("data", dataArray.get(i), i));
            }
        }
        ArrayNode provisionArray = getArrayNode(jsonNode, "provision");
        if (provisionArray != null) {
            for (int i = 0; i < provisionArray.size(); i++) {
                if (provisionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + provisionArray.get(i).getNodeType() + " for element: provision");
                }
                builder.provision(parseConsentProvision("provision", provisionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Consent.Provision.Actor parseConsentProvisionActor(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Consent.Provision.Actor.class, jsonNode);
        }
        Consent.Provision.Actor.Builder builder = Consent.Provision.Actor.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        builder.reference(parseReference("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Consent.Provision.Data parseConsentProvisionData(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Consent.Provision.Data.class, jsonNode);
        }
        Consent.Provision.Data.Builder builder = Consent.Provision.Data.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.meaning((ConsentDataMeaning) parseString(ConsentDataMeaning.builder(), "meaning", getJsonNode(jsonNode, "meaning", TextNode.class), jsonNode.get("_meaning"), -1));
        builder.reference(parseReference("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Consent.Verification parseConsentVerification(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Consent.Verification.class, jsonNode);
        }
        Consent.Verification.Builder builder = Consent.Verification.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.verified(parseBoolean("verified", getJsonNode(jsonNode, "verified", JsonNode.class), jsonNode.get("_verified"), -1));
        builder.verifiedWith(parseReference("verifiedWith", getJsonNode(jsonNode, "verifiedWith", JsonNode.class), -1));
        builder.verificationDate(parseDateTime("verificationDate", getJsonNode(jsonNode, "verificationDate", TextNode.class), jsonNode.get("_verificationDate"), -1));
        stackPop();
        return builder.build();
    }

    private ContactDetail parseContactDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ContactDetail.class, jsonNode);
        }
        ContactDetail.Builder builder = ContactDetail.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ContactPoint parseContactPoint(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ContactPoint.class, jsonNode);
        }
        ContactPoint.Builder builder = ContactPoint.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.system((ContactPointSystem) parseString(ContactPointSystem.builder(), "system", getJsonNode(jsonNode, "system", TextNode.class), jsonNode.get("_system"), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        builder.use((ContactPointUse) parseString(ContactPointUse.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", getJsonNode(jsonNode, "rank", NumericNode.class), jsonNode.get("_rank"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Contract parseContract(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.class, jsonNode);
        }
        Contract.Builder builder = Contract.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.status((ContractStatus) parseString(ContractStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.legalState(parseCodeableConcept("legalState", getJsonNode(jsonNode, "legalState", JsonNode.class), -1));
        builder.instantiatesCanonical(parseReference("instantiatesCanonical", getJsonNode(jsonNode, "instantiatesCanonical", JsonNode.class), -1));
        builder.instantiatesUri(parseUri("instantiatesUri", getJsonNode(jsonNode, "instantiatesUri", TextNode.class), jsonNode.get("_instantiatesUri"), -1));
        builder.contentDerivative(parseCodeableConcept("contentDerivative", getJsonNode(jsonNode, "contentDerivative", JsonNode.class), -1));
        builder.issued(parseDateTime("issued", getJsonNode(jsonNode, "issued", TextNode.class), jsonNode.get("_issued"), -1));
        builder.applies(parsePeriod("applies", getJsonNode(jsonNode, "applies", JsonNode.class), -1));
        builder.expirationType(parseCodeableConcept("expirationType", getJsonNode(jsonNode, "expirationType", JsonNode.class), -1));
        ArrayNode subjectArray = getArrayNode(jsonNode, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                if (subjectArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subjectArray.get(i).getNodeType() + " for element: subject");
                }
                builder.subject(parseReference("subject", subjectArray.get(i), i));
            }
        }
        ArrayNode authorityArray = getArrayNode(jsonNode, "authority");
        if (authorityArray != null) {
            for (int i = 0; i < authorityArray.size(); i++) {
                if (authorityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorityArray.get(i).getNodeType() + " for element: authority");
                }
                builder.authority(parseReference("authority", authorityArray.get(i), i));
            }
        }
        ArrayNode domainArray = getArrayNode(jsonNode, "domain");
        if (domainArray != null) {
            for (int i = 0; i < domainArray.size(); i++) {
                if (domainArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + domainArray.get(i).getNodeType() + " for element: domain");
                }
                builder.domain(parseReference("domain", domainArray.get(i), i));
            }
        }
        ArrayNode siteArray = getArrayNode(jsonNode, "site");
        if (siteArray != null) {
            for (int i = 0; i < siteArray.size(); i++) {
                if (siteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + siteArray.get(i).getNodeType() + " for element: site");
                }
                builder.site(parseReference("site", siteArray.get(i), i));
            }
        }
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        ArrayNode aliasArray = getArrayNode(jsonNode, "alias", true);
        if (aliasArray != null) {
            ArrayNode _aliasArray = getArrayNode(jsonNode, "_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonNode(_aliasArray, i), i));
            }
        }
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        builder.scope(parseCodeableConcept("scope", getJsonNode(jsonNode, "scope", JsonNode.class), -1));
        builder.topic(parseChoiceElement("topic", jsonNode, CodeableConcept.class, Reference.class));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode subTypeArray = getArrayNode(jsonNode, "subType");
        if (subTypeArray != null) {
            for (int i = 0; i < subTypeArray.size(); i++) {
                if (subTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subTypeArray.get(i).getNodeType() + " for element: subType");
                }
                builder.subType(parseCodeableConcept("subType", subTypeArray.get(i), i));
            }
        }
        builder.contentDefinition(parseContractContentDefinition("contentDefinition", getJsonNode(jsonNode, "contentDefinition", JsonNode.class), -1));
        ArrayNode termArray = getArrayNode(jsonNode, "term");
        if (termArray != null) {
            for (int i = 0; i < termArray.size(); i++) {
                if (termArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + termArray.get(i).getNodeType() + " for element: term");
                }
                builder.term(parseContractTerm("term", termArray.get(i), i));
            }
        }
        ArrayNode supportingInfoArray = getArrayNode(jsonNode, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                if (supportingInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInfoArray.get(i).getNodeType() + " for element: supportingInfo");
                }
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.get(i), i));
            }
        }
        ArrayNode relevantHistoryArray = getArrayNode(jsonNode, "relevantHistory");
        if (relevantHistoryArray != null) {
            for (int i = 0; i < relevantHistoryArray.size(); i++) {
                if (relevantHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relevantHistoryArray.get(i).getNodeType() + " for element: relevantHistory");
                }
                builder.relevantHistory(parseReference("relevantHistory", relevantHistoryArray.get(i), i));
            }
        }
        ArrayNode signerArray = getArrayNode(jsonNode, "signer");
        if (signerArray != null) {
            for (int i = 0; i < signerArray.size(); i++) {
                if (signerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + signerArray.get(i).getNodeType() + " for element: signer");
                }
                builder.signer(parseContractSigner("signer", signerArray.get(i), i));
            }
        }
        ArrayNode friendlyArray = getArrayNode(jsonNode, "friendly");
        if (friendlyArray != null) {
            for (int i = 0; i < friendlyArray.size(); i++) {
                if (friendlyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + friendlyArray.get(i).getNodeType() + " for element: friendly");
                }
                builder.friendly(parseContractFriendly("friendly", friendlyArray.get(i), i));
            }
        }
        ArrayNode legalArray = getArrayNode(jsonNode, "legal");
        if (legalArray != null) {
            for (int i = 0; i < legalArray.size(); i++) {
                if (legalArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + legalArray.get(i).getNodeType() + " for element: legal");
                }
                builder.legal(parseContractLegal("legal", legalArray.get(i), i));
            }
        }
        ArrayNode ruleArray = getArrayNode(jsonNode, "rule");
        if (ruleArray != null) {
            for (int i = 0; i < ruleArray.size(); i++) {
                if (ruleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ruleArray.get(i).getNodeType() + " for element: rule");
                }
                builder.rule(parseContractRule("rule", ruleArray.get(i), i));
            }
        }
        builder.legallyBinding(parseChoiceElement("legallyBinding", jsonNode, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.ContentDefinition parseContractContentDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.ContentDefinition.class, jsonNode);
        }
        Contract.ContentDefinition.Builder builder = Contract.ContentDefinition.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonNode(jsonNode, "subType", JsonNode.class), -1));
        builder.publisher(parseReference("publisher", getJsonNode(jsonNode, "publisher", JsonNode.class), -1));
        builder.publicationDate(parseDateTime("publicationDate", getJsonNode(jsonNode, "publicationDate", TextNode.class), jsonNode.get("_publicationDate"), -1));
        builder.publicationStatus((ContractPublicationStatus) parseString(ContractPublicationStatus.builder(), "publicationStatus", getJsonNode(jsonNode, "publicationStatus", TextNode.class), jsonNode.get("_publicationStatus"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        stackPop();
        return builder.build();
    }

    private Contract.Friendly parseContractFriendly(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Friendly.class, jsonNode);
        }
        Contract.Friendly.Builder builder = Contract.Friendly.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.content(parseChoiceElement("content", jsonNode, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.Legal parseContractLegal(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Legal.class, jsonNode);
        }
        Contract.Legal.Builder builder = Contract.Legal.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.content(parseChoiceElement("content", jsonNode, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.Rule parseContractRule(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Rule.class, jsonNode);
        }
        Contract.Rule.Builder builder = Contract.Rule.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.content(parseChoiceElement("content", jsonNode, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.Signer parseContractSigner(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Signer.class, jsonNode);
        }
        Contract.Signer.Builder builder = Contract.Signer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCoding("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.party(parseReference("party", getJsonNode(jsonNode, "party", JsonNode.class), -1));
        ArrayNode signatureArray = getArrayNode(jsonNode, "signature");
        if (signatureArray != null) {
            for (int i = 0; i < signatureArray.size(); i++) {
                if (signatureArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + signatureArray.get(i).getNodeType() + " for element: signature");
                }
                builder.signature(parseSignature("signature", signatureArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term parseContractTerm(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.class, jsonNode);
        }
        Contract.Term.Builder builder = Contract.Term.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.issued(parseDateTime("issued", getJsonNode(jsonNode, "issued", TextNode.class), jsonNode.get("_issued"), -1));
        builder.applies(parsePeriod("applies", getJsonNode(jsonNode, "applies", JsonNode.class), -1));
        builder.topic(parseChoiceElement("topic", jsonNode, CodeableConcept.class, Reference.class));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonNode(jsonNode, "subType", JsonNode.class), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        ArrayNode securityLabelArray = getArrayNode(jsonNode, "securityLabel");
        if (securityLabelArray != null) {
            for (int i = 0; i < securityLabelArray.size(); i++) {
                if (securityLabelArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + securityLabelArray.get(i).getNodeType() + " for element: securityLabel");
                }
                builder.securityLabel(parseContractTermSecurityLabel("securityLabel", securityLabelArray.get(i), i));
            }
        }
        builder.offer(parseContractTermOffer("offer", getJsonNode(jsonNode, "offer", JsonNode.class), -1));
        ArrayNode assetArray = getArrayNode(jsonNode, "asset");
        if (assetArray != null) {
            for (int i = 0; i < assetArray.size(); i++) {
                if (assetArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + assetArray.get(i).getNodeType() + " for element: asset");
                }
                builder.asset(parseContractTermAsset("asset", assetArray.get(i), i));
            }
        }
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseContractTermAction("action", actionArray.get(i), i));
            }
        }
        ArrayNode groupArray = getArrayNode(jsonNode, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                if (groupArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + groupArray.get(i).getNodeType() + " for element: group");
                }
                builder.group(parseContractTerm("group", groupArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Action parseContractTermAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.Action.class, jsonNode);
        }
        Contract.Term.Action.Builder builder = Contract.Term.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonNode(jsonNode, "doNotPerform", JsonNode.class), jsonNode.get("_doNotPerform"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode subjectArray = getArrayNode(jsonNode, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                if (subjectArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subjectArray.get(i).getNodeType() + " for element: subject");
                }
                builder.subject(parseContractTermActionSubject("subject", subjectArray.get(i), i));
            }
        }
        builder.intent(parseCodeableConcept("intent", getJsonNode(jsonNode, "intent", JsonNode.class), -1));
        ArrayNode linkIdArray = getArrayNode(jsonNode, "linkId", true);
        if (linkIdArray != null) {
            ArrayNode _linkIdArray = getArrayNode(jsonNode, "_linkId");
            for (int i = 0; i < linkIdArray.size(); i++) {
                builder.linkId(parseString("linkId", linkIdArray.get(i), getJsonNode(_linkIdArray, i), i));
            }
        }
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.context(parseReference("context", getJsonNode(jsonNode, "context", JsonNode.class), -1));
        ArrayNode contextLinkIdArray = getArrayNode(jsonNode, "contextLinkId", true);
        if (contextLinkIdArray != null) {
            ArrayNode _contextLinkIdArray = getArrayNode(jsonNode, "_contextLinkId");
            for (int i = 0; i < contextLinkIdArray.size(); i++) {
                builder.contextLinkId(parseString("contextLinkId", contextLinkIdArray.get(i), getJsonNode(_contextLinkIdArray, i), i));
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, Period.class, Timing.class));
        ArrayNode requesterArray = getArrayNode(jsonNode, "requester");
        if (requesterArray != null) {
            for (int i = 0; i < requesterArray.size(); i++) {
                if (requesterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + requesterArray.get(i).getNodeType() + " for element: requester");
                }
                builder.requester(parseReference("requester", requesterArray.get(i), i));
            }
        }
        ArrayNode requesterLinkIdArray = getArrayNode(jsonNode, "requesterLinkId", true);
        if (requesterLinkIdArray != null) {
            ArrayNode _requesterLinkIdArray = getArrayNode(jsonNode, "_requesterLinkId");
            for (int i = 0; i < requesterLinkIdArray.size(); i++) {
                builder.requesterLinkId(parseString("requesterLinkId", requesterLinkIdArray.get(i), getJsonNode(_requesterLinkIdArray, i), i));
            }
        }
        ArrayNode performerTypeArray = getArrayNode(jsonNode, "performerType");
        if (performerTypeArray != null) {
            for (int i = 0; i < performerTypeArray.size(); i++) {
                if (performerTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerTypeArray.get(i).getNodeType() + " for element: performerType");
                }
                builder.performerType(parseCodeableConcept("performerType", performerTypeArray.get(i), i));
            }
        }
        builder.performerRole(parseCodeableConcept("performerRole", getJsonNode(jsonNode, "performerRole", JsonNode.class), -1));
        builder.performer(parseReference("performer", getJsonNode(jsonNode, "performer", JsonNode.class), -1));
        ArrayNode performerLinkIdArray = getArrayNode(jsonNode, "performerLinkId", true);
        if (performerLinkIdArray != null) {
            ArrayNode _performerLinkIdArray = getArrayNode(jsonNode, "_performerLinkId");
            for (int i = 0; i < performerLinkIdArray.size(); i++) {
                builder.performerLinkId(parseString("performerLinkId", performerLinkIdArray.get(i), getJsonNode(_performerLinkIdArray, i), i));
            }
        }
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode reasonArray = getArrayNode(jsonNode, "reason", true);
        if (reasonArray != null) {
            ArrayNode _reasonArray = getArrayNode(jsonNode, "_reason");
            for (int i = 0; i < reasonArray.size(); i++) {
                builder.reason(parseString("reason", reasonArray.get(i), getJsonNode(_reasonArray, i), i));
            }
        }
        ArrayNode reasonLinkIdArray = getArrayNode(jsonNode, "reasonLinkId", true);
        if (reasonLinkIdArray != null) {
            ArrayNode _reasonLinkIdArray = getArrayNode(jsonNode, "_reasonLinkId");
            for (int i = 0; i < reasonLinkIdArray.size(); i++) {
                builder.reasonLinkId(parseString("reasonLinkId", reasonLinkIdArray.get(i), getJsonNode(_reasonLinkIdArray, i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode securityLabelNumberArray = getArrayNode(jsonNode, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            ArrayNode _securityLabelNumberArray = getArrayNode(jsonNode, "_securityLabelNumber");
            for (int i = 0; i < securityLabelNumberArray.size(); i++) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", securityLabelNumberArray.get(i), getJsonNode(_securityLabelNumberArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Action.Subject parseContractTermActionSubject(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.Action.Subject.class, jsonNode);
        }
        Contract.Term.Action.Subject.Builder builder = Contract.Term.Action.Subject.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode referenceArray = getArrayNode(jsonNode, "reference");
        if (referenceArray != null) {
            for (int i = 0; i < referenceArray.size(); i++) {
                if (referenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referenceArray.get(i).getNodeType() + " for element: reference");
                }
                builder.reference(parseReference("reference", referenceArray.get(i), i));
            }
        }
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Contract.Term.Asset parseContractTermAsset(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.Asset.class, jsonNode);
        }
        Contract.Term.Asset.Builder builder = Contract.Term.Asset.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.scope(parseCodeableConcept("scope", getJsonNode(jsonNode, "scope", JsonNode.class), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        ArrayNode typeReferenceArray = getArrayNode(jsonNode, "typeReference");
        if (typeReferenceArray != null) {
            for (int i = 0; i < typeReferenceArray.size(); i++) {
                if (typeReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeReferenceArray.get(i).getNodeType() + " for element: typeReference");
                }
                builder.typeReference(parseReference("typeReference", typeReferenceArray.get(i), i));
            }
        }
        ArrayNode subtypeArray = getArrayNode(jsonNode, "subtype");
        if (subtypeArray != null) {
            for (int i = 0; i < subtypeArray.size(); i++) {
                if (subtypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subtypeArray.get(i).getNodeType() + " for element: subtype");
                }
                builder.subtype(parseCodeableConcept("subtype", subtypeArray.get(i), i));
            }
        }
        builder.relationship(parseCoding("relationship", getJsonNode(jsonNode, "relationship", JsonNode.class), -1));
        ArrayNode contextArray = getArrayNode(jsonNode, "context");
        if (contextArray != null) {
            for (int i = 0; i < contextArray.size(); i++) {
                if (contextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contextArray.get(i).getNodeType() + " for element: context");
                }
                builder.context(parseContractTermAssetContext("context", contextArray.get(i), i));
            }
        }
        builder.condition(parseString("condition", getJsonNode(jsonNode, "condition", TextNode.class), jsonNode.get("_condition"), -1));
        ArrayNode periodTypeArray = getArrayNode(jsonNode, "periodType");
        if (periodTypeArray != null) {
            for (int i = 0; i < periodTypeArray.size(); i++) {
                if (periodTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + periodTypeArray.get(i).getNodeType() + " for element: periodType");
                }
                builder.periodType(parseCodeableConcept("periodType", periodTypeArray.get(i), i));
            }
        }
        ArrayNode periodArray = getArrayNode(jsonNode, "period");
        if (periodArray != null) {
            for (int i = 0; i < periodArray.size(); i++) {
                if (periodArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + periodArray.get(i).getNodeType() + " for element: period");
                }
                builder.period(parsePeriod("period", periodArray.get(i), i));
            }
        }
        ArrayNode usePeriodArray = getArrayNode(jsonNode, "usePeriod");
        if (usePeriodArray != null) {
            for (int i = 0; i < usePeriodArray.size(); i++) {
                if (usePeriodArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + usePeriodArray.get(i).getNodeType() + " for element: usePeriod");
                }
                builder.usePeriod(parsePeriod("usePeriod", usePeriodArray.get(i), i));
            }
        }
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        ArrayNode linkIdArray = getArrayNode(jsonNode, "linkId", true);
        if (linkIdArray != null) {
            ArrayNode _linkIdArray = getArrayNode(jsonNode, "_linkId");
            for (int i = 0; i < linkIdArray.size(); i++) {
                builder.linkId(parseString("linkId", linkIdArray.get(i), getJsonNode(_linkIdArray, i), i));
            }
        }
        ArrayNode answerArray = getArrayNode(jsonNode, "answer");
        if (answerArray != null) {
            for (int i = 0; i < answerArray.size(); i++) {
                if (answerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + answerArray.get(i).getNodeType() + " for element: answer");
                }
                builder.answer(parseContractTermOfferAnswer("answer", answerArray.get(i), i));
            }
        }
        ArrayNode securityLabelNumberArray = getArrayNode(jsonNode, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            ArrayNode _securityLabelNumberArray = getArrayNode(jsonNode, "_securityLabelNumber");
            for (int i = 0; i < securityLabelNumberArray.size(); i++) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", securityLabelNumberArray.get(i), getJsonNode(_securityLabelNumberArray, i), i));
            }
        }
        ArrayNode valuedItemArray = getArrayNode(jsonNode, "valuedItem");
        if (valuedItemArray != null) {
            for (int i = 0; i < valuedItemArray.size(); i++) {
                if (valuedItemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + valuedItemArray.get(i).getNodeType() + " for element: valuedItem");
                }
                builder.valuedItem(parseContractTermAssetValuedItem("valuedItem", valuedItemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Asset.Context parseContractTermAssetContext(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.Asset.Context.class, jsonNode);
        }
        Contract.Term.Asset.Context.Builder builder = Contract.Term.Asset.Context.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.reference(parseReference("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Contract.Term.Asset.ValuedItem parseContractTermAssetValuedItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.Asset.ValuedItem.class, jsonNode);
        }
        Contract.Term.Asset.ValuedItem.Builder builder = Contract.Term.Asset.ValuedItem.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.entity(parseChoiceElement("entity", jsonNode, CodeableConcept.class, Reference.class));
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.effectiveTime(parseDateTime("effectiveTime", getJsonNode(jsonNode, "effectiveTime", TextNode.class), jsonNode.get("_effectiveTime"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.points(parseDecimal("points", getJsonNode(jsonNode, "points", NumericNode.class), jsonNode.get("_points"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        builder.payment(parseString("payment", getJsonNode(jsonNode, "payment", TextNode.class), jsonNode.get("_payment"), -1));
        builder.paymentDate(parseDateTime("paymentDate", getJsonNode(jsonNode, "paymentDate", TextNode.class), jsonNode.get("_paymentDate"), -1));
        builder.responsible(parseReference("responsible", getJsonNode(jsonNode, "responsible", JsonNode.class), -1));
        builder.recipient(parseReference("recipient", getJsonNode(jsonNode, "recipient", JsonNode.class), -1));
        ArrayNode linkIdArray = getArrayNode(jsonNode, "linkId", true);
        if (linkIdArray != null) {
            ArrayNode _linkIdArray = getArrayNode(jsonNode, "_linkId");
            for (int i = 0; i < linkIdArray.size(); i++) {
                builder.linkId(parseString("linkId", linkIdArray.get(i), getJsonNode(_linkIdArray, i), i));
            }
        }
        ArrayNode securityLabelNumberArray = getArrayNode(jsonNode, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            ArrayNode _securityLabelNumberArray = getArrayNode(jsonNode, "_securityLabelNumber");
            for (int i = 0; i < securityLabelNumberArray.size(); i++) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", securityLabelNumberArray.get(i), getJsonNode(_securityLabelNumberArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Offer parseContractTermOffer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.Offer.class, jsonNode);
        }
        Contract.Term.Offer.Builder builder = Contract.Term.Offer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode partyArray = getArrayNode(jsonNode, "party");
        if (partyArray != null) {
            for (int i = 0; i < partyArray.size(); i++) {
                if (partyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partyArray.get(i).getNodeType() + " for element: party");
                }
                builder.party(parseContractTermOfferParty("party", partyArray.get(i), i));
            }
        }
        builder.topic(parseReference("topic", getJsonNode(jsonNode, "topic", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.decision(parseCodeableConcept("decision", getJsonNode(jsonNode, "decision", JsonNode.class), -1));
        ArrayNode decisionModeArray = getArrayNode(jsonNode, "decisionMode");
        if (decisionModeArray != null) {
            for (int i = 0; i < decisionModeArray.size(); i++) {
                if (decisionModeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + decisionModeArray.get(i).getNodeType() + " for element: decisionMode");
                }
                builder.decisionMode(parseCodeableConcept("decisionMode", decisionModeArray.get(i), i));
            }
        }
        ArrayNode answerArray = getArrayNode(jsonNode, "answer");
        if (answerArray != null) {
            for (int i = 0; i < answerArray.size(); i++) {
                if (answerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + answerArray.get(i).getNodeType() + " for element: answer");
                }
                builder.answer(parseContractTermOfferAnswer("answer", answerArray.get(i), i));
            }
        }
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        ArrayNode linkIdArray = getArrayNode(jsonNode, "linkId", true);
        if (linkIdArray != null) {
            ArrayNode _linkIdArray = getArrayNode(jsonNode, "_linkId");
            for (int i = 0; i < linkIdArray.size(); i++) {
                builder.linkId(parseString("linkId", linkIdArray.get(i), getJsonNode(_linkIdArray, i), i));
            }
        }
        ArrayNode securityLabelNumberArray = getArrayNode(jsonNode, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            ArrayNode _securityLabelNumberArray = getArrayNode(jsonNode, "_securityLabelNumber");
            for (int i = 0; i < securityLabelNumberArray.size(); i++) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", securityLabelNumberArray.get(i), getJsonNode(_securityLabelNumberArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Offer.Answer parseContractTermOfferAnswer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.Offer.Answer.class, jsonNode);
        }
        Contract.Term.Offer.Answer.Builder builder = Contract.Term.Offer.Answer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.value(parseChoiceElement("value", jsonNode, Boolean.class, Decimal.class, Integer.class, Date.class, DateTime.class, Time.class, String.class, Uri.class, Attachment.class, Coding.class, Quantity.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.Term.Offer.Party parseContractTermOfferParty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.Offer.Party.class, jsonNode);
        }
        Contract.Term.Offer.Party.Builder builder = Contract.Term.Offer.Party.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode referenceArray = getArrayNode(jsonNode, "reference");
        if (referenceArray != null) {
            for (int i = 0; i < referenceArray.size(); i++) {
                if (referenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referenceArray.get(i).getNodeType() + " for element: reference");
                }
                builder.reference(parseReference("reference", referenceArray.get(i), i));
            }
        }
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Contract.Term.SecurityLabel parseContractTermSecurityLabel(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contract.Term.SecurityLabel.class, jsonNode);
        }
        Contract.Term.SecurityLabel.Builder builder = Contract.Term.SecurityLabel.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode numberArray = getArrayNode(jsonNode, "number", true);
        if (numberArray != null) {
            ArrayNode _numberArray = getArrayNode(jsonNode, "_number");
            for (int i = 0; i < numberArray.size(); i++) {
                builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", numberArray.get(i), getJsonNode(_numberArray, i), i));
            }
        }
        builder.classification(parseCoding("classification", getJsonNode(jsonNode, "classification", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCoding("category", categoryArray.get(i), i));
            }
        }
        ArrayNode controlArray = getArrayNode(jsonNode, "control");
        if (controlArray != null) {
            for (int i = 0; i < controlArray.size(); i++) {
                if (controlArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + controlArray.get(i).getNodeType() + " for element: control");
                }
                builder.control(parseCoding("control", controlArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contributor parseContributor(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Contributor.class, jsonNode);
        }
        Contributor.Builder builder = Contributor.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.type((ContributorType) parseString(ContributorType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Coverage parseCoverage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Coverage.class, jsonNode);
        }
        Coverage.Builder builder = Coverage.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((CoverageStatus) parseString(CoverageStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.policyHolder(parseReference("policyHolder", getJsonNode(jsonNode, "policyHolder", JsonNode.class), -1));
        builder.subscriber(parseReference("subscriber", getJsonNode(jsonNode, "subscriber", JsonNode.class), -1));
        builder.subscriberId(parseString("subscriberId", getJsonNode(jsonNode, "subscriberId", TextNode.class), jsonNode.get("_subscriberId"), -1));
        builder.beneficiary(parseReference("beneficiary", getJsonNode(jsonNode, "beneficiary", JsonNode.class), -1));
        builder.dependent(parseString("dependent", getJsonNode(jsonNode, "dependent", TextNode.class), jsonNode.get("_dependent"), -1));
        builder.relationship(parseCodeableConcept("relationship", getJsonNode(jsonNode, "relationship", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode payorArray = getArrayNode(jsonNode, "payor");
        if (payorArray != null) {
            for (int i = 0; i < payorArray.size(); i++) {
                if (payorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + payorArray.get(i).getNodeType() + " for element: payor");
                }
                builder.payor(parseReference("payor", payorArray.get(i), i));
            }
        }
        ArrayNode classArray = getArrayNode(jsonNode, "class");
        if (classArray != null) {
            for (int i = 0; i < classArray.size(); i++) {
                if (classArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classArray.get(i).getNodeType() + " for element: class");
                }
                builder.clazz(parseCoverageClass("class", classArray.get(i), i));
            }
        }
        builder.order((PositiveInt) parseInteger(PositiveInt.builder(), "order", getJsonNode(jsonNode, "order", NumericNode.class), jsonNode.get("_order"), -1));
        builder.network(parseString("network", getJsonNode(jsonNode, "network", TextNode.class), jsonNode.get("_network"), -1));
        ArrayNode costToBeneficiaryArray = getArrayNode(jsonNode, "costToBeneficiary");
        if (costToBeneficiaryArray != null) {
            for (int i = 0; i < costToBeneficiaryArray.size(); i++) {
                if (costToBeneficiaryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + costToBeneficiaryArray.get(i).getNodeType() + " for element: costToBeneficiary");
                }
                builder.costToBeneficiary(parseCoverageCostToBeneficiary("costToBeneficiary", costToBeneficiaryArray.get(i), i));
            }
        }
        builder.subrogation(parseBoolean("subrogation", getJsonNode(jsonNode, "subrogation", JsonNode.class), jsonNode.get("_subrogation"), -1));
        ArrayNode contractArray = getArrayNode(jsonNode, "contract");
        if (contractArray != null) {
            for (int i = 0; i < contractArray.size(); i++) {
                if (contractArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contractArray.get(i).getNodeType() + " for element: contract");
                }
                builder.contract(parseReference("contract", contractArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Coverage.Class parseCoverageClass(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Coverage.Class.class, jsonNode);
        }
        Coverage.Class.Builder builder = Coverage.Class.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        stackPop();
        return builder.build();
    }

    private Coverage.CostToBeneficiary parseCoverageCostToBeneficiary(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Coverage.CostToBeneficiary.class, jsonNode);
        }
        Coverage.CostToBeneficiary.Builder builder = Coverage.CostToBeneficiary.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, SimpleQuantity.class, Money.class));
        ArrayNode exceptionArray = getArrayNode(jsonNode, "exception");
        if (exceptionArray != null) {
            for (int i = 0; i < exceptionArray.size(); i++) {
                if (exceptionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + exceptionArray.get(i).getNodeType() + " for element: exception");
                }
                builder.exception(parseCoverageCostToBeneficiaryException("exception", exceptionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Coverage.CostToBeneficiary.Exception parseCoverageCostToBeneficiaryException(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Coverage.CostToBeneficiary.Exception.class, jsonNode);
        }
        Coverage.CostToBeneficiary.Exception.Builder builder = Coverage.CostToBeneficiary.Exception.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest parseCoverageEligibilityRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.class, jsonNode);
        }
        CoverageEligibilityRequest.Builder builder = CoverageEligibilityRequest.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((EligibilityRequestStatus) parseString(EligibilityRequestStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.priority(parseCodeableConcept("priority", getJsonNode(jsonNode, "priority", JsonNode.class), -1));
        ArrayNode purposeArray = getArrayNode(jsonNode, "purpose", true);
        if (purposeArray != null) {
            ArrayNode _purposeArray = getArrayNode(jsonNode, "_purpose");
            for (int i = 0; i < purposeArray.size(); i++) {
                builder.purpose((EligibilityRequestPurpose) parseString(EligibilityRequestPurpose.builder(), "purpose", purposeArray.get(i), getJsonNode(_purposeArray, i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.serviced(parseChoiceElement("serviced", jsonNode, Date.class, Period.class));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.enterer(parseReference("enterer", getJsonNode(jsonNode, "enterer", JsonNode.class), -1));
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.insurer(parseReference("insurer", getJsonNode(jsonNode, "insurer", JsonNode.class), -1));
        builder.facility(parseReference("facility", getJsonNode(jsonNode, "facility", JsonNode.class), -1));
        ArrayNode supportingInfoArray = getArrayNode(jsonNode, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                if (supportingInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInfoArray.get(i).getNodeType() + " for element: supportingInfo");
                }
                builder.supportingInfo(parseCoverageEligibilityRequestSupportingInfo("supportingInfo", supportingInfoArray.get(i), i));
            }
        }
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseCoverageEligibilityRequestInsurance("insurance", insuranceArray.get(i), i));
            }
        }
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseCoverageEligibilityRequestItem("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest.Insurance parseCoverageEligibilityRequestInsurance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.Insurance.class, jsonNode);
        }
        CoverageEligibilityRequest.Insurance.Builder builder = CoverageEligibilityRequest.Insurance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.focal(parseBoolean("focal", getJsonNode(jsonNode, "focal", JsonNode.class), jsonNode.get("_focal"), -1));
        builder.coverage(parseReference("coverage", getJsonNode(jsonNode, "coverage", JsonNode.class), -1));
        builder.businessArrangement(parseString("businessArrangement", getJsonNode(jsonNode, "businessArrangement", TextNode.class), jsonNode.get("_businessArrangement"), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest.Item parseCoverageEligibilityRequestItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.Item.class, jsonNode);
        }
        CoverageEligibilityRequest.Item.Builder builder = CoverageEligibilityRequest.Item.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode supportingInfoSequenceArray = getArrayNode(jsonNode, "supportingInfoSequence", true);
        if (supportingInfoSequenceArray != null) {
            ArrayNode _supportingInfoSequenceArray = getArrayNode(jsonNode, "_supportingInfoSequence");
            for (int i = 0; i < supportingInfoSequenceArray.size(); i++) {
                builder.supportingInfoSequence((PositiveInt) parseInteger(PositiveInt.builder(), "supportingInfoSequence", supportingInfoSequenceArray.get(i), getJsonNode(_supportingInfoSequenceArray, i), i));
            }
        }
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.facility(parseReference("facility", getJsonNode(jsonNode, "facility", JsonNode.class), -1));
        ArrayNode diagnosisArray = getArrayNode(jsonNode, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                if (diagnosisArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + diagnosisArray.get(i).getNodeType() + " for element: diagnosis");
                }
                builder.diagnosis(parseCoverageEligibilityRequestItemDiagnosis("diagnosis", diagnosisArray.get(i), i));
            }
        }
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseReference("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest.Item.Diagnosis parseCoverageEligibilityRequestItemDiagnosis(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.Item.Diagnosis.class, jsonNode);
        }
        CoverageEligibilityRequest.Item.Diagnosis.Builder builder = CoverageEligibilityRequest.Item.Diagnosis.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.diagnosis(parseChoiceElement("diagnosis", jsonNode, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest.SupportingInfo parseCoverageEligibilityRequestSupportingInfo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.SupportingInfo.class, jsonNode);
        }
        CoverageEligibilityRequest.SupportingInfo.Builder builder = CoverageEligibilityRequest.SupportingInfo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.information(parseReference("information", getJsonNode(jsonNode, "information", JsonNode.class), -1));
        builder.appliesToAll(parseBoolean("appliesToAll", getJsonNode(jsonNode, "appliesToAll", JsonNode.class), jsonNode.get("_appliesToAll"), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse parseCoverageEligibilityResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.class, jsonNode);
        }
        CoverageEligibilityResponse.Builder builder = CoverageEligibilityResponse.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((EligibilityResponseStatus) parseString(EligibilityResponseStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode purposeArray = getArrayNode(jsonNode, "purpose", true);
        if (purposeArray != null) {
            ArrayNode _purposeArray = getArrayNode(jsonNode, "_purpose");
            for (int i = 0; i < purposeArray.size(); i++) {
                builder.purpose((EligibilityResponsePurpose) parseString(EligibilityResponsePurpose.builder(), "purpose", purposeArray.get(i), getJsonNode(_purposeArray, i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.serviced(parseChoiceElement("serviced", jsonNode, Date.class, Period.class));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.requestor(parseReference("requestor", getJsonNode(jsonNode, "requestor", JsonNode.class), -1));
        builder.request(parseReference("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonNode(jsonNode, "outcome", TextNode.class), jsonNode.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonNode(jsonNode, "disposition", TextNode.class), jsonNode.get("_disposition"), -1));
        builder.insurer(parseReference("insurer", getJsonNode(jsonNode, "insurer", JsonNode.class), -1));
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseCoverageEligibilityResponseInsurance("insurance", insuranceArray.get(i), i));
            }
        }
        builder.preAuthRef(parseString("preAuthRef", getJsonNode(jsonNode, "preAuthRef", TextNode.class), jsonNode.get("_preAuthRef"), -1));
        builder.form(parseCodeableConcept("form", getJsonNode(jsonNode, "form", JsonNode.class), -1));
        ArrayNode errorArray = getArrayNode(jsonNode, "error");
        if (errorArray != null) {
            for (int i = 0; i < errorArray.size(); i++) {
                if (errorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + errorArray.get(i).getNodeType() + " for element: error");
                }
                builder.error(parseCoverageEligibilityResponseError("error", errorArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse.Error parseCoverageEligibilityResponseError(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.Error.class, jsonNode);
        }
        CoverageEligibilityResponse.Error.Builder builder = CoverageEligibilityResponse.Error.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse.Insurance parseCoverageEligibilityResponseInsurance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.Insurance.class, jsonNode);
        }
        CoverageEligibilityResponse.Insurance.Builder builder = CoverageEligibilityResponse.Insurance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.coverage(parseReference("coverage", getJsonNode(jsonNode, "coverage", JsonNode.class), -1));
        builder.inforce(parseBoolean("inforce", getJsonNode(jsonNode, "inforce", JsonNode.class), jsonNode.get("_inforce"), -1));
        builder.benefitPeriod(parsePeriod("benefitPeriod", getJsonNode(jsonNode, "benefitPeriod", JsonNode.class), -1));
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseCoverageEligibilityResponseInsuranceItem("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse.Insurance.Item parseCoverageEligibilityResponseInsuranceItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.Insurance.Item.class, jsonNode);
        }
        CoverageEligibilityResponse.Insurance.Item.Builder builder = CoverageEligibilityResponse.Insurance.Item.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.excluded(parseBoolean("excluded", getJsonNode(jsonNode, "excluded", JsonNode.class), jsonNode.get("_excluded"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.network(parseCodeableConcept("network", getJsonNode(jsonNode, "network", JsonNode.class), -1));
        builder.unit(parseCodeableConcept("unit", getJsonNode(jsonNode, "unit", JsonNode.class), -1));
        builder.term(parseCodeableConcept("term", getJsonNode(jsonNode, "term", JsonNode.class), -1));
        ArrayNode benefitArray = getArrayNode(jsonNode, "benefit");
        if (benefitArray != null) {
            for (int i = 0; i < benefitArray.size(); i++) {
                if (benefitArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + benefitArray.get(i).getNodeType() + " for element: benefit");
                }
                builder.benefit(parseCoverageEligibilityResponseInsuranceItemBenefit("benefit", benefitArray.get(i), i));
            }
        }
        builder.authorizationRequired(parseBoolean("authorizationRequired", getJsonNode(jsonNode, "authorizationRequired", JsonNode.class), jsonNode.get("_authorizationRequired"), -1));
        ArrayNode authorizationSupportingArray = getArrayNode(jsonNode, "authorizationSupporting");
        if (authorizationSupportingArray != null) {
            for (int i = 0; i < authorizationSupportingArray.size(); i++) {
                if (authorizationSupportingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorizationSupportingArray.get(i).getNodeType() + " for element: authorizationSupporting");
                }
                builder.authorizationSupporting(parseCodeableConcept("authorizationSupporting", authorizationSupportingArray.get(i), i));
            }
        }
        builder.authorizationUrl(parseUri("authorizationUrl", getJsonNode(jsonNode, "authorizationUrl", TextNode.class), jsonNode.get("_authorizationUrl"), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse.Insurance.Item.Benefit parseCoverageEligibilityResponseInsuranceItemBenefit(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.Insurance.Item.Benefit.class, jsonNode);
        }
        CoverageEligibilityResponse.Insurance.Item.Benefit.Builder builder = CoverageEligibilityResponse.Insurance.Item.Benefit.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.allowed(parseChoiceElement("allowed", jsonNode, UnsignedInt.class, String.class, Money.class));
        builder.used(parseChoiceElement("used", jsonNode, UnsignedInt.class, String.class, Money.class));
        stackPop();
        return builder.build();
    }

    private DataRequirement parseDataRequirement(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DataRequirement.class, jsonNode);
        }
        DataRequirement.Builder builder = DataRequirement.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        ArrayNode profileArray = getArrayNode(jsonNode, "profile", true);
        if (profileArray != null) {
            ArrayNode _profileArray = getArrayNode(jsonNode, "_profile");
            for (int i = 0; i < profileArray.size(); i++) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", profileArray.get(i), getJsonNode(_profileArray, i), i));
            }
        }
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class));
        ArrayNode mustSupportArray = getArrayNode(jsonNode, "mustSupport", true);
        if (mustSupportArray != null) {
            ArrayNode _mustSupportArray = getArrayNode(jsonNode, "_mustSupport");
            for (int i = 0; i < mustSupportArray.size(); i++) {
                builder.mustSupport(parseString("mustSupport", mustSupportArray.get(i), getJsonNode(_mustSupportArray, i), i));
            }
        }
        ArrayNode codeFilterArray = getArrayNode(jsonNode, "codeFilter");
        if (codeFilterArray != null) {
            for (int i = 0; i < codeFilterArray.size(); i++) {
                if (codeFilterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeFilterArray.get(i).getNodeType() + " for element: codeFilter");
                }
                builder.codeFilter(parseDataRequirementCodeFilter("codeFilter", codeFilterArray.get(i), i));
            }
        }
        ArrayNode dateFilterArray = getArrayNode(jsonNode, "dateFilter");
        if (dateFilterArray != null) {
            for (int i = 0; i < dateFilterArray.size(); i++) {
                if (dateFilterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dateFilterArray.get(i).getNodeType() + " for element: dateFilter");
                }
                builder.dateFilter(parseDataRequirementDateFilter("dateFilter", dateFilterArray.get(i), i));
            }
        }
        builder.limit((PositiveInt) parseInteger(PositiveInt.builder(), "limit", getJsonNode(jsonNode, "limit", NumericNode.class), jsonNode.get("_limit"), -1));
        ArrayNode sortArray = getArrayNode(jsonNode, "sort");
        if (sortArray != null) {
            for (int i = 0; i < sortArray.size(); i++) {
                if (sortArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sortArray.get(i).getNodeType() + " for element: sort");
                }
                builder.sort(parseDataRequirementSort("sort", sortArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DataRequirement.CodeFilter parseDataRequirementCodeFilter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DataRequirement.CodeFilter.class, jsonNode);
        }
        DataRequirement.CodeFilter.Builder builder = DataRequirement.CodeFilter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.searchParam(parseString("searchParam", getJsonNode(jsonNode, "searchParam", TextNode.class), jsonNode.get("_searchParam"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", getJsonNode(jsonNode, "valueSet", TextNode.class), jsonNode.get("_valueSet"), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCoding("code", codeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DataRequirement.DateFilter parseDataRequirementDateFilter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DataRequirement.DateFilter.class, jsonNode);
        }
        DataRequirement.DateFilter.Builder builder = DataRequirement.DateFilter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.searchParam(parseString("searchParam", getJsonNode(jsonNode, "searchParam", TextNode.class), jsonNode.get("_searchParam"), -1));
        builder.value(parseChoiceElement("value", jsonNode, DateTime.class, Period.class, Duration.class));
        stackPop();
        return builder.build();
    }

    private DataRequirement.Sort parseDataRequirementSort(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DataRequirement.Sort.class, jsonNode);
        }
        DataRequirement.Sort.Builder builder = DataRequirement.Sort.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.direction((SortDirection) parseString(SortDirection.builder(), "direction", getJsonNode(jsonNode, "direction", TextNode.class), jsonNode.get("_direction"), -1));
        stackPop();
        return builder.build();
    }

    private Date parseDate(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Date.Builder builder = Date.builder();
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.STRING) {
            TextNode jsonString = (TextNode) jsonValue;
            builder.value(jsonString.textValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private DateTime parseDateTime(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        DateTime.Builder builder = DateTime.builder();
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.STRING) {
            TextNode jsonString = (TextNode) jsonValue;
            builder.value(jsonString.textValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Decimal parseDecimal(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Decimal.Builder builder = Decimal.builder();
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.NUMBER) {
            NumericNode jsonNumber = (NumericNode) jsonValue;
            builder.value(jsonNumber.decimalValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: NUMBER but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private DetectedIssue parseDetectedIssue(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DetectedIssue.class, jsonNode);
        }
        DetectedIssue.Builder builder = DetectedIssue.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((DetectedIssueStatus) parseString(DetectedIssueStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.severity((DetectedIssueSeverity) parseString(DetectedIssueSeverity.builder(), "severity", getJsonNode(jsonNode, "severity", TextNode.class), jsonNode.get("_severity"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.identified(parseChoiceElement("identified", jsonNode, DateTime.class, Period.class));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        ArrayNode implicatedArray = getArrayNode(jsonNode, "implicated");
        if (implicatedArray != null) {
            for (int i = 0; i < implicatedArray.size(); i++) {
                if (implicatedArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + implicatedArray.get(i).getNodeType() + " for element: implicated");
                }
                builder.implicated(parseReference("implicated", implicatedArray.get(i), i));
            }
        }
        ArrayNode evidenceArray = getArrayNode(jsonNode, "evidence");
        if (evidenceArray != null) {
            for (int i = 0; i < evidenceArray.size(); i++) {
                if (evidenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + evidenceArray.get(i).getNodeType() + " for element: evidence");
                }
                builder.evidence(parseDetectedIssueEvidence("evidence", evidenceArray.get(i), i));
            }
        }
        builder.detail(parseString("detail", getJsonNode(jsonNode, "detail", TextNode.class), jsonNode.get("_detail"), -1));
        builder.reference(parseUri("reference", getJsonNode(jsonNode, "reference", TextNode.class), jsonNode.get("_reference"), -1));
        ArrayNode mitigationArray = getArrayNode(jsonNode, "mitigation");
        if (mitigationArray != null) {
            for (int i = 0; i < mitigationArray.size(); i++) {
                if (mitigationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + mitigationArray.get(i).getNodeType() + " for element: mitigation");
                }
                builder.mitigation(parseDetectedIssueMitigation("mitigation", mitigationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DetectedIssue.Evidence parseDetectedIssueEvidence(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DetectedIssue.Evidence.class, jsonNode);
        }
        DetectedIssue.Evidence.Builder builder = DetectedIssue.Evidence.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseReference("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DetectedIssue.Mitigation parseDetectedIssueMitigation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DetectedIssue.Mitigation.class, jsonNode);
        }
        DetectedIssue.Mitigation.Builder builder = DetectedIssue.Mitigation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.action(parseCodeableConcept("action", getJsonNode(jsonNode, "action", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Device parseDevice(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Device.class, jsonNode);
        }
        Device.Builder builder = Device.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.definition(parseReference("definition", getJsonNode(jsonNode, "definition", JsonNode.class), -1));
        ArrayNode udiCarrierArray = getArrayNode(jsonNode, "udiCarrier");
        if (udiCarrierArray != null) {
            for (int i = 0; i < udiCarrierArray.size(); i++) {
                if (udiCarrierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiCarrierArray.get(i).getNodeType() + " for element: udiCarrier");
                }
                builder.udiCarrier(parseDeviceUdiCarrier("udiCarrier", udiCarrierArray.get(i), i));
            }
        }
        builder.status((FHIRDeviceStatus) parseString(FHIRDeviceStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode statusReasonArray = getArrayNode(jsonNode, "statusReason");
        if (statusReasonArray != null) {
            for (int i = 0; i < statusReasonArray.size(); i++) {
                if (statusReasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + statusReasonArray.get(i).getNodeType() + " for element: statusReason");
                }
                builder.statusReason(parseCodeableConcept("statusReason", statusReasonArray.get(i), i));
            }
        }
        builder.distinctIdentifier(parseString("distinctIdentifier", getJsonNode(jsonNode, "distinctIdentifier", TextNode.class), jsonNode.get("_distinctIdentifier"), -1));
        builder.manufacturer(parseString("manufacturer", getJsonNode(jsonNode, "manufacturer", TextNode.class), jsonNode.get("_manufacturer"), -1));
        builder.manufactureDate(parseDateTime("manufactureDate", getJsonNode(jsonNode, "manufactureDate", TextNode.class), jsonNode.get("_manufactureDate"), -1));
        builder.expirationDate(parseDateTime("expirationDate", getJsonNode(jsonNode, "expirationDate", TextNode.class), jsonNode.get("_expirationDate"), -1));
        builder.lotNumber(parseString("lotNumber", getJsonNode(jsonNode, "lotNumber", TextNode.class), jsonNode.get("_lotNumber"), -1));
        builder.serialNumber(parseString("serialNumber", getJsonNode(jsonNode, "serialNumber", TextNode.class), jsonNode.get("_serialNumber"), -1));
        ArrayNode deviceNameArray = getArrayNode(jsonNode, "deviceName");
        if (deviceNameArray != null) {
            for (int i = 0; i < deviceNameArray.size(); i++) {
                if (deviceNameArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + deviceNameArray.get(i).getNodeType() + " for element: deviceName");
                }
                builder.deviceName(parseDeviceDeviceName("deviceName", deviceNameArray.get(i), i));
            }
        }
        builder.modelNumber(parseString("modelNumber", getJsonNode(jsonNode, "modelNumber", TextNode.class), jsonNode.get("_modelNumber"), -1));
        builder.partNumber(parseString("partNumber", getJsonNode(jsonNode, "partNumber", TextNode.class), jsonNode.get("_partNumber"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode specializationArray = getArrayNode(jsonNode, "specialization");
        if (specializationArray != null) {
            for (int i = 0; i < specializationArray.size(); i++) {
                if (specializationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specializationArray.get(i).getNodeType() + " for element: specialization");
                }
                builder.specialization(parseDeviceSpecialization("specialization", specializationArray.get(i), i));
            }
        }
        ArrayNode versionArray = getArrayNode(jsonNode, "version");
        if (versionArray != null) {
            for (int i = 0; i < versionArray.size(); i++) {
                if (versionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + versionArray.get(i).getNodeType() + " for element: version");
                }
                builder.version(parseDeviceVersion("version", versionArray.get(i), i));
            }
        }
        ArrayNode propertyArray = getArrayNode(jsonNode, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                if (propertyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyArray.get(i).getNodeType() + " for element: property");
                }
                builder.property(parseDeviceProperty("property", propertyArray.get(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.owner(parseReference("owner", getJsonNode(jsonNode, "owner", JsonNode.class), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactPoint("contact", contactArray.get(i), i));
            }
        }
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode safetyArray = getArrayNode(jsonNode, "safety");
        if (safetyArray != null) {
            for (int i = 0; i < safetyArray.size(); i++) {
                if (safetyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + safetyArray.get(i).getNodeType() + " for element: safety");
                }
                builder.safety(parseCodeableConcept("safety", safetyArray.get(i), i));
            }
        }
        builder.parent(parseReference("parent", getJsonNode(jsonNode, "parent", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Device.DeviceName parseDeviceDeviceName(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Device.DeviceName.class, jsonNode);
        }
        Device.DeviceName.Builder builder = Device.DeviceName.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.type((DeviceNameType) parseString(DeviceNameType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private Device.Property parseDeviceProperty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Device.Property.class, jsonNode);
        }
        Device.Property.Builder builder = Device.Property.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode valueQuantityArray = getArrayNode(jsonNode, "valueQuantity");
        if (valueQuantityArray != null) {
            for (int i = 0; i < valueQuantityArray.size(); i++) {
                if (valueQuantityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + valueQuantityArray.get(i).getNodeType() + " for element: valueQuantity");
                }
                builder.valueQuantity(parseQuantity("valueQuantity", valueQuantityArray.get(i), i));
            }
        }
        ArrayNode valueCodeArray = getArrayNode(jsonNode, "valueCode");
        if (valueCodeArray != null) {
            for (int i = 0; i < valueCodeArray.size(); i++) {
                if (valueCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + valueCodeArray.get(i).getNodeType() + " for element: valueCode");
                }
                builder.valueCode(parseCodeableConcept("valueCode", valueCodeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Device.Specialization parseDeviceSpecialization(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Device.Specialization.class, jsonNode);
        }
        Device.Specialization.Builder builder = Device.Specialization.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.systemType(parseCodeableConcept("systemType", getJsonNode(jsonNode, "systemType", JsonNode.class), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    private Device.UdiCarrier parseDeviceUdiCarrier(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Device.UdiCarrier.class, jsonNode);
        }
        Device.UdiCarrier.Builder builder = Device.UdiCarrier.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.deviceIdentifier(parseString("deviceIdentifier", getJsonNode(jsonNode, "deviceIdentifier", TextNode.class), jsonNode.get("_deviceIdentifier"), -1));
        builder.issuer(parseUri("issuer", getJsonNode(jsonNode, "issuer", TextNode.class), jsonNode.get("_issuer"), -1));
        builder.jurisdiction(parseUri("jurisdiction", getJsonNode(jsonNode, "jurisdiction", TextNode.class), jsonNode.get("_jurisdiction"), -1));
        builder.carrierAIDC(parseBase64Binary("carrierAIDC", getJsonNode(jsonNode, "carrierAIDC", TextNode.class), jsonNode.get("_carrierAIDC"), -1));
        builder.carrierHRF(parseString("carrierHRF", getJsonNode(jsonNode, "carrierHRF", TextNode.class), jsonNode.get("_carrierHRF"), -1));
        builder.entryType((UDIEntryType) parseString(UDIEntryType.builder(), "entryType", getJsonNode(jsonNode, "entryType", TextNode.class), jsonNode.get("_entryType"), -1));
        stackPop();
        return builder.build();
    }

    private Device.Version parseDeviceVersion(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Device.Version.class, jsonNode);
        }
        Device.Version.Builder builder = Device.Version.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.component(parseIdentifier("component", getJsonNode(jsonNode, "component", JsonNode.class), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceDefinition parseDeviceDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceDefinition.class, jsonNode);
        }
        DeviceDefinition.Builder builder = DeviceDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode udiDeviceIdentifierArray = getArrayNode(jsonNode, "udiDeviceIdentifier");
        if (udiDeviceIdentifierArray != null) {
            for (int i = 0; i < udiDeviceIdentifierArray.size(); i++) {
                if (udiDeviceIdentifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiDeviceIdentifierArray.get(i).getNodeType() + " for element: udiDeviceIdentifier");
                }
                builder.udiDeviceIdentifier(parseDeviceDefinitionUdiDeviceIdentifier("udiDeviceIdentifier", udiDeviceIdentifierArray.get(i), i));
            }
        }
        builder.manufacturer(parseChoiceElement("manufacturer", jsonNode, String.class, Reference.class));
        ArrayNode deviceNameArray = getArrayNode(jsonNode, "deviceName");
        if (deviceNameArray != null) {
            for (int i = 0; i < deviceNameArray.size(); i++) {
                if (deviceNameArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + deviceNameArray.get(i).getNodeType() + " for element: deviceName");
                }
                builder.deviceName(parseDeviceDefinitionDeviceName("deviceName", deviceNameArray.get(i), i));
            }
        }
        builder.modelNumber(parseString("modelNumber", getJsonNode(jsonNode, "modelNumber", TextNode.class), jsonNode.get("_modelNumber"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode specializationArray = getArrayNode(jsonNode, "specialization");
        if (specializationArray != null) {
            for (int i = 0; i < specializationArray.size(); i++) {
                if (specializationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specializationArray.get(i).getNodeType() + " for element: specialization");
                }
                builder.specialization(parseDeviceDefinitionSpecialization("specialization", specializationArray.get(i), i));
            }
        }
        ArrayNode versionArray = getArrayNode(jsonNode, "version", true);
        if (versionArray != null) {
            ArrayNode _versionArray = getArrayNode(jsonNode, "_version");
            for (int i = 0; i < versionArray.size(); i++) {
                builder.version(parseString("version", versionArray.get(i), getJsonNode(_versionArray, i), i));
            }
        }
        ArrayNode safetyArray = getArrayNode(jsonNode, "safety");
        if (safetyArray != null) {
            for (int i = 0; i < safetyArray.size(); i++) {
                if (safetyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + safetyArray.get(i).getNodeType() + " for element: safety");
                }
                builder.safety(parseCodeableConcept("safety", safetyArray.get(i), i));
            }
        }
        ArrayNode shelfLifeStorageArray = getArrayNode(jsonNode, "shelfLifeStorage");
        if (shelfLifeStorageArray != null) {
            for (int i = 0; i < shelfLifeStorageArray.size(); i++) {
                if (shelfLifeStorageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + shelfLifeStorageArray.get(i).getNodeType() + " for element: shelfLifeStorage");
                }
                builder.shelfLifeStorage(parseProductShelfLife("shelfLifeStorage", shelfLifeStorageArray.get(i), i));
            }
        }
        builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", getJsonNode(jsonNode, "physicalCharacteristics", JsonNode.class), -1));
        ArrayNode languageCodeArray = getArrayNode(jsonNode, "languageCode");
        if (languageCodeArray != null) {
            for (int i = 0; i < languageCodeArray.size(); i++) {
                if (languageCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + languageCodeArray.get(i).getNodeType() + " for element: languageCode");
                }
                builder.languageCode(parseCodeableConcept("languageCode", languageCodeArray.get(i), i));
            }
        }
        ArrayNode capabilityArray = getArrayNode(jsonNode, "capability");
        if (capabilityArray != null) {
            for (int i = 0; i < capabilityArray.size(); i++) {
                if (capabilityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + capabilityArray.get(i).getNodeType() + " for element: capability");
                }
                builder.capability(parseDeviceDefinitionCapability("capability", capabilityArray.get(i), i));
            }
        }
        ArrayNode propertyArray = getArrayNode(jsonNode, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                if (propertyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyArray.get(i).getNodeType() + " for element: property");
                }
                builder.property(parseDeviceDefinitionProperty("property", propertyArray.get(i), i));
            }
        }
        builder.owner(parseReference("owner", getJsonNode(jsonNode, "owner", JsonNode.class), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactPoint("contact", contactArray.get(i), i));
            }
        }
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.onlineInformation(parseUri("onlineInformation", getJsonNode(jsonNode, "onlineInformation", TextNode.class), jsonNode.get("_onlineInformation"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.quantity(parseQuantity("quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.parentDevice(parseReference("parentDevice", getJsonNode(jsonNode, "parentDevice", JsonNode.class), -1));
        ArrayNode materialArray = getArrayNode(jsonNode, "material");
        if (materialArray != null) {
            for (int i = 0; i < materialArray.size(); i++) {
                if (materialArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + materialArray.get(i).getNodeType() + " for element: material");
                }
                builder.material(parseDeviceDefinitionMaterial("material", materialArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.Capability parseDeviceDefinitionCapability(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceDefinition.Capability.class, jsonNode);
        }
        DeviceDefinition.Capability.Builder builder = DeviceDefinition.Capability.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode descriptionArray = getArrayNode(jsonNode, "description");
        if (descriptionArray != null) {
            for (int i = 0; i < descriptionArray.size(); i++) {
                if (descriptionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + descriptionArray.get(i).getNodeType() + " for element: description");
                }
                builder.description(parseCodeableConcept("description", descriptionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.DeviceName parseDeviceDefinitionDeviceName(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceDefinition.DeviceName.class, jsonNode);
        }
        DeviceDefinition.DeviceName.Builder builder = DeviceDefinition.DeviceName.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.type((DeviceNameType) parseString(DeviceNameType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.Material parseDeviceDefinitionMaterial(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceDefinition.Material.class, jsonNode);
        }
        DeviceDefinition.Material.Builder builder = DeviceDefinition.Material.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.substance(parseCodeableConcept("substance", getJsonNode(jsonNode, "substance", JsonNode.class), -1));
        builder.alternate(parseBoolean("alternate", getJsonNode(jsonNode, "alternate", JsonNode.class), jsonNode.get("_alternate"), -1));
        builder.allergenicIndicator(parseBoolean("allergenicIndicator", getJsonNode(jsonNode, "allergenicIndicator", JsonNode.class), jsonNode.get("_allergenicIndicator"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.Property parseDeviceDefinitionProperty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceDefinition.Property.class, jsonNode);
        }
        DeviceDefinition.Property.Builder builder = DeviceDefinition.Property.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode valueQuantityArray = getArrayNode(jsonNode, "valueQuantity");
        if (valueQuantityArray != null) {
            for (int i = 0; i < valueQuantityArray.size(); i++) {
                if (valueQuantityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + valueQuantityArray.get(i).getNodeType() + " for element: valueQuantity");
                }
                builder.valueQuantity(parseQuantity("valueQuantity", valueQuantityArray.get(i), i));
            }
        }
        ArrayNode valueCodeArray = getArrayNode(jsonNode, "valueCode");
        if (valueCodeArray != null) {
            for (int i = 0; i < valueCodeArray.size(); i++) {
                if (valueCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + valueCodeArray.get(i).getNodeType() + " for element: valueCode");
                }
                builder.valueCode(parseCodeableConcept("valueCode", valueCodeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.Specialization parseDeviceDefinitionSpecialization(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceDefinition.Specialization.class, jsonNode);
        }
        DeviceDefinition.Specialization.Builder builder = DeviceDefinition.Specialization.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.systemType(parseString("systemType", getJsonNode(jsonNode, "systemType", TextNode.class), jsonNode.get("_systemType"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.UdiDeviceIdentifier parseDeviceDefinitionUdiDeviceIdentifier(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceDefinition.UdiDeviceIdentifier.class, jsonNode);
        }
        DeviceDefinition.UdiDeviceIdentifier.Builder builder = DeviceDefinition.UdiDeviceIdentifier.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.deviceIdentifier(parseString("deviceIdentifier", getJsonNode(jsonNode, "deviceIdentifier", TextNode.class), jsonNode.get("_deviceIdentifier"), -1));
        builder.issuer(parseUri("issuer", getJsonNode(jsonNode, "issuer", TextNode.class), jsonNode.get("_issuer"), -1));
        builder.jurisdiction(parseUri("jurisdiction", getJsonNode(jsonNode, "jurisdiction", TextNode.class), jsonNode.get("_jurisdiction"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceMetric parseDeviceMetric(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceMetric.class, jsonNode);
        }
        DeviceMetric.Builder builder = DeviceMetric.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.unit(parseCodeableConcept("unit", getJsonNode(jsonNode, "unit", JsonNode.class), -1));
        builder.source(parseReference("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        builder.parent(parseReference("parent", getJsonNode(jsonNode, "parent", JsonNode.class), -1));
        builder.operationalStatus((DeviceMetricOperationalStatus) parseString(DeviceMetricOperationalStatus.builder(), "operationalStatus", getJsonNode(jsonNode, "operationalStatus", TextNode.class), jsonNode.get("_operationalStatus"), -1));
        builder.color((DeviceMetricColor) parseString(DeviceMetricColor.builder(), "color", getJsonNode(jsonNode, "color", TextNode.class), jsonNode.get("_color"), -1));
        builder.category((DeviceMetricCategory) parseString(DeviceMetricCategory.builder(), "category", getJsonNode(jsonNode, "category", TextNode.class), jsonNode.get("_category"), -1));
        builder.measurementPeriod(parseTiming("measurementPeriod", getJsonNode(jsonNode, "measurementPeriod", JsonNode.class), -1));
        ArrayNode calibrationArray = getArrayNode(jsonNode, "calibration");
        if (calibrationArray != null) {
            for (int i = 0; i < calibrationArray.size(); i++) {
                if (calibrationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + calibrationArray.get(i).getNodeType() + " for element: calibration");
                }
                builder.calibration(parseDeviceMetricCalibration("calibration", calibrationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceMetric.Calibration parseDeviceMetricCalibration(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceMetric.Calibration.class, jsonNode);
        }
        DeviceMetric.Calibration.Builder builder = DeviceMetric.Calibration.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((DeviceMetricCalibrationType) parseString(DeviceMetricCalibrationType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.state((DeviceMetricCalibrationState) parseString(DeviceMetricCalibrationState.builder(), "state", getJsonNode(jsonNode, "state", TextNode.class), jsonNode.get("_state"), -1));
        builder.time(parseInstant("time", getJsonNode(jsonNode, "time", TextNode.class), jsonNode.get("_time"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceRequest parseDeviceRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceRequest.class, jsonNode);
        }
        DeviceRequest.Builder builder = DeviceRequest.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode priorRequestArray = getArrayNode(jsonNode, "priorRequest");
        if (priorRequestArray != null) {
            for (int i = 0; i < priorRequestArray.size(); i++) {
                if (priorRequestArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + priorRequestArray.get(i).getNodeType() + " for element: priorRequest");
                }
                builder.priorRequest(parseReference("priorRequest", priorRequestArray.get(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonNode(jsonNode, "groupIdentifier", JsonNode.class), -1));
        builder.status((DeviceRequestStatus) parseString(DeviceRequestStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", getJsonNode(jsonNode, "intent", TextNode.class), jsonNode.get("_intent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        builder.code(parseChoiceElement("code", jsonNode, Reference.class, CodeableConcept.class));
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseDeviceRequestParameter("parameter", parameterArray.get(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, Period.class, Timing.class));
        builder.authoredOn(parseDateTime("authoredOn", getJsonNode(jsonNode, "authoredOn", TextNode.class), jsonNode.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonNode(jsonNode, "requester", JsonNode.class), -1));
        builder.performerType(parseCodeableConcept("performerType", getJsonNode(jsonNode, "performerType", JsonNode.class), -1));
        builder.performer(parseReference("performer", getJsonNode(jsonNode, "performer", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseReference("insurance", insuranceArray.get(i), i));
            }
        }
        ArrayNode supportingInfoArray = getArrayNode(jsonNode, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                if (supportingInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInfoArray.get(i).getNodeType() + " for element: supportingInfo");
                }
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode relevantHistoryArray = getArrayNode(jsonNode, "relevantHistory");
        if (relevantHistoryArray != null) {
            for (int i = 0; i < relevantHistoryArray.size(); i++) {
                if (relevantHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relevantHistoryArray.get(i).getNodeType() + " for element: relevantHistory");
                }
                builder.relevantHistory(parseReference("relevantHistory", relevantHistoryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceRequest.Parameter parseDeviceRequestParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceRequest.Parameter.class, jsonNode);
        }
        DeviceRequest.Parameter.Builder builder = DeviceRequest.Parameter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Range.class, Boolean.class));
        stackPop();
        return builder.build();
    }

    private DeviceUseStatement parseDeviceUseStatement(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DeviceUseStatement.class, jsonNode);
        }
        DeviceUseStatement.Builder builder = DeviceUseStatement.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        builder.status((DeviceUseStatementStatus) parseString(DeviceUseStatementStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        ArrayNode derivedFromArray = getArrayNode(jsonNode, "derivedFrom");
        if (derivedFromArray != null) {
            for (int i = 0; i < derivedFromArray.size(); i++) {
                if (derivedFromArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + derivedFromArray.get(i).getNodeType() + " for element: derivedFrom");
                }
                builder.derivedFrom(parseReference("derivedFrom", derivedFromArray.get(i), i));
            }
        }
        builder.timing(parseChoiceElement("timing", jsonNode, Timing.class, Period.class, DateTime.class));
        builder.recordedOn(parseDateTime("recordedOn", getJsonNode(jsonNode, "recordedOn", TextNode.class), jsonNode.get("_recordedOn"), -1));
        builder.source(parseReference("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        builder.device(parseReference("device", getJsonNode(jsonNode, "device", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DiagnosticReport parseDiagnosticReport(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DiagnosticReport.class, jsonNode);
        }
        DiagnosticReport.Builder builder = DiagnosticReport.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        builder.status((DiagnosticReportStatus) parseString(DiagnosticReportStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.effective(parseChoiceElement("effective", jsonNode, DateTime.class, Period.class));
        builder.issued(parseInstant("issued", getJsonNode(jsonNode, "issued", TextNode.class), jsonNode.get("_issued"), -1));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseReference("performer", performerArray.get(i), i));
            }
        }
        ArrayNode resultsInterpreterArray = getArrayNode(jsonNode, "resultsInterpreter");
        if (resultsInterpreterArray != null) {
            for (int i = 0; i < resultsInterpreterArray.size(); i++) {
                if (resultsInterpreterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + resultsInterpreterArray.get(i).getNodeType() + " for element: resultsInterpreter");
                }
                builder.resultsInterpreter(parseReference("resultsInterpreter", resultsInterpreterArray.get(i), i));
            }
        }
        ArrayNode specimenArray = getArrayNode(jsonNode, "specimen");
        if (specimenArray != null) {
            for (int i = 0; i < specimenArray.size(); i++) {
                if (specimenArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specimenArray.get(i).getNodeType() + " for element: specimen");
                }
                builder.specimen(parseReference("specimen", specimenArray.get(i), i));
            }
        }
        ArrayNode resultArray = getArrayNode(jsonNode, "result");
        if (resultArray != null) {
            for (int i = 0; i < resultArray.size(); i++) {
                if (resultArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + resultArray.get(i).getNodeType() + " for element: result");
                }
                builder.result(parseReference("result", resultArray.get(i), i));
            }
        }
        ArrayNode imagingStudyArray = getArrayNode(jsonNode, "imagingStudy");
        if (imagingStudyArray != null) {
            for (int i = 0; i < imagingStudyArray.size(); i++) {
                if (imagingStudyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + imagingStudyArray.get(i).getNodeType() + " for element: imagingStudy");
                }
                builder.imagingStudy(parseReference("imagingStudy", imagingStudyArray.get(i), i));
            }
        }
        ArrayNode mediaArray = getArrayNode(jsonNode, "media");
        if (mediaArray != null) {
            for (int i = 0; i < mediaArray.size(); i++) {
                if (mediaArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + mediaArray.get(i).getNodeType() + " for element: media");
                }
                builder.media(parseDiagnosticReportMedia("media", mediaArray.get(i), i));
            }
        }
        builder.conclusion(parseString("conclusion", getJsonNode(jsonNode, "conclusion", TextNode.class), jsonNode.get("_conclusion"), -1));
        ArrayNode conclusionCodeArray = getArrayNode(jsonNode, "conclusionCode");
        if (conclusionCodeArray != null) {
            for (int i = 0; i < conclusionCodeArray.size(); i++) {
                if (conclusionCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conclusionCodeArray.get(i).getNodeType() + " for element: conclusionCode");
                }
                builder.conclusionCode(parseCodeableConcept("conclusionCode", conclusionCodeArray.get(i), i));
            }
        }
        ArrayNode presentedFormArray = getArrayNode(jsonNode, "presentedForm");
        if (presentedFormArray != null) {
            for (int i = 0; i < presentedFormArray.size(); i++) {
                if (presentedFormArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + presentedFormArray.get(i).getNodeType() + " for element: presentedForm");
                }
                builder.presentedForm(parseAttachment("presentedForm", presentedFormArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DiagnosticReport.Media parseDiagnosticReportMedia(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DiagnosticReport.Media.class, jsonNode);
        }
        DiagnosticReport.Media.Builder builder = DiagnosticReport.Media.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        builder.link(parseReference("link", getJsonNode(jsonNode, "link", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private DocumentManifest parseDocumentManifest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DocumentManifest.class, jsonNode);
        }
        DocumentManifest.Builder builder = DocumentManifest.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.masterIdentifier(parseIdentifier("masterIdentifier", getJsonNode(jsonNode, "masterIdentifier", JsonNode.class), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((DocumentReferenceStatus) parseString(DocumentReferenceStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseReference("author", authorArray.get(i), i));
            }
        }
        ArrayNode recipientArray = getArrayNode(jsonNode, "recipient");
        if (recipientArray != null) {
            for (int i = 0; i < recipientArray.size(); i++) {
                if (recipientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + recipientArray.get(i).getNodeType() + " for element: recipient");
                }
                builder.recipient(parseReference("recipient", recipientArray.get(i), i));
            }
        }
        builder.source(parseUri("source", getJsonNode(jsonNode, "source", TextNode.class), jsonNode.get("_source"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode contentArray = getArrayNode(jsonNode, "content");
        if (contentArray != null) {
            for (int i = 0; i < contentArray.size(); i++) {
                if (contentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contentArray.get(i).getNodeType() + " for element: content");
                }
                builder.content(parseReference("content", contentArray.get(i), i));
            }
        }
        ArrayNode relatedArray = getArrayNode(jsonNode, "related");
        if (relatedArray != null) {
            for (int i = 0; i < relatedArray.size(); i++) {
                if (relatedArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArray.get(i).getNodeType() + " for element: related");
                }
                builder.related(parseDocumentManifestRelated("related", relatedArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DocumentManifest.Related parseDocumentManifestRelated(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DocumentManifest.Related.class, jsonNode);
        }
        DocumentManifest.Related.Builder builder = DocumentManifest.Related.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.ref(parseReference("ref", getJsonNode(jsonNode, "ref", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private DocumentReference parseDocumentReference(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DocumentReference.class, jsonNode);
        }
        DocumentReference.Builder builder = DocumentReference.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.masterIdentifier(parseIdentifier("masterIdentifier", getJsonNode(jsonNode, "masterIdentifier", JsonNode.class), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((DocumentReferenceStatus) parseString(DocumentReferenceStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.docStatus((ReferredDocumentStatus) parseString(ReferredDocumentStatus.builder(), "docStatus", getJsonNode(jsonNode, "docStatus", TextNode.class), jsonNode.get("_docStatus"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.date(parseInstant("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseReference("author", authorArray.get(i), i));
            }
        }
        builder.authenticator(parseReference("authenticator", getJsonNode(jsonNode, "authenticator", JsonNode.class), -1));
        builder.custodian(parseReference("custodian", getJsonNode(jsonNode, "custodian", JsonNode.class), -1));
        ArrayNode relatesToArray = getArrayNode(jsonNode, "relatesTo");
        if (relatesToArray != null) {
            for (int i = 0; i < relatesToArray.size(); i++) {
                if (relatesToArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatesToArray.get(i).getNodeType() + " for element: relatesTo");
                }
                builder.relatesTo(parseDocumentReferenceRelatesTo("relatesTo", relatesToArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode securityLabelArray = getArrayNode(jsonNode, "securityLabel");
        if (securityLabelArray != null) {
            for (int i = 0; i < securityLabelArray.size(); i++) {
                if (securityLabelArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + securityLabelArray.get(i).getNodeType() + " for element: securityLabel");
                }
                builder.securityLabel(parseCodeableConcept("securityLabel", securityLabelArray.get(i), i));
            }
        }
        ArrayNode contentArray = getArrayNode(jsonNode, "content");
        if (contentArray != null) {
            for (int i = 0; i < contentArray.size(); i++) {
                if (contentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contentArray.get(i).getNodeType() + " for element: content");
                }
                builder.content(parseDocumentReferenceContent("content", contentArray.get(i), i));
            }
        }
        builder.context(parseDocumentReferenceContext("context", getJsonNode(jsonNode, "context", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private DocumentReference.Content parseDocumentReferenceContent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DocumentReference.Content.class, jsonNode);
        }
        DocumentReference.Content.Builder builder = DocumentReference.Content.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.attachment(parseAttachment("attachment", getJsonNode(jsonNode, "attachment", JsonNode.class), -1));
        builder.format(parseCoding("format", getJsonNode(jsonNode, "format", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private DocumentReference.Context parseDocumentReferenceContext(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DocumentReference.Context.class, jsonNode);
        }
        DocumentReference.Context.Builder builder = DocumentReference.Context.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode encounterArray = getArrayNode(jsonNode, "encounter");
        if (encounterArray != null) {
            for (int i = 0; i < encounterArray.size(); i++) {
                if (encounterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + encounterArray.get(i).getNodeType() + " for element: encounter");
                }
                builder.encounter(parseReference("encounter", encounterArray.get(i), i));
            }
        }
        ArrayNode eventArray = getArrayNode(jsonNode, "event");
        if (eventArray != null) {
            for (int i = 0; i < eventArray.size(); i++) {
                if (eventArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + eventArray.get(i).getNodeType() + " for element: event");
                }
                builder.event(parseCodeableConcept("event", eventArray.get(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.facilityType(parseCodeableConcept("facilityType", getJsonNode(jsonNode, "facilityType", JsonNode.class), -1));
        builder.practiceSetting(parseCodeableConcept("practiceSetting", getJsonNode(jsonNode, "practiceSetting", JsonNode.class), -1));
        builder.sourcePatientInfo(parseReference("sourcePatientInfo", getJsonNode(jsonNode, "sourcePatientInfo", JsonNode.class), -1));
        ArrayNode relatedArray = getArrayNode(jsonNode, "related");
        if (relatedArray != null) {
            for (int i = 0; i < relatedArray.size(); i++) {
                if (relatedArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArray.get(i).getNodeType() + " for element: related");
                }
                builder.related(parseReference("related", relatedArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DocumentReference.RelatesTo parseDocumentReferenceRelatesTo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(DocumentReference.RelatesTo.class, jsonNode);
        }
        DocumentReference.RelatesTo.Builder builder = DocumentReference.RelatesTo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((DocumentRelationshipType) parseString(DocumentRelationshipType.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.target(parseReference("target", getJsonNode(jsonNode, "target", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private void parseDomainResource(DomainResource.Builder builder, JsonNode jsonNode) {
        builder.setValidating(validating);
        parseResource(builder, jsonNode);
        builder.text(parseNarrative("text", getJsonNode(jsonNode, "text", JsonNode.class), -1));
        ArrayNode containedArray = getArrayNode(jsonNode, "contained");
        if (containedArray != null) {
            for (int i = 0; i < containedArray.size(); i++) {
                if (containedArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + containedArray.get(i).getNodeType() + " for element: contained");
                }
                builder.contained(parseResource("contained", containedArray.get(i), i));
            }
        }
        ArrayNode extensionArray = getArrayNode(jsonNode, "extension");
        if (extensionArray != null) {
            for (int i = 0; i < extensionArray.size(); i++) {
                if (extensionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + extensionArray.get(i).getNodeType() + " for element: extension");
                }
                builder.extension(parseExtension("extension", extensionArray.get(i), i));
            }
        }
        ArrayNode modifierExtensionArray = getArrayNode(jsonNode, "modifierExtension");
        if (modifierExtensionArray != null) {
            for (int i = 0; i < modifierExtensionArray.size(); i++) {
                if (modifierExtensionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierExtensionArray.get(i).getNodeType() + " for element: modifierExtension");
                }
                builder.modifierExtension(parseExtension("modifierExtension", modifierExtensionArray.get(i), i));
            }
        }
    }

    private Dosage parseDosage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Dosage.class, jsonNode);
        }
        Dosage.Builder builder = Dosage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence(parseInteger("sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        ArrayNode additionalInstructionArray = getArrayNode(jsonNode, "additionalInstruction");
        if (additionalInstructionArray != null) {
            for (int i = 0; i < additionalInstructionArray.size(); i++) {
                if (additionalInstructionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + additionalInstructionArray.get(i).getNodeType() + " for element: additionalInstruction");
                }
                builder.additionalInstruction(parseCodeableConcept("additionalInstruction", additionalInstructionArray.get(i), i));
            }
        }
        builder.patientInstruction(parseString("patientInstruction", getJsonNode(jsonNode, "patientInstruction", TextNode.class), jsonNode.get("_patientInstruction"), -1));
        builder.timing(parseTiming("timing", getJsonNode(jsonNode, "timing", JsonNode.class), -1));
        builder.asNeeded(parseChoiceElement("asNeeded", jsonNode, Boolean.class, CodeableConcept.class));
        builder.site(parseCodeableConcept("site", getJsonNode(jsonNode, "site", JsonNode.class), -1));
        builder.route(parseCodeableConcept("route", getJsonNode(jsonNode, "route", JsonNode.class), -1));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        ArrayNode doseAndRateArray = getArrayNode(jsonNode, "doseAndRate");
        if (doseAndRateArray != null) {
            for (int i = 0; i < doseAndRateArray.size(); i++) {
                if (doseAndRateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + doseAndRateArray.get(i).getNodeType() + " for element: doseAndRate");
                }
                builder.doseAndRate(parseDosageDoseAndRate("doseAndRate", doseAndRateArray.get(i), i));
            }
        }
        builder.maxDosePerPeriod(parseRatio("maxDosePerPeriod", getJsonNode(jsonNode, "maxDosePerPeriod", JsonNode.class), -1));
        builder.maxDosePerAdministration((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxDosePerAdministration", getJsonNode(jsonNode, "maxDosePerAdministration", JsonNode.class), -1));
        builder.maxDosePerLifetime((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxDosePerLifetime", getJsonNode(jsonNode, "maxDosePerLifetime", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Dosage.DoseAndRate parseDosageDoseAndRate(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Dosage.DoseAndRate.class, jsonNode);
        }
        Dosage.DoseAndRate.Builder builder = Dosage.DoseAndRate.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.dose(parseChoiceElement("dose", jsonNode, Range.class, SimpleQuantity.class));
        builder.rate(parseChoiceElement("rate", jsonNode, Ratio.class, Range.class, SimpleQuantity.class));
        stackPop();
        return builder.build();
    }

    private void parseElement(Element.Builder builder, JsonNode jsonNode) {
        builder.setValidating(validating);
        builder.id(parseJavaString("id", getJsonNode(jsonNode, "id", TextNode.class), -1));
        ArrayNode extensionArray = getArrayNode(jsonNode, "extension");
        if (extensionArray != null) {
            for (int i = 0; i < extensionArray.size(); i++) {
                if (extensionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + extensionArray.get(i).getNodeType() + " for element: extension");
                }
                builder.extension(parseExtension("extension", extensionArray.get(i), i));
            }
        }
    }

    private ElementDefinition parseElementDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.class, jsonNode);
        }
        ElementDefinition.Builder builder = ElementDefinition.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        ArrayNode representationArray = getArrayNode(jsonNode, "representation", true);
        if (representationArray != null) {
            ArrayNode _representationArray = getArrayNode(jsonNode, "_representation");
            for (int i = 0; i < representationArray.size(); i++) {
                builder.representation((PropertyRepresentation) parseString(PropertyRepresentation.builder(), "representation", representationArray.get(i), getJsonNode(_representationArray, i), i));
            }
        }
        builder.sliceName(parseString("sliceName", getJsonNode(jsonNode, "sliceName", TextNode.class), jsonNode.get("_sliceName"), -1));
        builder.sliceIsConstraining(parseBoolean("sliceIsConstraining", getJsonNode(jsonNode, "sliceIsConstraining", JsonNode.class), jsonNode.get("_sliceIsConstraining"), -1));
        builder.label(parseString("label", getJsonNode(jsonNode, "label", TextNode.class), jsonNode.get("_label"), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCoding("code", codeArray.get(i), i));
            }
        }
        builder.slicing(parseElementDefinitionSlicing("slicing", getJsonNode(jsonNode, "slicing", JsonNode.class), -1));
        builder._short(parseString("short", getJsonNode(jsonNode, "short", TextNode.class), jsonNode.get("_short"), -1));
        builder.definition((Markdown) parseString(Markdown.builder(), "definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        builder.requirements((Markdown) parseString(Markdown.builder(), "requirements", getJsonNode(jsonNode, "requirements", TextNode.class), jsonNode.get("_requirements"), -1));
        ArrayNode aliasArray = getArrayNode(jsonNode, "alias", true);
        if (aliasArray != null) {
            ArrayNode _aliasArray = getArrayNode(jsonNode, "_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonNode(_aliasArray, i), i));
            }
        }
        builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", getJsonNode(jsonNode, "min", NumericNode.class), jsonNode.get("_min"), -1));
        builder.max(parseString("max", getJsonNode(jsonNode, "max", TextNode.class), jsonNode.get("_max"), -1));
        builder.base(parseElementDefinitionBase("base", getJsonNode(jsonNode, "base", JsonNode.class), -1));
        builder.contentReference(parseUri("contentReference", getJsonNode(jsonNode, "contentReference", TextNode.class), jsonNode.get("_contentReference"), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseElementDefinitionType("type", typeArray.get(i), i));
            }
        }
        builder.defaultValue(parseChoiceElement("defaultValue", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, CodeableReference.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, RatioRange.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class));
        builder.meaningWhenMissing((Markdown) parseString(Markdown.builder(), "meaningWhenMissing", getJsonNode(jsonNode, "meaningWhenMissing", TextNode.class), jsonNode.get("_meaningWhenMissing"), -1));
        builder.orderMeaning(parseString("orderMeaning", getJsonNode(jsonNode, "orderMeaning", TextNode.class), jsonNode.get("_orderMeaning"), -1));
        builder.fixed(parseChoiceElement("fixed", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, CodeableReference.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, RatioRange.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class));
        builder.pattern(parseChoiceElement("pattern", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, CodeableReference.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, RatioRange.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class));
        ArrayNode exampleArray = getArrayNode(jsonNode, "example");
        if (exampleArray != null) {
            for (int i = 0; i < exampleArray.size(); i++) {
                if (exampleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + exampleArray.get(i).getNodeType() + " for element: example");
                }
                builder.example(parseElementDefinitionExample("example", exampleArray.get(i), i));
            }
        }
        builder.minValue(parseChoiceElement("minValue", jsonNode, Date.class, DateTime.class, Instant.class, Time.class, Decimal.class, Integer.class, PositiveInt.class, UnsignedInt.class, Quantity.class));
        builder.maxValue(parseChoiceElement("maxValue", jsonNode, Date.class, DateTime.class, Instant.class, Time.class, Decimal.class, Integer.class, PositiveInt.class, UnsignedInt.class, Quantity.class));
        builder.maxLength(parseInteger("maxLength", getJsonNode(jsonNode, "maxLength", NumericNode.class), jsonNode.get("_maxLength"), -1));
        ArrayNode conditionArray = getArrayNode(jsonNode, "condition", true);
        if (conditionArray != null) {
            ArrayNode _conditionArray = getArrayNode(jsonNode, "_condition");
            for (int i = 0; i < conditionArray.size(); i++) {
                builder.condition((Id) parseString(Id.builder(), "condition", conditionArray.get(i), getJsonNode(_conditionArray, i), i));
            }
        }
        ArrayNode constraintArray = getArrayNode(jsonNode, "constraint");
        if (constraintArray != null) {
            for (int i = 0; i < constraintArray.size(); i++) {
                if (constraintArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + constraintArray.get(i).getNodeType() + " for element: constraint");
                }
                builder.constraint(parseElementDefinitionConstraint("constraint", constraintArray.get(i), i));
            }
        }
        builder.mustSupport(parseBoolean("mustSupport", getJsonNode(jsonNode, "mustSupport", JsonNode.class), jsonNode.get("_mustSupport"), -1));
        builder.isModifier(parseBoolean("isModifier", getJsonNode(jsonNode, "isModifier", JsonNode.class), jsonNode.get("_isModifier"), -1));
        builder.isModifierReason(parseString("isModifierReason", getJsonNode(jsonNode, "isModifierReason", TextNode.class), jsonNode.get("_isModifierReason"), -1));
        builder.isSummary(parseBoolean("isSummary", getJsonNode(jsonNode, "isSummary", JsonNode.class), jsonNode.get("_isSummary"), -1));
        builder.binding(parseElementDefinitionBinding("binding", getJsonNode(jsonNode, "binding", JsonNode.class), -1));
        ArrayNode mappingArray = getArrayNode(jsonNode, "mapping");
        if (mappingArray != null) {
            for (int i = 0; i < mappingArray.size(); i++) {
                if (mappingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + mappingArray.get(i).getNodeType() + " for element: mapping");
                }
                builder.mapping(parseElementDefinitionMapping("mapping", mappingArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Base parseElementDefinitionBase(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.Base.class, jsonNode);
        }
        ElementDefinition.Base.Builder builder = ElementDefinition.Base.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", getJsonNode(jsonNode, "min", NumericNode.class), jsonNode.get("_min"), -1));
        builder.max(parseString("max", getJsonNode(jsonNode, "max", TextNode.class), jsonNode.get("_max"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Binding parseElementDefinitionBinding(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.Binding.class, jsonNode);
        }
        ElementDefinition.Binding.Builder builder = ElementDefinition.Binding.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.strength((BindingStrength) parseString(BindingStrength.builder(), "strength", getJsonNode(jsonNode, "strength", TextNode.class), jsonNode.get("_strength"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", getJsonNode(jsonNode, "valueSet", TextNode.class), jsonNode.get("_valueSet"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Constraint parseElementDefinitionConstraint(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.Constraint.class, jsonNode);
        }
        ElementDefinition.Constraint.Builder builder = ElementDefinition.Constraint.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.key((Id) parseString(Id.builder(), "key", getJsonNode(jsonNode, "key", TextNode.class), jsonNode.get("_key"), -1));
        builder.requirements(parseString("requirements", getJsonNode(jsonNode, "requirements", TextNode.class), jsonNode.get("_requirements"), -1));
        builder.severity((ConstraintSeverity) parseString(ConstraintSeverity.builder(), "severity", getJsonNode(jsonNode, "severity", TextNode.class), jsonNode.get("_severity"), -1));
        builder.human(parseString("human", getJsonNode(jsonNode, "human", TextNode.class), jsonNode.get("_human"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        builder.xpath(parseString("xpath", getJsonNode(jsonNode, "xpath", TextNode.class), jsonNode.get("_xpath"), -1));
        builder.source((Canonical) parseUri(Canonical.builder(), "source", getJsonNode(jsonNode, "source", TextNode.class), jsonNode.get("_source"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Example parseElementDefinitionExample(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.Example.class, jsonNode);
        }
        ElementDefinition.Example.Builder builder = ElementDefinition.Example.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.label(parseString("label", getJsonNode(jsonNode, "label", TextNode.class), jsonNode.get("_label"), -1));
        builder.value(parseChoiceElement("value", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, CodeableReference.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, RatioRange.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Mapping parseElementDefinitionMapping(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.Mapping.class, jsonNode);
        }
        ElementDefinition.Mapping.Builder builder = ElementDefinition.Mapping.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identity((Id) parseString(Id.builder(), "identity", getJsonNode(jsonNode, "identity", TextNode.class), jsonNode.get("_identity"), -1));
        builder.language((Code) parseString(Code.builder(), "language", getJsonNode(jsonNode, "language", TextNode.class), jsonNode.get("_language"), -1));
        builder.map(parseString("map", getJsonNode(jsonNode, "map", TextNode.class), jsonNode.get("_map"), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Slicing parseElementDefinitionSlicing(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.Slicing.class, jsonNode);
        }
        ElementDefinition.Slicing.Builder builder = ElementDefinition.Slicing.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode discriminatorArray = getArrayNode(jsonNode, "discriminator");
        if (discriminatorArray != null) {
            for (int i = 0; i < discriminatorArray.size(); i++) {
                if (discriminatorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + discriminatorArray.get(i).getNodeType() + " for element: discriminator");
                }
                builder.discriminator(parseElementDefinitionSlicingDiscriminator("discriminator", discriminatorArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.ordered(parseBoolean("ordered", getJsonNode(jsonNode, "ordered", JsonNode.class), jsonNode.get("_ordered"), -1));
        builder.rules((SlicingRules) parseString(SlicingRules.builder(), "rules", getJsonNode(jsonNode, "rules", TextNode.class), jsonNode.get("_rules"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Slicing.Discriminator parseElementDefinitionSlicingDiscriminator(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.Slicing.Discriminator.class, jsonNode);
        }
        ElementDefinition.Slicing.Discriminator.Builder builder = ElementDefinition.Slicing.Discriminator.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((DiscriminatorType) parseString(DiscriminatorType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Type parseElementDefinitionType(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ElementDefinition.Type.class, jsonNode);
        }
        ElementDefinition.Type.Builder builder = ElementDefinition.Type.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseUri("code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        ArrayNode profileArray = getArrayNode(jsonNode, "profile", true);
        if (profileArray != null) {
            ArrayNode _profileArray = getArrayNode(jsonNode, "_profile");
            for (int i = 0; i < profileArray.size(); i++) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", profileArray.get(i), getJsonNode(_profileArray, i), i));
            }
        }
        ArrayNode targetProfileArray = getArrayNode(jsonNode, "targetProfile", true);
        if (targetProfileArray != null) {
            ArrayNode _targetProfileArray = getArrayNode(jsonNode, "_targetProfile");
            for (int i = 0; i < targetProfileArray.size(); i++) {
                builder.targetProfile((Canonical) parseUri(Canonical.builder(), "targetProfile", targetProfileArray.get(i), getJsonNode(_targetProfileArray, i), i));
            }
        }
        ArrayNode aggregationArray = getArrayNode(jsonNode, "aggregation", true);
        if (aggregationArray != null) {
            ArrayNode _aggregationArray = getArrayNode(jsonNode, "_aggregation");
            for (int i = 0; i < aggregationArray.size(); i++) {
                builder.aggregation((AggregationMode) parseString(AggregationMode.builder(), "aggregation", aggregationArray.get(i), getJsonNode(_aggregationArray, i), i));
            }
        }
        builder.versioning((ReferenceVersionRules) parseString(ReferenceVersionRules.builder(), "versioning", getJsonNode(jsonNode, "versioning", TextNode.class), jsonNode.get("_versioning"), -1));
        stackPop();
        return builder.build();
    }

    private Encounter parseEncounter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Encounter.class, jsonNode);
        }
        Encounter.Builder builder = Encounter.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((EncounterStatus) parseString(EncounterStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode statusHistoryArray = getArrayNode(jsonNode, "statusHistory");
        if (statusHistoryArray != null) {
            for (int i = 0; i < statusHistoryArray.size(); i++) {
                if (statusHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + statusHistoryArray.get(i).getNodeType() + " for element: statusHistory");
                }
                builder.statusHistory(parseEncounterStatusHistory("statusHistory", statusHistoryArray.get(i), i));
            }
        }
        builder.clazz(parseCoding("class", getJsonNode(jsonNode, "class", JsonNode.class), -1));
        ArrayNode classHistoryArray = getArrayNode(jsonNode, "classHistory");
        if (classHistoryArray != null) {
            for (int i = 0; i < classHistoryArray.size(); i++) {
                if (classHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classHistoryArray.get(i).getNodeType() + " for element: classHistory");
                }
                builder.classHistory(parseEncounterClassHistory("classHistory", classHistoryArray.get(i), i));
            }
        }
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.serviceType(parseCodeableConcept("serviceType", getJsonNode(jsonNode, "serviceType", JsonNode.class), -1));
        builder.priority(parseCodeableConcept("priority", getJsonNode(jsonNode, "priority", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        ArrayNode episodeOfCareArray = getArrayNode(jsonNode, "episodeOfCare");
        if (episodeOfCareArray != null) {
            for (int i = 0; i < episodeOfCareArray.size(); i++) {
                if (episodeOfCareArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + episodeOfCareArray.get(i).getNodeType() + " for element: episodeOfCare");
                }
                builder.episodeOfCare(parseReference("episodeOfCare", episodeOfCareArray.get(i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode participantArray = getArrayNode(jsonNode, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                if (participantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantArray.get(i).getNodeType() + " for element: participant");
                }
                builder.participant(parseEncounterParticipant("participant", participantArray.get(i), i));
            }
        }
        ArrayNode appointmentArray = getArrayNode(jsonNode, "appointment");
        if (appointmentArray != null) {
            for (int i = 0; i < appointmentArray.size(); i++) {
                if (appointmentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + appointmentArray.get(i).getNodeType() + " for element: appointment");
                }
                builder.appointment(parseReference("appointment", appointmentArray.get(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.length((Duration) parseQuantity(Duration.builder(), "length", getJsonNode(jsonNode, "length", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode diagnosisArray = getArrayNode(jsonNode, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                if (diagnosisArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + diagnosisArray.get(i).getNodeType() + " for element: diagnosis");
                }
                builder.diagnosis(parseEncounterDiagnosis("diagnosis", diagnosisArray.get(i), i));
            }
        }
        ArrayNode accountArray = getArrayNode(jsonNode, "account");
        if (accountArray != null) {
            for (int i = 0; i < accountArray.size(); i++) {
                if (accountArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + accountArray.get(i).getNodeType() + " for element: account");
                }
                builder.account(parseReference("account", accountArray.get(i), i));
            }
        }
        builder.hospitalization(parseEncounterHospitalization("hospitalization", getJsonNode(jsonNode, "hospitalization", JsonNode.class), -1));
        ArrayNode locationArray = getArrayNode(jsonNode, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                if (locationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + locationArray.get(i).getNodeType() + " for element: location");
                }
                builder.location(parseEncounterLocation("location", locationArray.get(i), i));
            }
        }
        builder.serviceProvider(parseReference("serviceProvider", getJsonNode(jsonNode, "serviceProvider", JsonNode.class), -1));
        builder.partOf(parseReference("partOf", getJsonNode(jsonNode, "partOf", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.ClassHistory parseEncounterClassHistory(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Encounter.ClassHistory.class, jsonNode);
        }
        Encounter.ClassHistory.Builder builder = Encounter.ClassHistory.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.clazz(parseCoding("class", getJsonNode(jsonNode, "class", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.Diagnosis parseEncounterDiagnosis(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Encounter.Diagnosis.class, jsonNode);
        }
        Encounter.Diagnosis.Builder builder = Encounter.Diagnosis.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.condition(parseReference("condition", getJsonNode(jsonNode, "condition", JsonNode.class), -1));
        builder.use(parseCodeableConcept("use", getJsonNode(jsonNode, "use", JsonNode.class), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", getJsonNode(jsonNode, "rank", NumericNode.class), jsonNode.get("_rank"), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.Hospitalization parseEncounterHospitalization(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Encounter.Hospitalization.class, jsonNode);
        }
        Encounter.Hospitalization.Builder builder = Encounter.Hospitalization.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.preAdmissionIdentifier(parseIdentifier("preAdmissionIdentifier", getJsonNode(jsonNode, "preAdmissionIdentifier", JsonNode.class), -1));
        builder.origin(parseReference("origin", getJsonNode(jsonNode, "origin", JsonNode.class), -1));
        builder.admitSource(parseCodeableConcept("admitSource", getJsonNode(jsonNode, "admitSource", JsonNode.class), -1));
        builder.reAdmission(parseCodeableConcept("reAdmission", getJsonNode(jsonNode, "reAdmission", JsonNode.class), -1));
        ArrayNode dietPreferenceArray = getArrayNode(jsonNode, "dietPreference");
        if (dietPreferenceArray != null) {
            for (int i = 0; i < dietPreferenceArray.size(); i++) {
                if (dietPreferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dietPreferenceArray.get(i).getNodeType() + " for element: dietPreference");
                }
                builder.dietPreference(parseCodeableConcept("dietPreference", dietPreferenceArray.get(i), i));
            }
        }
        ArrayNode specialCourtesyArray = getArrayNode(jsonNode, "specialCourtesy");
        if (specialCourtesyArray != null) {
            for (int i = 0; i < specialCourtesyArray.size(); i++) {
                if (specialCourtesyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialCourtesyArray.get(i).getNodeType() + " for element: specialCourtesy");
                }
                builder.specialCourtesy(parseCodeableConcept("specialCourtesy", specialCourtesyArray.get(i), i));
            }
        }
        ArrayNode specialArrangementArray = getArrayNode(jsonNode, "specialArrangement");
        if (specialArrangementArray != null) {
            for (int i = 0; i < specialArrangementArray.size(); i++) {
                if (specialArrangementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialArrangementArray.get(i).getNodeType() + " for element: specialArrangement");
                }
                builder.specialArrangement(parseCodeableConcept("specialArrangement", specialArrangementArray.get(i), i));
            }
        }
        builder.destination(parseReference("destination", getJsonNode(jsonNode, "destination", JsonNode.class), -1));
        builder.dischargeDisposition(parseCodeableConcept("dischargeDisposition", getJsonNode(jsonNode, "dischargeDisposition", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.Location parseEncounterLocation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Encounter.Location.class, jsonNode);
        }
        Encounter.Location.Builder builder = Encounter.Location.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        builder.status((EncounterLocationStatus) parseString(EncounterLocationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.physicalType(parseCodeableConcept("physicalType", getJsonNode(jsonNode, "physicalType", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.Participant parseEncounterParticipant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Encounter.Participant.class, jsonNode);
        }
        Encounter.Participant.Builder builder = Encounter.Participant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.individual(parseReference("individual", getJsonNode(jsonNode, "individual", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.StatusHistory parseEncounterStatusHistory(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Encounter.StatusHistory.class, jsonNode);
        }
        Encounter.StatusHistory.Builder builder = Encounter.StatusHistory.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.status((EncounterStatus) parseString(EncounterStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Endpoint parseEndpoint(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Endpoint.class, jsonNode);
        }
        Endpoint.Builder builder = Endpoint.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((EndpointStatus) parseString(EndpointStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.connectionType(parseCoding("connectionType", getJsonNode(jsonNode, "connectionType", JsonNode.class), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.managingOrganization(parseReference("managingOrganization", getJsonNode(jsonNode, "managingOrganization", JsonNode.class), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactPoint("contact", contactArray.get(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode payloadTypeArray = getArrayNode(jsonNode, "payloadType");
        if (payloadTypeArray != null) {
            for (int i = 0; i < payloadTypeArray.size(); i++) {
                if (payloadTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + payloadTypeArray.get(i).getNodeType() + " for element: payloadType");
                }
                builder.payloadType(parseCodeableConcept("payloadType", payloadTypeArray.get(i), i));
            }
        }
        ArrayNode payloadMimeTypeArray = getArrayNode(jsonNode, "payloadMimeType", true);
        if (payloadMimeTypeArray != null) {
            ArrayNode _payloadMimeTypeArray = getArrayNode(jsonNode, "_payloadMimeType");
            for (int i = 0; i < payloadMimeTypeArray.size(); i++) {
                builder.payloadMimeType((Code) parseString(Code.builder(), "payloadMimeType", payloadMimeTypeArray.get(i), getJsonNode(_payloadMimeTypeArray, i), i));
            }
        }
        builder.address((Url) parseUri(Url.builder(), "address", getJsonNode(jsonNode, "address", TextNode.class), jsonNode.get("_address"), -1));
        ArrayNode headerArray = getArrayNode(jsonNode, "header", true);
        if (headerArray != null) {
            ArrayNode _headerArray = getArrayNode(jsonNode, "_header");
            for (int i = 0; i < headerArray.size(); i++) {
                builder.header(parseString("header", headerArray.get(i), getJsonNode(_headerArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EnrollmentRequest parseEnrollmentRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EnrollmentRequest.class, jsonNode);
        }
        EnrollmentRequest.Builder builder = EnrollmentRequest.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((EnrollmentRequestStatus) parseString(EnrollmentRequestStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.insurer(parseReference("insurer", getJsonNode(jsonNode, "insurer", JsonNode.class), -1));
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.candidate(parseReference("candidate", getJsonNode(jsonNode, "candidate", JsonNode.class), -1));
        builder.coverage(parseReference("coverage", getJsonNode(jsonNode, "coverage", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private EnrollmentResponse parseEnrollmentResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EnrollmentResponse.class, jsonNode);
        }
        EnrollmentResponse.Builder builder = EnrollmentResponse.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((EnrollmentResponseStatus) parseString(EnrollmentResponseStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.request(parseReference("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonNode(jsonNode, "outcome", TextNode.class), jsonNode.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonNode(jsonNode, "disposition", TextNode.class), jsonNode.get("_disposition"), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.organization(parseReference("organization", getJsonNode(jsonNode, "organization", JsonNode.class), -1));
        builder.requestProvider(parseReference("requestProvider", getJsonNode(jsonNode, "requestProvider", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private EpisodeOfCare parseEpisodeOfCare(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EpisodeOfCare.class, jsonNode);
        }
        EpisodeOfCare.Builder builder = EpisodeOfCare.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((EpisodeOfCareStatus) parseString(EpisodeOfCareStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode statusHistoryArray = getArrayNode(jsonNode, "statusHistory");
        if (statusHistoryArray != null) {
            for (int i = 0; i < statusHistoryArray.size(); i++) {
                if (statusHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + statusHistoryArray.get(i).getNodeType() + " for element: statusHistory");
                }
                builder.statusHistory(parseEpisodeOfCareStatusHistory("statusHistory", statusHistoryArray.get(i), i));
            }
        }
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        ArrayNode diagnosisArray = getArrayNode(jsonNode, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                if (diagnosisArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + diagnosisArray.get(i).getNodeType() + " for element: diagnosis");
                }
                builder.diagnosis(parseEpisodeOfCareDiagnosis("diagnosis", diagnosisArray.get(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.managingOrganization(parseReference("managingOrganization", getJsonNode(jsonNode, "managingOrganization", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode referralRequestArray = getArrayNode(jsonNode, "referralRequest");
        if (referralRequestArray != null) {
            for (int i = 0; i < referralRequestArray.size(); i++) {
                if (referralRequestArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referralRequestArray.get(i).getNodeType() + " for element: referralRequest");
                }
                builder.referralRequest(parseReference("referralRequest", referralRequestArray.get(i), i));
            }
        }
        builder.careManager(parseReference("careManager", getJsonNode(jsonNode, "careManager", JsonNode.class), -1));
        ArrayNode teamArray = getArrayNode(jsonNode, "team");
        if (teamArray != null) {
            for (int i = 0; i < teamArray.size(); i++) {
                if (teamArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + teamArray.get(i).getNodeType() + " for element: team");
                }
                builder.team(parseReference("team", teamArray.get(i), i));
            }
        }
        ArrayNode accountArray = getArrayNode(jsonNode, "account");
        if (accountArray != null) {
            for (int i = 0; i < accountArray.size(); i++) {
                if (accountArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + accountArray.get(i).getNodeType() + " for element: account");
                }
                builder.account(parseReference("account", accountArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EpisodeOfCare.Diagnosis parseEpisodeOfCareDiagnosis(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EpisodeOfCare.Diagnosis.class, jsonNode);
        }
        EpisodeOfCare.Diagnosis.Builder builder = EpisodeOfCare.Diagnosis.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.condition(parseReference("condition", getJsonNode(jsonNode, "condition", JsonNode.class), -1));
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", getJsonNode(jsonNode, "rank", NumericNode.class), jsonNode.get("_rank"), -1));
        stackPop();
        return builder.build();
    }

    private EpisodeOfCare.StatusHistory parseEpisodeOfCareStatusHistory(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EpisodeOfCare.StatusHistory.class, jsonNode);
        }
        EpisodeOfCare.StatusHistory.Builder builder = EpisodeOfCare.StatusHistory.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.status((EpisodeOfCareStatus) parseString(EpisodeOfCareStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private EventDefinition parseEventDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EventDefinition.class, jsonNode);
        }
        EventDefinition.Builder builder = EventDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonNode(jsonNode, "usage", TextNode.class), jsonNode.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode topicArray = getArrayNode(jsonNode, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                if (topicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + topicArray.get(i).getNodeType() + " for element: topic");
                }
                builder.topic(parseCodeableConcept("topic", topicArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        ArrayNode triggerArray = getArrayNode(jsonNode, "trigger");
        if (triggerArray != null) {
            for (int i = 0; i < triggerArray.size(); i++) {
                if (triggerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + triggerArray.get(i).getNodeType() + " for element: trigger");
                }
                builder.trigger(parseTriggerDefinition("trigger", triggerArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Evidence parseEvidence(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Evidence.class, jsonNode);
        }
        Evidence.Builder builder = Evidence.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.citeAs(parseChoiceElement("citeAs", jsonNode, Reference.class, Markdown.class));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.assertion((Markdown) parseString(Markdown.builder(), "assertion", getJsonNode(jsonNode, "assertion", TextNode.class), jsonNode.get("_assertion"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode variableDefinitionArray = getArrayNode(jsonNode, "variableDefinition");
        if (variableDefinitionArray != null) {
            for (int i = 0; i < variableDefinitionArray.size(); i++) {
                if (variableDefinitionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + variableDefinitionArray.get(i).getNodeType() + " for element: variableDefinition");
                }
                builder.variableDefinition(parseEvidenceVariableDefinition("variableDefinition", variableDefinitionArray.get(i), i));
            }
        }
        builder.synthesisType(parseCodeableConcept("synthesisType", getJsonNode(jsonNode, "synthesisType", JsonNode.class), -1));
        builder.studyType(parseCodeableConcept("studyType", getJsonNode(jsonNode, "studyType", JsonNode.class), -1));
        ArrayNode statisticArray = getArrayNode(jsonNode, "statistic");
        if (statisticArray != null) {
            for (int i = 0; i < statisticArray.size(); i++) {
                if (statisticArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + statisticArray.get(i).getNodeType() + " for element: statistic");
                }
                builder.statistic(parseEvidenceStatistic("statistic", statisticArray.get(i), i));
            }
        }
        ArrayNode certaintyArray = getArrayNode(jsonNode, "certainty");
        if (certaintyArray != null) {
            for (int i = 0; i < certaintyArray.size(); i++) {
                if (certaintyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + certaintyArray.get(i).getNodeType() + " for element: certainty");
                }
                builder.certainty(parseEvidenceCertainty("certainty", certaintyArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Evidence.Certainty parseEvidenceCertainty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Evidence.Certainty.class, jsonNode);
        }
        Evidence.Certainty.Builder builder = Evidence.Certainty.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.rating(parseCodeableConcept("rating", getJsonNode(jsonNode, "rating", JsonNode.class), -1));
        builder.rater(parseString("rater", getJsonNode(jsonNode, "rater", TextNode.class), jsonNode.get("_rater"), -1));
        ArrayNode subcomponentArray = getArrayNode(jsonNode, "subcomponent");
        if (subcomponentArray != null) {
            for (int i = 0; i < subcomponentArray.size(); i++) {
                if (subcomponentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subcomponentArray.get(i).getNodeType() + " for element: subcomponent");
                }
                builder.subcomponent(parseEvidenceCertainty("subcomponent", subcomponentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Evidence.Statistic parseEvidenceStatistic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Evidence.Statistic.class, jsonNode);
        }
        Evidence.Statistic.Builder builder = Evidence.Statistic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.statisticType(parseCodeableConcept("statisticType", getJsonNode(jsonNode, "statisticType", JsonNode.class), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.quantity(parseQuantity("quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.numberOfEvents((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfEvents", getJsonNode(jsonNode, "numberOfEvents", NumericNode.class), jsonNode.get("_numberOfEvents"), -1));
        builder.numberAffected((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberAffected", getJsonNode(jsonNode, "numberAffected", NumericNode.class), jsonNode.get("_numberAffected"), -1));
        builder.sampleSize(parseEvidenceStatisticSampleSize("sampleSize", getJsonNode(jsonNode, "sampleSize", JsonNode.class), -1));
        ArrayNode attributeEstimateArray = getArrayNode(jsonNode, "attributeEstimate");
        if (attributeEstimateArray != null) {
            for (int i = 0; i < attributeEstimateArray.size(); i++) {
                if (attributeEstimateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + attributeEstimateArray.get(i).getNodeType() + " for element: attributeEstimate");
                }
                builder.attributeEstimate(parseEvidenceStatisticAttributeEstimate("attributeEstimate", attributeEstimateArray.get(i), i));
            }
        }
        ArrayNode modelCharacteristicArray = getArrayNode(jsonNode, "modelCharacteristic");
        if (modelCharacteristicArray != null) {
            for (int i = 0; i < modelCharacteristicArray.size(); i++) {
                if (modelCharacteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modelCharacteristicArray.get(i).getNodeType() + " for element: modelCharacteristic");
                }
                builder.modelCharacteristic(parseEvidenceStatisticModelCharacteristic("modelCharacteristic", modelCharacteristicArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Evidence.Statistic.AttributeEstimate parseEvidenceStatisticAttributeEstimate(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Evidence.Statistic.AttributeEstimate.class, jsonNode);
        }
        Evidence.Statistic.AttributeEstimate.Builder builder = Evidence.Statistic.AttributeEstimate.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.quantity(parseQuantity("quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.level(parseDecimal("level", getJsonNode(jsonNode, "level", NumericNode.class), jsonNode.get("_level"), -1));
        builder.range(parseRange("range", getJsonNode(jsonNode, "range", JsonNode.class), -1));
        ArrayNode attributeEstimateArray = getArrayNode(jsonNode, "attributeEstimate");
        if (attributeEstimateArray != null) {
            for (int i = 0; i < attributeEstimateArray.size(); i++) {
                if (attributeEstimateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + attributeEstimateArray.get(i).getNodeType() + " for element: attributeEstimate");
                }
                builder.attributeEstimate(parseEvidenceStatisticAttributeEstimate("attributeEstimate", attributeEstimateArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Evidence.Statistic.ModelCharacteristic parseEvidenceStatisticModelCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Evidence.Statistic.ModelCharacteristic.class, jsonNode);
        }
        Evidence.Statistic.ModelCharacteristic.Builder builder = Evidence.Statistic.ModelCharacteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "value", getJsonNode(jsonNode, "value", JsonNode.class), -1));
        ArrayNode variableArray = getArrayNode(jsonNode, "variable");
        if (variableArray != null) {
            for (int i = 0; i < variableArray.size(); i++) {
                if (variableArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + variableArray.get(i).getNodeType() + " for element: variable");
                }
                builder.variable(parseEvidenceStatisticModelCharacteristicVariable("variable", variableArray.get(i), i));
            }
        }
        ArrayNode attributeEstimateArray = getArrayNode(jsonNode, "attributeEstimate");
        if (attributeEstimateArray != null) {
            for (int i = 0; i < attributeEstimateArray.size(); i++) {
                if (attributeEstimateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + attributeEstimateArray.get(i).getNodeType() + " for element: attributeEstimate");
                }
                builder.attributeEstimate(parseEvidenceStatisticAttributeEstimate("attributeEstimate", attributeEstimateArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Evidence.Statistic.ModelCharacteristic.Variable parseEvidenceStatisticModelCharacteristicVariable(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Evidence.Statistic.ModelCharacteristic.Variable.class, jsonNode);
        }
        Evidence.Statistic.ModelCharacteristic.Variable.Builder builder = Evidence.Statistic.ModelCharacteristic.Variable.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.variableDefinition(parseReference("variableDefinition", getJsonNode(jsonNode, "variableDefinition", JsonNode.class), -1));
        builder.handling((EvidenceVariableHandling) parseString(EvidenceVariableHandling.builder(), "handling", getJsonNode(jsonNode, "handling", TextNode.class), jsonNode.get("_handling"), -1));
        ArrayNode valueCategoryArray = getArrayNode(jsonNode, "valueCategory");
        if (valueCategoryArray != null) {
            for (int i = 0; i < valueCategoryArray.size(); i++) {
                if (valueCategoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + valueCategoryArray.get(i).getNodeType() + " for element: valueCategory");
                }
                builder.valueCategory(parseCodeableConcept("valueCategory", valueCategoryArray.get(i), i));
            }
        }
        ArrayNode valueQuantityArray = getArrayNode(jsonNode, "valueQuantity");
        if (valueQuantityArray != null) {
            for (int i = 0; i < valueQuantityArray.size(); i++) {
                if (valueQuantityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + valueQuantityArray.get(i).getNodeType() + " for element: valueQuantity");
                }
                builder.valueQuantity(parseQuantity("valueQuantity", valueQuantityArray.get(i), i));
            }
        }
        ArrayNode valueRangeArray = getArrayNode(jsonNode, "valueRange");
        if (valueRangeArray != null) {
            for (int i = 0; i < valueRangeArray.size(); i++) {
                if (valueRangeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + valueRangeArray.get(i).getNodeType() + " for element: valueRange");
                }
                builder.valueRange(parseRange("valueRange", valueRangeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Evidence.Statistic.SampleSize parseEvidenceStatisticSampleSize(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Evidence.Statistic.SampleSize.class, jsonNode);
        }
        Evidence.Statistic.SampleSize.Builder builder = Evidence.Statistic.SampleSize.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.numberOfStudies((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfStudies", getJsonNode(jsonNode, "numberOfStudies", NumericNode.class), jsonNode.get("_numberOfStudies"), -1));
        builder.numberOfParticipants((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfParticipants", getJsonNode(jsonNode, "numberOfParticipants", NumericNode.class), jsonNode.get("_numberOfParticipants"), -1));
        builder.knownDataCount((UnsignedInt) parseInteger(UnsignedInt.builder(), "knownDataCount", getJsonNode(jsonNode, "knownDataCount", NumericNode.class), jsonNode.get("_knownDataCount"), -1));
        stackPop();
        return builder.build();
    }

    private Evidence.VariableDefinition parseEvidenceVariableDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Evidence.VariableDefinition.class, jsonNode);
        }
        Evidence.VariableDefinition.Builder builder = Evidence.VariableDefinition.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.variableRole(parseCodeableConcept("variableRole", getJsonNode(jsonNode, "variableRole", JsonNode.class), -1));
        builder.observed(parseReference("observed", getJsonNode(jsonNode, "observed", JsonNode.class), -1));
        builder.intended(parseReference("intended", getJsonNode(jsonNode, "intended", JsonNode.class), -1));
        builder.directnessMatch(parseCodeableConcept("directnessMatch", getJsonNode(jsonNode, "directnessMatch", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private EvidenceReport parseEvidenceReport(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceReport.class, jsonNode);
        }
        EvidenceReport.Builder builder = EvidenceReport.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode relatedIdentifierArray = getArrayNode(jsonNode, "relatedIdentifier");
        if (relatedIdentifierArray != null) {
            for (int i = 0; i < relatedIdentifierArray.size(); i++) {
                if (relatedIdentifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedIdentifierArray.get(i).getNodeType() + " for element: relatedIdentifier");
                }
                builder.relatedIdentifier(parseIdentifier("relatedIdentifier", relatedIdentifierArray.get(i), i));
            }
        }
        builder.citeAs(parseChoiceElement("citeAs", jsonNode, Reference.class, Markdown.class));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        builder.subject(parseEvidenceReportSubject("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatesToArray = getArrayNode(jsonNode, "relatesTo");
        if (relatesToArray != null) {
            for (int i = 0; i < relatesToArray.size(); i++) {
                if (relatesToArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatesToArray.get(i).getNodeType() + " for element: relatesTo");
                }
                builder.relatesTo(parseEvidenceReportRelatesTo("relatesTo", relatesToArray.get(i), i));
            }
        }
        ArrayNode sectionArray = getArrayNode(jsonNode, "section");
        if (sectionArray != null) {
            for (int i = 0; i < sectionArray.size(); i++) {
                if (sectionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sectionArray.get(i).getNodeType() + " for element: section");
                }
                builder.section(parseEvidenceReportSection("section", sectionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EvidenceReport.RelatesTo parseEvidenceReportRelatesTo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceReport.RelatesTo.class, jsonNode);
        }
        EvidenceReport.RelatesTo.Builder builder = EvidenceReport.RelatesTo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((ReportRelationshipType) parseString(ReportRelationshipType.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.target(parseChoiceElement("target", jsonNode, Identifier.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private EvidenceReport.Section parseEvidenceReportSection(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceReport.Section.class, jsonNode);
        }
        EvidenceReport.Section.Builder builder = EvidenceReport.Section.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.focus(parseCodeableConcept("focus", getJsonNode(jsonNode, "focus", JsonNode.class), -1));
        builder.focusReference(parseReference("focusReference", getJsonNode(jsonNode, "focusReference", JsonNode.class), -1));
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseReference("author", authorArray.get(i), i));
            }
        }
        builder.text(parseNarrative("text", getJsonNode(jsonNode, "text", JsonNode.class), -1));
        builder.mode((SectionMode) parseString(SectionMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.orderedBy(parseCodeableConcept("orderedBy", getJsonNode(jsonNode, "orderedBy", JsonNode.class), -1));
        ArrayNode entryClassifierArray = getArrayNode(jsonNode, "entryClassifier");
        if (entryClassifierArray != null) {
            for (int i = 0; i < entryClassifierArray.size(); i++) {
                if (entryClassifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entryClassifierArray.get(i).getNodeType() + " for element: entryClassifier");
                }
                builder.entryClassifier(parseCodeableConcept("entryClassifier", entryClassifierArray.get(i), i));
            }
        }
        ArrayNode entryReferenceArray = getArrayNode(jsonNode, "entryReference");
        if (entryReferenceArray != null) {
            for (int i = 0; i < entryReferenceArray.size(); i++) {
                if (entryReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entryReferenceArray.get(i).getNodeType() + " for element: entryReference");
                }
                builder.entryReference(parseReference("entryReference", entryReferenceArray.get(i), i));
            }
        }
        ArrayNode entryQuantityArray = getArrayNode(jsonNode, "entryQuantity");
        if (entryQuantityArray != null) {
            for (int i = 0; i < entryQuantityArray.size(); i++) {
                if (entryQuantityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entryQuantityArray.get(i).getNodeType() + " for element: entryQuantity");
                }
                builder.entryQuantity(parseQuantity("entryQuantity", entryQuantityArray.get(i), i));
            }
        }
        builder.emptyReason(parseCodeableConcept("emptyReason", getJsonNode(jsonNode, "emptyReason", JsonNode.class), -1));
        ArrayNode sectionArray = getArrayNode(jsonNode, "section");
        if (sectionArray != null) {
            for (int i = 0; i < sectionArray.size(); i++) {
                if (sectionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sectionArray.get(i).getNodeType() + " for element: section");
                }
                builder.section(parseEvidenceReportSection("section", sectionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EvidenceReport.Subject parseEvidenceReportSubject(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceReport.Subject.class, jsonNode);
        }
        EvidenceReport.Subject.Builder builder = EvidenceReport.Subject.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode characteristicArray = getArrayNode(jsonNode, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                if (characteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + characteristicArray.get(i).getNodeType() + " for element: characteristic");
                }
                builder.characteristic(parseEvidenceReportSubjectCharacteristic("characteristic", characteristicArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EvidenceReport.Subject.Characteristic parseEvidenceReportSubjectCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceReport.Subject.Characteristic.class, jsonNode);
        }
        EvidenceReport.Subject.Characteristic.Builder builder = EvidenceReport.Subject.Characteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, Reference.class, CodeableConcept.class, Boolean.class, Quantity.class, Range.class));
        builder.exclude(parseBoolean("exclude", getJsonNode(jsonNode, "exclude", JsonNode.class), jsonNode.get("_exclude"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private EvidenceVariable parseEvidenceVariable(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceVariable.class, jsonNode);
        }
        EvidenceVariable.Builder builder = EvidenceVariable.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", getJsonNode(jsonNode, "shortTitle", TextNode.class), jsonNode.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        builder.actual(parseBoolean("actual", getJsonNode(jsonNode, "actual", JsonNode.class), jsonNode.get("_actual"), -1));
        builder.characteristicCombination((CharacteristicCombination) parseString(CharacteristicCombination.builder(), "characteristicCombination", getJsonNode(jsonNode, "characteristicCombination", TextNode.class), jsonNode.get("_characteristicCombination"), -1));
        ArrayNode characteristicArray = getArrayNode(jsonNode, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                if (characteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + characteristicArray.get(i).getNodeType() + " for element: characteristic");
                }
                builder.characteristic(parseEvidenceVariableCharacteristic("characteristic", characteristicArray.get(i), i));
            }
        }
        builder.handling((EvidenceVariableHandling) parseString(EvidenceVariableHandling.builder(), "handling", getJsonNode(jsonNode, "handling", TextNode.class), jsonNode.get("_handling"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseEvidenceVariableCategory("category", categoryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EvidenceVariable.Category parseEvidenceVariableCategory(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceVariable.Category.class, jsonNode);
        }
        EvidenceVariable.Category.Builder builder = EvidenceVariable.Category.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Range.class));
        stackPop();
        return builder.build();
    }

    private EvidenceVariable.Characteristic parseEvidenceVariableCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceVariable.Characteristic.class, jsonNode);
        }
        EvidenceVariable.Characteristic.Builder builder = EvidenceVariable.Characteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.definition(parseChoiceElement("definition", jsonNode, Reference.class, Canonical.class, CodeableConcept.class, Expression.class));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        builder.device(parseReference("device", getJsonNode(jsonNode, "device", JsonNode.class), -1));
        builder.exclude(parseBoolean("exclude", getJsonNode(jsonNode, "exclude", JsonNode.class), jsonNode.get("_exclude"), -1));
        builder.timeFromStart(parseEvidenceVariableCharacteristicTimeFromStart("timeFromStart", getJsonNode(jsonNode, "timeFromStart", JsonNode.class), -1));
        builder.groupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "groupMeasure", getJsonNode(jsonNode, "groupMeasure", TextNode.class), jsonNode.get("_groupMeasure"), -1));
        stackPop();
        return builder.build();
    }

    private EvidenceVariable.Characteristic.TimeFromStart parseEvidenceVariableCharacteristicTimeFromStart(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(EvidenceVariable.Characteristic.TimeFromStart.class, jsonNode);
        }
        EvidenceVariable.Characteristic.TimeFromStart.Builder builder = EvidenceVariable.Characteristic.TimeFromStart.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.quantity(parseQuantity("quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.range(parseRange("range", getJsonNode(jsonNode, "range", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario parseExampleScenario(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.class, jsonNode);
        }
        ExampleScenario.Builder builder = ExampleScenario.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        ArrayNode actorArray = getArrayNode(jsonNode, "actor");
        if (actorArray != null) {
            for (int i = 0; i < actorArray.size(); i++) {
                if (actorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actorArray.get(i).getNodeType() + " for element: actor");
                }
                builder.actor(parseExampleScenarioActor("actor", actorArray.get(i), i));
            }
        }
        ArrayNode instanceArray = getArrayNode(jsonNode, "instance");
        if (instanceArray != null) {
            for (int i = 0; i < instanceArray.size(); i++) {
                if (instanceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + instanceArray.get(i).getNodeType() + " for element: instance");
                }
                builder.instance(parseExampleScenarioInstance("instance", instanceArray.get(i), i));
            }
        }
        ArrayNode processArray = getArrayNode(jsonNode, "process");
        if (processArray != null) {
            for (int i = 0; i < processArray.size(); i++) {
                if (processArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + processArray.get(i).getNodeType() + " for element: process");
                }
                builder.process(parseExampleScenarioProcess("process", processArray.get(i), i));
            }
        }
        ArrayNode workflowArray = getArrayNode(jsonNode, "workflow", true);
        if (workflowArray != null) {
            ArrayNode _workflowArray = getArrayNode(jsonNode, "_workflow");
            for (int i = 0; i < workflowArray.size(); i++) {
                builder.workflow((Canonical) parseUri(Canonical.builder(), "workflow", workflowArray.get(i), getJsonNode(_workflowArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Actor parseExampleScenarioActor(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.Actor.class, jsonNode);
        }
        ExampleScenario.Actor.Builder builder = ExampleScenario.Actor.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.actorId(parseString("actorId", getJsonNode(jsonNode, "actorId", TextNode.class), jsonNode.get("_actorId"), -1));
        builder.type((ExampleScenarioActorType) parseString(ExampleScenarioActorType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Instance parseExampleScenarioInstance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.Instance.class, jsonNode);
        }
        ExampleScenario.Instance.Builder builder = ExampleScenario.Instance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.resourceId(parseString("resourceId", getJsonNode(jsonNode, "resourceId", TextNode.class), jsonNode.get("_resourceId"), -1));
        builder.resourceType((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "resourceType", getJsonNode(jsonNode, "resourceType", TextNode.class), jsonNode.get("_resourceType"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode versionArray = getArrayNode(jsonNode, "version");
        if (versionArray != null) {
            for (int i = 0; i < versionArray.size(); i++) {
                if (versionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + versionArray.get(i).getNodeType() + " for element: version");
                }
                builder.version(parseExampleScenarioInstanceVersion("version", versionArray.get(i), i));
            }
        }
        ArrayNode containedInstanceArray = getArrayNode(jsonNode, "containedInstance");
        if (containedInstanceArray != null) {
            for (int i = 0; i < containedInstanceArray.size(); i++) {
                if (containedInstanceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + containedInstanceArray.get(i).getNodeType() + " for element: containedInstance");
                }
                builder.containedInstance(parseExampleScenarioInstanceContainedInstance("containedInstance", containedInstanceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Instance.ContainedInstance parseExampleScenarioInstanceContainedInstance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.Instance.ContainedInstance.class, jsonNode);
        }
        ExampleScenario.Instance.ContainedInstance.Builder builder = ExampleScenario.Instance.ContainedInstance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.resourceId(parseString("resourceId", getJsonNode(jsonNode, "resourceId", TextNode.class), jsonNode.get("_resourceId"), -1));
        builder.versionId(parseString("versionId", getJsonNode(jsonNode, "versionId", TextNode.class), jsonNode.get("_versionId"), -1));
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Instance.Version parseExampleScenarioInstanceVersion(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.Instance.Version.class, jsonNode);
        }
        ExampleScenario.Instance.Version.Builder builder = ExampleScenario.Instance.Version.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.versionId(parseString("versionId", getJsonNode(jsonNode, "versionId", TextNode.class), jsonNode.get("_versionId"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Process parseExampleScenarioProcess(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.Process.class, jsonNode);
        }
        ExampleScenario.Process.Builder builder = ExampleScenario.Process.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.preConditions((Markdown) parseString(Markdown.builder(), "preConditions", getJsonNode(jsonNode, "preConditions", TextNode.class), jsonNode.get("_preConditions"), -1));
        builder.postConditions((Markdown) parseString(Markdown.builder(), "postConditions", getJsonNode(jsonNode, "postConditions", TextNode.class), jsonNode.get("_postConditions"), -1));
        ArrayNode stepArray = getArrayNode(jsonNode, "step");
        if (stepArray != null) {
            for (int i = 0; i < stepArray.size(); i++) {
                if (stepArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + stepArray.get(i).getNodeType() + " for element: step");
                }
                builder.step(parseExampleScenarioProcessStep("step", stepArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Process.Step parseExampleScenarioProcessStep(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.Process.Step.class, jsonNode);
        }
        ExampleScenario.Process.Step.Builder builder = ExampleScenario.Process.Step.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode processArray = getArrayNode(jsonNode, "process");
        if (processArray != null) {
            for (int i = 0; i < processArray.size(); i++) {
                if (processArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + processArray.get(i).getNodeType() + " for element: process");
                }
                builder.process(parseExampleScenarioProcess("process", processArray.get(i), i));
            }
        }
        builder.pause(parseBoolean("pause", getJsonNode(jsonNode, "pause", JsonNode.class), jsonNode.get("_pause"), -1));
        builder.operation(parseExampleScenarioProcessStepOperation("operation", getJsonNode(jsonNode, "operation", JsonNode.class), -1));
        ArrayNode alternativeArray = getArrayNode(jsonNode, "alternative");
        if (alternativeArray != null) {
            for (int i = 0; i < alternativeArray.size(); i++) {
                if (alternativeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + alternativeArray.get(i).getNodeType() + " for element: alternative");
                }
                builder.alternative(parseExampleScenarioProcessStepAlternative("alternative", alternativeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Process.Step.Alternative parseExampleScenarioProcessStepAlternative(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.Process.Step.Alternative.class, jsonNode);
        }
        ExampleScenario.Process.Step.Alternative.Builder builder = ExampleScenario.Process.Step.Alternative.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode stepArray = getArrayNode(jsonNode, "step");
        if (stepArray != null) {
            for (int i = 0; i < stepArray.size(); i++) {
                if (stepArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + stepArray.get(i).getNodeType() + " for element: step");
                }
                builder.step(parseExampleScenarioProcessStep("step", stepArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Process.Step.Operation parseExampleScenarioProcessStepOperation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExampleScenario.Process.Step.Operation.class, jsonNode);
        }
        ExampleScenario.Process.Step.Operation.Builder builder = ExampleScenario.Process.Step.Operation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.number(parseString("number", getJsonNode(jsonNode, "number", TextNode.class), jsonNode.get("_number"), -1));
        builder.type(parseString("type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.initiator(parseString("initiator", getJsonNode(jsonNode, "initiator", TextNode.class), jsonNode.get("_initiator"), -1));
        builder.receiver(parseString("receiver", getJsonNode(jsonNode, "receiver", TextNode.class), jsonNode.get("_receiver"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.initiatorActive(parseBoolean("initiatorActive", getJsonNode(jsonNode, "initiatorActive", JsonNode.class), jsonNode.get("_initiatorActive"), -1));
        builder.receiverActive(parseBoolean("receiverActive", getJsonNode(jsonNode, "receiverActive", JsonNode.class), jsonNode.get("_receiverActive"), -1));
        builder.request(parseExampleScenarioInstanceContainedInstance("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        builder.response(parseExampleScenarioInstanceContainedInstance("response", getJsonNode(jsonNode, "response", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit parseExplanationOfBenefit(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.class, jsonNode);
        }
        ExplanationOfBenefit.Builder builder = ExplanationOfBenefit.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ExplanationOfBenefitStatus) parseString(ExplanationOfBenefitStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonNode(jsonNode, "subType", JsonNode.class), -1));
        builder.use((Use) parseString(Use.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.billablePeriod(parsePeriod("billablePeriod", getJsonNode(jsonNode, "billablePeriod", JsonNode.class), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.enterer(parseReference("enterer", getJsonNode(jsonNode, "enterer", JsonNode.class), -1));
        builder.insurer(parseReference("insurer", getJsonNode(jsonNode, "insurer", JsonNode.class), -1));
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.priority(parseCodeableConcept("priority", getJsonNode(jsonNode, "priority", JsonNode.class), -1));
        builder.fundsReserveRequested(parseCodeableConcept("fundsReserveRequested", getJsonNode(jsonNode, "fundsReserveRequested", JsonNode.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", getJsonNode(jsonNode, "fundsReserve", JsonNode.class), -1));
        ArrayNode relatedArray = getArrayNode(jsonNode, "related");
        if (relatedArray != null) {
            for (int i = 0; i < relatedArray.size(); i++) {
                if (relatedArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArray.get(i).getNodeType() + " for element: related");
                }
                builder.related(parseExplanationOfBenefitRelated("related", relatedArray.get(i), i));
            }
        }
        builder.prescription(parseReference("prescription", getJsonNode(jsonNode, "prescription", JsonNode.class), -1));
        builder.originalPrescription(parseReference("originalPrescription", getJsonNode(jsonNode, "originalPrescription", JsonNode.class), -1));
        builder.payee(parseExplanationOfBenefitPayee("payee", getJsonNode(jsonNode, "payee", JsonNode.class), -1));
        builder.referral(parseReference("referral", getJsonNode(jsonNode, "referral", JsonNode.class), -1));
        builder.facility(parseReference("facility", getJsonNode(jsonNode, "facility", JsonNode.class), -1));
        builder.claim(parseReference("claim", getJsonNode(jsonNode, "claim", JsonNode.class), -1));
        builder.claimResponse(parseReference("claimResponse", getJsonNode(jsonNode, "claimResponse", JsonNode.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonNode(jsonNode, "outcome", TextNode.class), jsonNode.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonNode(jsonNode, "disposition", TextNode.class), jsonNode.get("_disposition"), -1));
        ArrayNode preAuthRefArray = getArrayNode(jsonNode, "preAuthRef", true);
        if (preAuthRefArray != null) {
            ArrayNode _preAuthRefArray = getArrayNode(jsonNode, "_preAuthRef");
            for (int i = 0; i < preAuthRefArray.size(); i++) {
                builder.preAuthRef(parseString("preAuthRef", preAuthRefArray.get(i), getJsonNode(_preAuthRefArray, i), i));
            }
        }
        ArrayNode preAuthRefPeriodArray = getArrayNode(jsonNode, "preAuthRefPeriod");
        if (preAuthRefPeriodArray != null) {
            for (int i = 0; i < preAuthRefPeriodArray.size(); i++) {
                if (preAuthRefPeriodArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + preAuthRefPeriodArray.get(i).getNodeType() + " for element: preAuthRefPeriod");
                }
                builder.preAuthRefPeriod(parsePeriod("preAuthRefPeriod", preAuthRefPeriodArray.get(i), i));
            }
        }
        ArrayNode careTeamArray = getArrayNode(jsonNode, "careTeam");
        if (careTeamArray != null) {
            for (int i = 0; i < careTeamArray.size(); i++) {
                if (careTeamArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + careTeamArray.get(i).getNodeType() + " for element: careTeam");
                }
                builder.careTeam(parseExplanationOfBenefitCareTeam("careTeam", careTeamArray.get(i), i));
            }
        }
        ArrayNode supportingInfoArray = getArrayNode(jsonNode, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                if (supportingInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInfoArray.get(i).getNodeType() + " for element: supportingInfo");
                }
                builder.supportingInfo(parseExplanationOfBenefitSupportingInfo("supportingInfo", supportingInfoArray.get(i), i));
            }
        }
        ArrayNode diagnosisArray = getArrayNode(jsonNode, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                if (diagnosisArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + diagnosisArray.get(i).getNodeType() + " for element: diagnosis");
                }
                builder.diagnosis(parseExplanationOfBenefitDiagnosis("diagnosis", diagnosisArray.get(i), i));
            }
        }
        ArrayNode procedureArray = getArrayNode(jsonNode, "procedure");
        if (procedureArray != null) {
            for (int i = 0; i < procedureArray.size(); i++) {
                if (procedureArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + procedureArray.get(i).getNodeType() + " for element: procedure");
                }
                builder.procedure(parseExplanationOfBenefitProcedure("procedure", procedureArray.get(i), i));
            }
        }
        builder.precedence((PositiveInt) parseInteger(PositiveInt.builder(), "precedence", getJsonNode(jsonNode, "precedence", NumericNode.class), jsonNode.get("_precedence"), -1));
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseExplanationOfBenefitInsurance("insurance", insuranceArray.get(i), i));
            }
        }
        builder.accident(parseExplanationOfBenefitAccident("accident", getJsonNode(jsonNode, "accident", JsonNode.class), -1));
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseExplanationOfBenefitItem("item", itemArray.get(i), i));
            }
        }
        ArrayNode addItemArray = getArrayNode(jsonNode, "addItem");
        if (addItemArray != null) {
            for (int i = 0; i < addItemArray.size(); i++) {
                if (addItemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addItemArray.get(i).getNodeType() + " for element: addItem");
                }
                builder.addItem(parseExplanationOfBenefitAddItem("addItem", addItemArray.get(i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode totalArray = getArrayNode(jsonNode, "total");
        if (totalArray != null) {
            for (int i = 0; i < totalArray.size(); i++) {
                if (totalArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + totalArray.get(i).getNodeType() + " for element: total");
                }
                builder.total(parseExplanationOfBenefitTotal("total", totalArray.get(i), i));
            }
        }
        builder.payment(parseExplanationOfBenefitPayment("payment", getJsonNode(jsonNode, "payment", JsonNode.class), -1));
        builder.formCode(parseCodeableConcept("formCode", getJsonNode(jsonNode, "formCode", JsonNode.class), -1));
        builder.form(parseAttachment("form", getJsonNode(jsonNode, "form", JsonNode.class), -1));
        ArrayNode processNoteArray = getArrayNode(jsonNode, "processNote");
        if (processNoteArray != null) {
            for (int i = 0; i < processNoteArray.size(); i++) {
                if (processNoteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + processNoteArray.get(i).getNodeType() + " for element: processNote");
                }
                builder.processNote(parseExplanationOfBenefitProcessNote("processNote", processNoteArray.get(i), i));
            }
        }
        builder.benefitPeriod(parsePeriod("benefitPeriod", getJsonNode(jsonNode, "benefitPeriod", JsonNode.class), -1));
        ArrayNode benefitBalanceArray = getArrayNode(jsonNode, "benefitBalance");
        if (benefitBalanceArray != null) {
            for (int i = 0; i < benefitBalanceArray.size(); i++) {
                if (benefitBalanceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + benefitBalanceArray.get(i).getNodeType() + " for element: benefitBalance");
                }
                builder.benefitBalance(parseExplanationOfBenefitBenefitBalance("benefitBalance", benefitBalanceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Accident parseExplanationOfBenefitAccident(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Accident.class, jsonNode);
        }
        ExplanationOfBenefit.Accident.Builder builder = ExplanationOfBenefit.Accident.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.date(parseDate("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.location(parseChoiceElement("location", jsonNode, Address.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.AddItem parseExplanationOfBenefitAddItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.AddItem.class, jsonNode);
        }
        ExplanationOfBenefit.AddItem.Builder builder = ExplanationOfBenefit.AddItem.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode itemSequenceArray = getArrayNode(jsonNode, "itemSequence", true);
        if (itemSequenceArray != null) {
            ArrayNode _itemSequenceArray = getArrayNode(jsonNode, "_itemSequence");
            for (int i = 0; i < itemSequenceArray.size(); i++) {
                builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", itemSequenceArray.get(i), getJsonNode(_itemSequenceArray, i), i));
            }
        }
        ArrayNode detailSequenceArray = getArrayNode(jsonNode, "detailSequence", true);
        if (detailSequenceArray != null) {
            ArrayNode _detailSequenceArray = getArrayNode(jsonNode, "_detailSequence");
            for (int i = 0; i < detailSequenceArray.size(); i++) {
                builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", detailSequenceArray.get(i), getJsonNode(_detailSequenceArray, i), i));
            }
        }
        ArrayNode subDetailSequenceArray = getArrayNode(jsonNode, "subDetailSequence", true);
        if (subDetailSequenceArray != null) {
            ArrayNode _subDetailSequenceArray = getArrayNode(jsonNode, "_subDetailSequence");
            for (int i = 0; i < subDetailSequenceArray.size(); i++) {
                builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", subDetailSequenceArray.get(i), getJsonNode(_subDetailSequenceArray, i), i));
            }
        }
        ArrayNode providerArray = getArrayNode(jsonNode, "provider");
        if (providerArray != null) {
            for (int i = 0; i < providerArray.size(); i++) {
                if (providerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + providerArray.get(i).getNodeType() + " for element: provider");
                }
                builder.provider(parseReference("provider", providerArray.get(i), i));
            }
        }
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        ArrayNode programCodeArray = getArrayNode(jsonNode, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                if (programCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programCodeArray.get(i).getNodeType() + " for element: programCode");
                }
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.get(i), i));
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonNode, Date.class, Period.class));
        builder.location(parseChoiceElement("location", jsonNode, CodeableConcept.class, Address.class, Reference.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        ArrayNode subSiteArray = getArrayNode(jsonNode, "subSite");
        if (subSiteArray != null) {
            for (int i = 0; i < subSiteArray.size(); i++) {
                if (subSiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subSiteArray.get(i).getNodeType() + " for element: subSite");
                }
                builder.subSite(parseCodeableConcept("subSite", subSiteArray.get(i), i));
            }
        }
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseExplanationOfBenefitAddItemDetail("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.AddItem.Detail parseExplanationOfBenefitAddItemDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.AddItem.Detail.class, jsonNode);
        }
        ExplanationOfBenefit.AddItem.Detail.Builder builder = ExplanationOfBenefit.AddItem.Detail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode subDetailArray = getArrayNode(jsonNode, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                if (subDetailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subDetailArray.get(i).getNodeType() + " for element: subDetail");
                }
                builder.subDetail(parseExplanationOfBenefitAddItemDetailSubDetail("subDetail", subDetailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.AddItem.Detail.SubDetail parseExplanationOfBenefitAddItemDetailSubDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.AddItem.Detail.SubDetail.class, jsonNode);
        }
        ExplanationOfBenefit.AddItem.Detail.SubDetail.Builder builder = ExplanationOfBenefit.AddItem.Detail.SubDetail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.BenefitBalance parseExplanationOfBenefitBenefitBalance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.BenefitBalance.class, jsonNode);
        }
        ExplanationOfBenefit.BenefitBalance.Builder builder = ExplanationOfBenefit.BenefitBalance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.excluded(parseBoolean("excluded", getJsonNode(jsonNode, "excluded", JsonNode.class), jsonNode.get("_excluded"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.network(parseCodeableConcept("network", getJsonNode(jsonNode, "network", JsonNode.class), -1));
        builder.unit(parseCodeableConcept("unit", getJsonNode(jsonNode, "unit", JsonNode.class), -1));
        builder.term(parseCodeableConcept("term", getJsonNode(jsonNode, "term", JsonNode.class), -1));
        ArrayNode financialArray = getArrayNode(jsonNode, "financial");
        if (financialArray != null) {
            for (int i = 0; i < financialArray.size(); i++) {
                if (financialArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + financialArray.get(i).getNodeType() + " for element: financial");
                }
                builder.financial(parseExplanationOfBenefitBenefitBalanceFinancial("financial", financialArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.BenefitBalance.Financial parseExplanationOfBenefitBenefitBalanceFinancial(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.BenefitBalance.Financial.class, jsonNode);
        }
        ExplanationOfBenefit.BenefitBalance.Financial.Builder builder = ExplanationOfBenefit.BenefitBalance.Financial.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.allowed(parseChoiceElement("allowed", jsonNode, UnsignedInt.class, String.class, Money.class));
        builder.used(parseChoiceElement("used", jsonNode, UnsignedInt.class, Money.class));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.CareTeam parseExplanationOfBenefitCareTeam(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.CareTeam.class, jsonNode);
        }
        ExplanationOfBenefit.CareTeam.Builder builder = ExplanationOfBenefit.CareTeam.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.responsible(parseBoolean("responsible", getJsonNode(jsonNode, "responsible", JsonNode.class), jsonNode.get("_responsible"), -1));
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        builder.qualification(parseCodeableConcept("qualification", getJsonNode(jsonNode, "qualification", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Diagnosis parseExplanationOfBenefitDiagnosis(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Diagnosis.class, jsonNode);
        }
        ExplanationOfBenefit.Diagnosis.Builder builder = ExplanationOfBenefit.Diagnosis.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.diagnosis(parseChoiceElement("diagnosis", jsonNode, CodeableConcept.class, Reference.class));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.onAdmission(parseCodeableConcept("onAdmission", getJsonNode(jsonNode, "onAdmission", JsonNode.class), -1));
        builder.packageCode(parseCodeableConcept("packageCode", getJsonNode(jsonNode, "packageCode", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Insurance parseExplanationOfBenefitInsurance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Insurance.class, jsonNode);
        }
        ExplanationOfBenefit.Insurance.Builder builder = ExplanationOfBenefit.Insurance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.focal(parseBoolean("focal", getJsonNode(jsonNode, "focal", JsonNode.class), jsonNode.get("_focal"), -1));
        builder.coverage(parseReference("coverage", getJsonNode(jsonNode, "coverage", JsonNode.class), -1));
        ArrayNode preAuthRefArray = getArrayNode(jsonNode, "preAuthRef", true);
        if (preAuthRefArray != null) {
            ArrayNode _preAuthRefArray = getArrayNode(jsonNode, "_preAuthRef");
            for (int i = 0; i < preAuthRefArray.size(); i++) {
                builder.preAuthRef(parseString("preAuthRef", preAuthRefArray.get(i), getJsonNode(_preAuthRefArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Item parseExplanationOfBenefitItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Item.class, jsonNode);
        }
        ExplanationOfBenefit.Item.Builder builder = ExplanationOfBenefit.Item.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        ArrayNode careTeamSequenceArray = getArrayNode(jsonNode, "careTeamSequence", true);
        if (careTeamSequenceArray != null) {
            ArrayNode _careTeamSequenceArray = getArrayNode(jsonNode, "_careTeamSequence");
            for (int i = 0; i < careTeamSequenceArray.size(); i++) {
                builder.careTeamSequence((PositiveInt) parseInteger(PositiveInt.builder(), "careTeamSequence", careTeamSequenceArray.get(i), getJsonNode(_careTeamSequenceArray, i), i));
            }
        }
        ArrayNode diagnosisSequenceArray = getArrayNode(jsonNode, "diagnosisSequence", true);
        if (diagnosisSequenceArray != null) {
            ArrayNode _diagnosisSequenceArray = getArrayNode(jsonNode, "_diagnosisSequence");
            for (int i = 0; i < diagnosisSequenceArray.size(); i++) {
                builder.diagnosisSequence((PositiveInt) parseInteger(PositiveInt.builder(), "diagnosisSequence", diagnosisSequenceArray.get(i), getJsonNode(_diagnosisSequenceArray, i), i));
            }
        }
        ArrayNode procedureSequenceArray = getArrayNode(jsonNode, "procedureSequence", true);
        if (procedureSequenceArray != null) {
            ArrayNode _procedureSequenceArray = getArrayNode(jsonNode, "_procedureSequence");
            for (int i = 0; i < procedureSequenceArray.size(); i++) {
                builder.procedureSequence((PositiveInt) parseInteger(PositiveInt.builder(), "procedureSequence", procedureSequenceArray.get(i), getJsonNode(_procedureSequenceArray, i), i));
            }
        }
        ArrayNode informationSequenceArray = getArrayNode(jsonNode, "informationSequence", true);
        if (informationSequenceArray != null) {
            ArrayNode _informationSequenceArray = getArrayNode(jsonNode, "_informationSequence");
            for (int i = 0; i < informationSequenceArray.size(); i++) {
                builder.informationSequence((PositiveInt) parseInteger(PositiveInt.builder(), "informationSequence", informationSequenceArray.get(i), getJsonNode(_informationSequenceArray, i), i));
            }
        }
        builder.revenue(parseCodeableConcept("revenue", getJsonNode(jsonNode, "revenue", JsonNode.class), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        ArrayNode programCodeArray = getArrayNode(jsonNode, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                if (programCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programCodeArray.get(i).getNodeType() + " for element: programCode");
                }
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.get(i), i));
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonNode, Date.class, Period.class));
        builder.location(parseChoiceElement("location", jsonNode, CodeableConcept.class, Address.class, Reference.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode udiArray = getArrayNode(jsonNode, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                if (udiArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiArray.get(i).getNodeType() + " for element: udi");
                }
                builder.udi(parseReference("udi", udiArray.get(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        ArrayNode subSiteArray = getArrayNode(jsonNode, "subSite");
        if (subSiteArray != null) {
            for (int i = 0; i < subSiteArray.size(); i++) {
                if (subSiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subSiteArray.get(i).getNodeType() + " for element: subSite");
                }
                builder.subSite(parseCodeableConcept("subSite", subSiteArray.get(i), i));
            }
        }
        ArrayNode encounterArray = getArrayNode(jsonNode, "encounter");
        if (encounterArray != null) {
            for (int i = 0; i < encounterArray.size(); i++) {
                if (encounterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + encounterArray.get(i).getNodeType() + " for element: encounter");
                }
                builder.encounter(parseReference("encounter", encounterArray.get(i), i));
            }
        }
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parseExplanationOfBenefitItemDetail("detail", detailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Item.Adjudication parseExplanationOfBenefitItemAdjudication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Item.Adjudication.class, jsonNode);
        }
        ExplanationOfBenefit.Item.Adjudication.Builder builder = ExplanationOfBenefit.Item.Adjudication.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.reason(parseCodeableConcept("reason", getJsonNode(jsonNode, "reason", JsonNode.class), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        builder.value(parseDecimal("value", getJsonNode(jsonNode, "value", NumericNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Item.Detail parseExplanationOfBenefitItemDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Item.Detail.class, jsonNode);
        }
        ExplanationOfBenefit.Item.Detail.Builder builder = ExplanationOfBenefit.Item.Detail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.revenue(parseCodeableConcept("revenue", getJsonNode(jsonNode, "revenue", JsonNode.class), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        ArrayNode programCodeArray = getArrayNode(jsonNode, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                if (programCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programCodeArray.get(i).getNodeType() + " for element: programCode");
                }
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode udiArray = getArrayNode(jsonNode, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                if (udiArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiArray.get(i).getNodeType() + " for element: udi");
                }
                builder.udi(parseReference("udi", udiArray.get(i), i));
            }
        }
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        ArrayNode subDetailArray = getArrayNode(jsonNode, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                if (subDetailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subDetailArray.get(i).getNodeType() + " for element: subDetail");
                }
                builder.subDetail(parseExplanationOfBenefitItemDetailSubDetail("subDetail", subDetailArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Item.Detail.SubDetail parseExplanationOfBenefitItemDetailSubDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Item.Detail.SubDetail.class, jsonNode);
        }
        ExplanationOfBenefit.Item.Detail.SubDetail.Builder builder = ExplanationOfBenefit.Item.Detail.SubDetail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.revenue(parseCodeableConcept("revenue", getJsonNode(jsonNode, "revenue", JsonNode.class), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonNode(jsonNode, "productOrService", JsonNode.class), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                if (modifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modifierArray.get(i).getNodeType() + " for element: modifier");
                }
                builder.modifier(parseCodeableConcept("modifier", modifierArray.get(i), i));
            }
        }
        ArrayNode programCodeArray = getArrayNode(jsonNode, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                if (programCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programCodeArray.get(i).getNodeType() + " for element: programCode");
                }
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonNode(jsonNode, "unitPrice", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonNode(jsonNode, "net", JsonNode.class), -1));
        ArrayNode udiArray = getArrayNode(jsonNode, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                if (udiArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiArray.get(i).getNodeType() + " for element: udi");
                }
                builder.udi(parseReference("udi", udiArray.get(i), i));
            }
        }
        ArrayNode noteNumberArray = getArrayNode(jsonNode, "noteNumber", true);
        if (noteNumberArray != null) {
            ArrayNode _noteNumberArray = getArrayNode(jsonNode, "_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonNode(_noteNumberArray, i), i));
            }
        }
        ArrayNode adjudicationArray = getArrayNode(jsonNode, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                if (adjudicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + adjudicationArray.get(i).getNodeType() + " for element: adjudication");
                }
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Payee parseExplanationOfBenefitPayee(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Payee.class, jsonNode);
        }
        ExplanationOfBenefit.Payee.Builder builder = ExplanationOfBenefit.Payee.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.party(parseReference("party", getJsonNode(jsonNode, "party", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Payment parseExplanationOfBenefitPayment(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Payment.class, jsonNode);
        }
        ExplanationOfBenefit.Payment.Builder builder = ExplanationOfBenefit.Payment.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.adjustment(parseMoney("adjustment", getJsonNode(jsonNode, "adjustment", JsonNode.class), -1));
        builder.adjustmentReason(parseCodeableConcept("adjustmentReason", getJsonNode(jsonNode, "adjustmentReason", JsonNode.class), -1));
        builder.date(parseDate("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Procedure parseExplanationOfBenefitProcedure(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Procedure.class, jsonNode);
        }
        ExplanationOfBenefit.Procedure.Builder builder = ExplanationOfBenefit.Procedure.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.procedure(parseChoiceElement("procedure", jsonNode, CodeableConcept.class, Reference.class));
        ArrayNode udiArray = getArrayNode(jsonNode, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                if (udiArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + udiArray.get(i).getNodeType() + " for element: udi");
                }
                builder.udi(parseReference("udi", udiArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.ProcessNote parseExplanationOfBenefitProcessNote(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.ProcessNote.class, jsonNode);
        }
        ExplanationOfBenefit.ProcessNote.Builder builder = ExplanationOfBenefit.ProcessNote.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.number((PositiveInt) parseInteger(PositiveInt.builder(), "number", getJsonNode(jsonNode, "number", NumericNode.class), jsonNode.get("_number"), -1));
        builder.type((NoteType) parseString(NoteType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        builder.language(parseCodeableConcept("language", getJsonNode(jsonNode, "language", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Related parseExplanationOfBenefitRelated(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Related.class, jsonNode);
        }
        ExplanationOfBenefit.Related.Builder builder = ExplanationOfBenefit.Related.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.claim(parseReference("claim", getJsonNode(jsonNode, "claim", JsonNode.class), -1));
        builder.relationship(parseCodeableConcept("relationship", getJsonNode(jsonNode, "relationship", JsonNode.class), -1));
        builder.reference(parseIdentifier("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.SupportingInfo parseExplanationOfBenefitSupportingInfo(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.SupportingInfo.class, jsonNode);
        }
        ExplanationOfBenefit.SupportingInfo.Builder builder = ExplanationOfBenefit.SupportingInfo.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.timing(parseChoiceElement("timing", jsonNode, Date.class, Period.class));
        builder.value(parseChoiceElement("value", jsonNode, Boolean.class, String.class, Quantity.class, Attachment.class, Reference.class));
        builder.reason(parseCoding("reason", getJsonNode(jsonNode, "reason", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Total parseExplanationOfBenefitTotal(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Total.class, jsonNode);
        }
        ExplanationOfBenefit.Total.Builder builder = ExplanationOfBenefit.Total.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Expression parseExpression(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Expression.class, jsonNode);
        }
        Expression.Builder builder = Expression.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.name((Id) parseString(Id.builder(), "name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.language((Code) parseString(Code.builder(), "language", getJsonNode(jsonNode, "language", TextNode.class), jsonNode.get("_language"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        builder.reference(parseUri("reference", getJsonNode(jsonNode, "reference", TextNode.class), jsonNode.get("_reference"), -1));
        stackPop();
        return builder.build();
    }

    private Extension parseExtension(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Extension.class, jsonNode);
        }
        Extension.Builder builder = Extension.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.url(parseJavaString("url", getJsonNode(jsonNode, "url", TextNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, CodeableReference.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, RatioRange.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class));
        stackPop();
        return builder.build();
    }

    private FamilyMemberHistory parseFamilyMemberHistory(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(FamilyMemberHistory.class, jsonNode);
        }
        FamilyMemberHistory.Builder builder = FamilyMemberHistory.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        builder.status((FamilyHistoryStatus) parseString(FamilyHistoryStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", getJsonNode(jsonNode, "dataAbsentReason", JsonNode.class), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.relationship(parseCodeableConcept("relationship", getJsonNode(jsonNode, "relationship", JsonNode.class), -1));
        builder.sex(parseCodeableConcept("sex", getJsonNode(jsonNode, "sex", JsonNode.class), -1));
        builder.born(parseChoiceElement("born", jsonNode, Period.class, Date.class, String.class));
        builder.age(parseChoiceElement("age", jsonNode, Age.class, Range.class, String.class));
        builder.estimatedAge(parseBoolean("estimatedAge", getJsonNode(jsonNode, "estimatedAge", JsonNode.class), jsonNode.get("_estimatedAge"), -1));
        builder.deceased(parseChoiceElement("deceased", jsonNode, Boolean.class, Age.class, Range.class, Date.class, String.class));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode conditionArray = getArrayNode(jsonNode, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                if (conditionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conditionArray.get(i).getNodeType() + " for element: condition");
                }
                builder.condition(parseFamilyMemberHistoryCondition("condition", conditionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private FamilyMemberHistory.Condition parseFamilyMemberHistoryCondition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(FamilyMemberHistory.Condition.class, jsonNode);
        }
        FamilyMemberHistory.Condition.Builder builder = FamilyMemberHistory.Condition.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.outcome(parseCodeableConcept("outcome", getJsonNode(jsonNode, "outcome", JsonNode.class), -1));
        builder.contributedToDeath(parseBoolean("contributedToDeath", getJsonNode(jsonNode, "contributedToDeath", JsonNode.class), jsonNode.get("_contributedToDeath"), -1));
        builder.onset(parseChoiceElement("onset", jsonNode, Age.class, Range.class, Period.class, String.class));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Flag parseFlag(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Flag.class, jsonNode);
        }
        Flag.Builder builder = Flag.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((FlagStatus) parseString(FlagStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Goal parseGoal(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Goal.class, jsonNode);
        }
        Goal.Builder builder = Goal.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.lifecycleStatus((GoalLifecycleStatus) parseString(GoalLifecycleStatus.builder(), "lifecycleStatus", getJsonNode(jsonNode, "lifecycleStatus", TextNode.class), jsonNode.get("_lifecycleStatus"), -1));
        builder.achievementStatus(parseCodeableConcept("achievementStatus", getJsonNode(jsonNode, "achievementStatus", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.priority(parseCodeableConcept("priority", getJsonNode(jsonNode, "priority", JsonNode.class), -1));
        builder.description(parseCodeableConcept("description", getJsonNode(jsonNode, "description", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.start(parseChoiceElement("start", jsonNode, Date.class, CodeableConcept.class));
        ArrayNode targetArray = getArrayNode(jsonNode, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                if (targetArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetArray.get(i).getNodeType() + " for element: target");
                }
                builder.target(parseGoalTarget("target", targetArray.get(i), i));
            }
        }
        builder.statusDate(parseDate("statusDate", getJsonNode(jsonNode, "statusDate", TextNode.class), jsonNode.get("_statusDate"), -1));
        builder.statusReason(parseString("statusReason", getJsonNode(jsonNode, "statusReason", TextNode.class), jsonNode.get("_statusReason"), -1));
        builder.expressedBy(parseReference("expressedBy", getJsonNode(jsonNode, "expressedBy", JsonNode.class), -1));
        ArrayNode addressesArray = getArrayNode(jsonNode, "addresses");
        if (addressesArray != null) {
            for (int i = 0; i < addressesArray.size(); i++) {
                if (addressesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressesArray.get(i).getNodeType() + " for element: addresses");
                }
                builder.addresses(parseReference("addresses", addressesArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode outcomeCodeArray = getArrayNode(jsonNode, "outcomeCode");
        if (outcomeCodeArray != null) {
            for (int i = 0; i < outcomeCodeArray.size(); i++) {
                if (outcomeCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + outcomeCodeArray.get(i).getNodeType() + " for element: outcomeCode");
                }
                builder.outcomeCode(parseCodeableConcept("outcomeCode", outcomeCodeArray.get(i), i));
            }
        }
        ArrayNode outcomeReferenceArray = getArrayNode(jsonNode, "outcomeReference");
        if (outcomeReferenceArray != null) {
            for (int i = 0; i < outcomeReferenceArray.size(); i++) {
                if (outcomeReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + outcomeReferenceArray.get(i).getNodeType() + " for element: outcomeReference");
                }
                builder.outcomeReference(parseReference("outcomeReference", outcomeReferenceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Goal.Target parseGoalTarget(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Goal.Target.class, jsonNode);
        }
        Goal.Target.Builder builder = Goal.Target.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.measure(parseCodeableConcept("measure", getJsonNode(jsonNode, "measure", JsonNode.class), -1));
        builder.detail(parseChoiceElement("detail", jsonNode, Quantity.class, Range.class, CodeableConcept.class, String.class, Boolean.class, Integer.class, Ratio.class));
        builder.due(parseChoiceElement("due", jsonNode, Date.class, Duration.class));
        stackPop();
        return builder.build();
    }

    private GraphDefinition parseGraphDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(GraphDefinition.class, jsonNode);
        }
        GraphDefinition.Builder builder = GraphDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.start((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "start", getJsonNode(jsonNode, "start", TextNode.class), jsonNode.get("_start"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonNode(jsonNode, "profile", TextNode.class), jsonNode.get("_profile"), -1));
        ArrayNode linkArray = getArrayNode(jsonNode, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                if (linkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + linkArray.get(i).getNodeType() + " for element: link");
                }
                builder.link(parseGraphDefinitionLink("link", linkArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private GraphDefinition.Link parseGraphDefinitionLink(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(GraphDefinition.Link.class, jsonNode);
        }
        GraphDefinition.Link.Builder builder = GraphDefinition.Link.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.sliceName(parseString("sliceName", getJsonNode(jsonNode, "sliceName", TextNode.class), jsonNode.get("_sliceName"), -1));
        builder.min(parseInteger("min", getJsonNode(jsonNode, "min", NumericNode.class), jsonNode.get("_min"), -1));
        builder.max(parseString("max", getJsonNode(jsonNode, "max", TextNode.class), jsonNode.get("_max"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode targetArray = getArrayNode(jsonNode, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                if (targetArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetArray.get(i).getNodeType() + " for element: target");
                }
                builder.target(parseGraphDefinitionLinkTarget("target", targetArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private GraphDefinition.Link.Target parseGraphDefinitionLinkTarget(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(GraphDefinition.Link.Target.class, jsonNode);
        }
        GraphDefinition.Link.Target.Builder builder = GraphDefinition.Link.Target.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.params(parseString("params", getJsonNode(jsonNode, "params", TextNode.class), jsonNode.get("_params"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonNode(jsonNode, "profile", TextNode.class), jsonNode.get("_profile"), -1));
        ArrayNode compartmentArray = getArrayNode(jsonNode, "compartment");
        if (compartmentArray != null) {
            for (int i = 0; i < compartmentArray.size(); i++) {
                if (compartmentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + compartmentArray.get(i).getNodeType() + " for element: compartment");
                }
                builder.compartment(parseGraphDefinitionLinkTargetCompartment("compartment", compartmentArray.get(i), i));
            }
        }
        ArrayNode linkArray = getArrayNode(jsonNode, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                if (linkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + linkArray.get(i).getNodeType() + " for element: link");
                }
                builder.link(parseGraphDefinitionLink("link", linkArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private GraphDefinition.Link.Target.Compartment parseGraphDefinitionLinkTargetCompartment(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(GraphDefinition.Link.Target.Compartment.class, jsonNode);
        }
        GraphDefinition.Link.Target.Compartment.Builder builder = GraphDefinition.Link.Target.Compartment.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.use((GraphCompartmentUse) parseString(GraphCompartmentUse.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.code((CompartmentCode) parseString(CompartmentCode.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.rule((GraphCompartmentRule) parseString(GraphCompartmentRule.builder(), "rule", getJsonNode(jsonNode, "rule", TextNode.class), jsonNode.get("_rule"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private Group parseGroup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Group.class, jsonNode);
        }
        Group.Builder builder = Group.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        builder.type((GroupType) parseString(GroupType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.actual(parseBoolean("actual", getJsonNode(jsonNode, "actual", JsonNode.class), jsonNode.get("_actual"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.quantity((UnsignedInt) parseInteger(UnsignedInt.builder(), "quantity", getJsonNode(jsonNode, "quantity", NumericNode.class), jsonNode.get("_quantity"), -1));
        builder.managingEntity(parseReference("managingEntity", getJsonNode(jsonNode, "managingEntity", JsonNode.class), -1));
        ArrayNode characteristicArray = getArrayNode(jsonNode, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                if (characteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + characteristicArray.get(i).getNodeType() + " for element: characteristic");
                }
                builder.characteristic(parseGroupCharacteristic("characteristic", characteristicArray.get(i), i));
            }
        }
        ArrayNode memberArray = getArrayNode(jsonNode, "member");
        if (memberArray != null) {
            for (int i = 0; i < memberArray.size(); i++) {
                if (memberArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + memberArray.get(i).getNodeType() + " for element: member");
                }
                builder.member(parseGroupMember("member", memberArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Group.Characteristic parseGroupCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Group.Characteristic.class, jsonNode);
        }
        Group.Characteristic.Builder builder = Group.Characteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Boolean.class, Quantity.class, Range.class, Reference.class));
        builder.exclude(parseBoolean("exclude", getJsonNode(jsonNode, "exclude", JsonNode.class), jsonNode.get("_exclude"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Group.Member parseGroupMember(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Group.Member.class, jsonNode);
        }
        Group.Member.Builder builder = Group.Member.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.entity(parseReference("entity", getJsonNode(jsonNode, "entity", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.inactive(parseBoolean("inactive", getJsonNode(jsonNode, "inactive", JsonNode.class), jsonNode.get("_inactive"), -1));
        stackPop();
        return builder.build();
    }

    private GuidanceResponse parseGuidanceResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(GuidanceResponse.class, jsonNode);
        }
        GuidanceResponse.Builder builder = GuidanceResponse.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.requestIdentifier(parseIdentifier("requestIdentifier", getJsonNode(jsonNode, "requestIdentifier", JsonNode.class), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.module(parseChoiceElement("module", jsonNode, Uri.class, Canonical.class, CodeableConcept.class));
        builder.status((GuidanceResponseStatus) parseString(GuidanceResponseStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.occurrenceDateTime(parseDateTime("occurrenceDateTime", getJsonNode(jsonNode, "occurrenceDateTime", TextNode.class), jsonNode.get("_occurrenceDateTime"), -1));
        builder.performer(parseReference("performer", getJsonNode(jsonNode, "performer", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode evaluationMessageArray = getArrayNode(jsonNode, "evaluationMessage");
        if (evaluationMessageArray != null) {
            for (int i = 0; i < evaluationMessageArray.size(); i++) {
                if (evaluationMessageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + evaluationMessageArray.get(i).getNodeType() + " for element: evaluationMessage");
                }
                builder.evaluationMessage(parseReference("evaluationMessage", evaluationMessageArray.get(i), i));
            }
        }
        builder.outputParameters(parseReference("outputParameters", getJsonNode(jsonNode, "outputParameters", JsonNode.class), -1));
        builder.result(parseReference("result", getJsonNode(jsonNode, "result", JsonNode.class), -1));
        ArrayNode dataRequirementArray = getArrayNode(jsonNode, "dataRequirement");
        if (dataRequirementArray != null) {
            for (int i = 0; i < dataRequirementArray.size(); i++) {
                if (dataRequirementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dataRequirementArray.get(i).getNodeType() + " for element: dataRequirement");
                }
                builder.dataRequirement(parseDataRequirement("dataRequirement", dataRequirementArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private HealthcareService parseHealthcareService(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(HealthcareService.class, jsonNode);
        }
        HealthcareService.Builder builder = HealthcareService.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        builder.providedBy(parseReference("providedBy", getJsonNode(jsonNode, "providedBy", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        ArrayNode specialtyArray = getArrayNode(jsonNode, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                if (specialtyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialtyArray.get(i).getNodeType() + " for element: specialty");
                }
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.get(i), i));
            }
        }
        ArrayNode locationArray = getArrayNode(jsonNode, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                if (locationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + locationArray.get(i).getNodeType() + " for element: location");
                }
                builder.location(parseReference("location", locationArray.get(i), i));
            }
        }
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        builder.extraDetails((Markdown) parseString(Markdown.builder(), "extraDetails", getJsonNode(jsonNode, "extraDetails", TextNode.class), jsonNode.get("_extraDetails"), -1));
        builder.photo(parseAttachment("photo", getJsonNode(jsonNode, "photo", JsonNode.class), -1));
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        ArrayNode coverageAreaArray = getArrayNode(jsonNode, "coverageArea");
        if (coverageAreaArray != null) {
            for (int i = 0; i < coverageAreaArray.size(); i++) {
                if (coverageAreaArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + coverageAreaArray.get(i).getNodeType() + " for element: coverageArea");
                }
                builder.coverageArea(parseReference("coverageArea", coverageAreaArray.get(i), i));
            }
        }
        ArrayNode serviceProvisionCodeArray = getArrayNode(jsonNode, "serviceProvisionCode");
        if (serviceProvisionCodeArray != null) {
            for (int i = 0; i < serviceProvisionCodeArray.size(); i++) {
                if (serviceProvisionCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceProvisionCodeArray.get(i).getNodeType() + " for element: serviceProvisionCode");
                }
                builder.serviceProvisionCode(parseCodeableConcept("serviceProvisionCode", serviceProvisionCodeArray.get(i), i));
            }
        }
        ArrayNode eligibilityArray = getArrayNode(jsonNode, "eligibility");
        if (eligibilityArray != null) {
            for (int i = 0; i < eligibilityArray.size(); i++) {
                if (eligibilityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + eligibilityArray.get(i).getNodeType() + " for element: eligibility");
                }
                builder.eligibility(parseHealthcareServiceEligibility("eligibility", eligibilityArray.get(i), i));
            }
        }
        ArrayNode programArray = getArrayNode(jsonNode, "program");
        if (programArray != null) {
            for (int i = 0; i < programArray.size(); i++) {
                if (programArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programArray.get(i).getNodeType() + " for element: program");
                }
                builder.program(parseCodeableConcept("program", programArray.get(i), i));
            }
        }
        ArrayNode characteristicArray = getArrayNode(jsonNode, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                if (characteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + characteristicArray.get(i).getNodeType() + " for element: characteristic");
                }
                builder.characteristic(parseCodeableConcept("characteristic", characteristicArray.get(i), i));
            }
        }
        ArrayNode communicationArray = getArrayNode(jsonNode, "communication");
        if (communicationArray != null) {
            for (int i = 0; i < communicationArray.size(); i++) {
                if (communicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + communicationArray.get(i).getNodeType() + " for element: communication");
                }
                builder.communication(parseCodeableConcept("communication", communicationArray.get(i), i));
            }
        }
        ArrayNode referralMethodArray = getArrayNode(jsonNode, "referralMethod");
        if (referralMethodArray != null) {
            for (int i = 0; i < referralMethodArray.size(); i++) {
                if (referralMethodArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referralMethodArray.get(i).getNodeType() + " for element: referralMethod");
                }
                builder.referralMethod(parseCodeableConcept("referralMethod", referralMethodArray.get(i), i));
            }
        }
        builder.appointmentRequired(parseBoolean("appointmentRequired", getJsonNode(jsonNode, "appointmentRequired", JsonNode.class), jsonNode.get("_appointmentRequired"), -1));
        ArrayNode availableTimeArray = getArrayNode(jsonNode, "availableTime");
        if (availableTimeArray != null) {
            for (int i = 0; i < availableTimeArray.size(); i++) {
                if (availableTimeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + availableTimeArray.get(i).getNodeType() + " for element: availableTime");
                }
                builder.availableTime(parseHealthcareServiceAvailableTime("availableTime", availableTimeArray.get(i), i));
            }
        }
        ArrayNode notAvailableArray = getArrayNode(jsonNode, "notAvailable");
        if (notAvailableArray != null) {
            for (int i = 0; i < notAvailableArray.size(); i++) {
                if (notAvailableArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + notAvailableArray.get(i).getNodeType() + " for element: notAvailable");
                }
                builder.notAvailable(parseHealthcareServiceNotAvailable("notAvailable", notAvailableArray.get(i), i));
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", getJsonNode(jsonNode, "availabilityExceptions", TextNode.class), jsonNode.get("_availabilityExceptions"), -1));
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseReference("endpoint", endpointArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private HealthcareService.AvailableTime parseHealthcareServiceAvailableTime(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(HealthcareService.AvailableTime.class, jsonNode);
        }
        HealthcareService.AvailableTime.Builder builder = HealthcareService.AvailableTime.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode daysOfWeekArray = getArrayNode(jsonNode, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            ArrayNode _daysOfWeekArray = getArrayNode(jsonNode, "_daysOfWeek");
            for (int i = 0; i < daysOfWeekArray.size(); i++) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", daysOfWeekArray.get(i), getJsonNode(_daysOfWeekArray, i), i));
            }
        }
        builder.allDay(parseBoolean("allDay", getJsonNode(jsonNode, "allDay", JsonNode.class), jsonNode.get("_allDay"), -1));
        builder.availableStartTime(parseTime("availableStartTime", getJsonNode(jsonNode, "availableStartTime", TextNode.class), jsonNode.get("_availableStartTime"), -1));
        builder.availableEndTime(parseTime("availableEndTime", getJsonNode(jsonNode, "availableEndTime", TextNode.class), jsonNode.get("_availableEndTime"), -1));
        stackPop();
        return builder.build();
    }

    private HealthcareService.Eligibility parseHealthcareServiceEligibility(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(HealthcareService.Eligibility.class, jsonNode);
        }
        HealthcareService.Eligibility.Builder builder = HealthcareService.Eligibility.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private HealthcareService.NotAvailable parseHealthcareServiceNotAvailable(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(HealthcareService.NotAvailable.class, jsonNode);
        }
        HealthcareService.NotAvailable.Builder builder = HealthcareService.NotAvailable.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.during(parsePeriod("during", getJsonNode(jsonNode, "during", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private HumanName parseHumanName(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(HumanName.class, jsonNode);
        }
        HumanName.Builder builder = HumanName.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.use((NameUse) parseString(NameUse.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        builder.family(parseString("family", getJsonNode(jsonNode, "family", TextNode.class), jsonNode.get("_family"), -1));
        ArrayNode givenArray = getArrayNode(jsonNode, "given", true);
        if (givenArray != null) {
            ArrayNode _givenArray = getArrayNode(jsonNode, "_given");
            for (int i = 0; i < givenArray.size(); i++) {
                builder.given(parseString("given", givenArray.get(i), getJsonNode(_givenArray, i), i));
            }
        }
        ArrayNode prefixArray = getArrayNode(jsonNode, "prefix", true);
        if (prefixArray != null) {
            ArrayNode _prefixArray = getArrayNode(jsonNode, "_prefix");
            for (int i = 0; i < prefixArray.size(); i++) {
                builder.prefix(parseString("prefix", prefixArray.get(i), getJsonNode(_prefixArray, i), i));
            }
        }
        ArrayNode suffixArray = getArrayNode(jsonNode, "suffix", true);
        if (suffixArray != null) {
            ArrayNode _suffixArray = getArrayNode(jsonNode, "_suffix");
            for (int i = 0; i < suffixArray.size(); i++) {
                builder.suffix(parseString("suffix", suffixArray.get(i), getJsonNode(_suffixArray, i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Identifier parseIdentifier(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Identifier.class, jsonNode);
        }
        Identifier.Builder builder = Identifier.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.use((IdentifierUse) parseString(IdentifierUse.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.system(parseUri("system", getJsonNode(jsonNode, "system", TextNode.class), jsonNode.get("_system"), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.assigner(parseReference("assigner", getJsonNode(jsonNode, "assigner", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ImagingStudy parseImagingStudy(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImagingStudy.class, jsonNode);
        }
        ImagingStudy.Builder builder = ImagingStudy.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ImagingStudyStatus) parseString(ImagingStudyStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode modalityArray = getArrayNode(jsonNode, "modality");
        if (modalityArray != null) {
            for (int i = 0; i < modalityArray.size(); i++) {
                if (modalityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + modalityArray.get(i).getNodeType() + " for element: modality");
                }
                builder.modality(parseCoding("modality", modalityArray.get(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.started(parseDateTime("started", getJsonNode(jsonNode, "started", TextNode.class), jsonNode.get("_started"), -1));
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        builder.referrer(parseReference("referrer", getJsonNode(jsonNode, "referrer", JsonNode.class), -1));
        ArrayNode interpreterArray = getArrayNode(jsonNode, "interpreter");
        if (interpreterArray != null) {
            for (int i = 0; i < interpreterArray.size(); i++) {
                if (interpreterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + interpreterArray.get(i).getNodeType() + " for element: interpreter");
                }
                builder.interpreter(parseReference("interpreter", interpreterArray.get(i), i));
            }
        }
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseReference("endpoint", endpointArray.get(i), i));
            }
        }
        builder.numberOfSeries((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfSeries", getJsonNode(jsonNode, "numberOfSeries", NumericNode.class), jsonNode.get("_numberOfSeries"), -1));
        builder.numberOfInstances((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfInstances", getJsonNode(jsonNode, "numberOfInstances", NumericNode.class), jsonNode.get("_numberOfInstances"), -1));
        builder.procedureReference(parseReference("procedureReference", getJsonNode(jsonNode, "procedureReference", JsonNode.class), -1));
        ArrayNode procedureCodeArray = getArrayNode(jsonNode, "procedureCode");
        if (procedureCodeArray != null) {
            for (int i = 0; i < procedureCodeArray.size(); i++) {
                if (procedureCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + procedureCodeArray.get(i).getNodeType() + " for element: procedureCode");
                }
                builder.procedureCode(parseCodeableConcept("procedureCode", procedureCodeArray.get(i), i));
            }
        }
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode seriesArray = getArrayNode(jsonNode, "series");
        if (seriesArray != null) {
            for (int i = 0; i < seriesArray.size(); i++) {
                if (seriesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + seriesArray.get(i).getNodeType() + " for element: series");
                }
                builder.series(parseImagingStudySeries("series", seriesArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImagingStudy.Series parseImagingStudySeries(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImagingStudy.Series.class, jsonNode);
        }
        ImagingStudy.Series.Builder builder = ImagingStudy.Series.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.uid((Id) parseString(Id.builder(), "uid", getJsonNode(jsonNode, "uid", TextNode.class), jsonNode.get("_uid"), -1));
        builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", getJsonNode(jsonNode, "number", NumericNode.class), jsonNode.get("_number"), -1));
        builder.modality(parseCoding("modality", getJsonNode(jsonNode, "modality", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.numberOfInstances((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfInstances", getJsonNode(jsonNode, "numberOfInstances", NumericNode.class), jsonNode.get("_numberOfInstances"), -1));
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseReference("endpoint", endpointArray.get(i), i));
            }
        }
        builder.bodySite(parseCoding("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        builder.laterality(parseCoding("laterality", getJsonNode(jsonNode, "laterality", JsonNode.class), -1));
        ArrayNode specimenArray = getArrayNode(jsonNode, "specimen");
        if (specimenArray != null) {
            for (int i = 0; i < specimenArray.size(); i++) {
                if (specimenArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specimenArray.get(i).getNodeType() + " for element: specimen");
                }
                builder.specimen(parseReference("specimen", specimenArray.get(i), i));
            }
        }
        builder.started(parseDateTime("started", getJsonNode(jsonNode, "started", TextNode.class), jsonNode.get("_started"), -1));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseImagingStudySeriesPerformer("performer", performerArray.get(i), i));
            }
        }
        ArrayNode instanceArray = getArrayNode(jsonNode, "instance");
        if (instanceArray != null) {
            for (int i = 0; i < instanceArray.size(); i++) {
                if (instanceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + instanceArray.get(i).getNodeType() + " for element: instance");
                }
                builder.instance(parseImagingStudySeriesInstance("instance", instanceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImagingStudy.Series.Instance parseImagingStudySeriesInstance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImagingStudy.Series.Instance.class, jsonNode);
        }
        ImagingStudy.Series.Instance.Builder builder = ImagingStudy.Series.Instance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.uid((Id) parseString(Id.builder(), "uid", getJsonNode(jsonNode, "uid", TextNode.class), jsonNode.get("_uid"), -1));
        builder.sopClass(parseCoding("sopClass", getJsonNode(jsonNode, "sopClass", JsonNode.class), -1));
        builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", getJsonNode(jsonNode, "number", NumericNode.class), jsonNode.get("_number"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        stackPop();
        return builder.build();
    }

    private ImagingStudy.Series.Performer parseImagingStudySeriesPerformer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImagingStudy.Series.Performer.class, jsonNode);
        }
        ImagingStudy.Series.Performer.Builder builder = ImagingStudy.Series.Performer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.function(parseCodeableConcept("function", getJsonNode(jsonNode, "function", JsonNode.class), -1));
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Immunization parseImmunization(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Immunization.class, jsonNode);
        }
        Immunization.Builder builder = Immunization.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ImmunizationStatus) parseString(ImmunizationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonNode(jsonNode, "statusReason", JsonNode.class), -1));
        builder.vaccineCode(parseCodeableConcept("vaccineCode", getJsonNode(jsonNode, "vaccineCode", JsonNode.class), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, String.class));
        builder.recorded(parseDateTime("recorded", getJsonNode(jsonNode, "recorded", TextNode.class), jsonNode.get("_recorded"), -1));
        builder.primarySource(parseBoolean("primarySource", getJsonNode(jsonNode, "primarySource", JsonNode.class), jsonNode.get("_primarySource"), -1));
        builder.reportOrigin(parseCodeableConcept("reportOrigin", getJsonNode(jsonNode, "reportOrigin", JsonNode.class), -1));
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        builder.manufacturer(parseReference("manufacturer", getJsonNode(jsonNode, "manufacturer", JsonNode.class), -1));
        builder.lotNumber(parseString("lotNumber", getJsonNode(jsonNode, "lotNumber", TextNode.class), jsonNode.get("_lotNumber"), -1));
        builder.expirationDate(parseDate("expirationDate", getJsonNode(jsonNode, "expirationDate", TextNode.class), jsonNode.get("_expirationDate"), -1));
        builder.site(parseCodeableConcept("site", getJsonNode(jsonNode, "site", JsonNode.class), -1));
        builder.route(parseCodeableConcept("route", getJsonNode(jsonNode, "route", JsonNode.class), -1));
        builder.doseQuantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "doseQuantity", getJsonNode(jsonNode, "doseQuantity", JsonNode.class), -1));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseImmunizationPerformer("performer", performerArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        builder.isSubpotent(parseBoolean("isSubpotent", getJsonNode(jsonNode, "isSubpotent", JsonNode.class), jsonNode.get("_isSubpotent"), -1));
        ArrayNode subpotentReasonArray = getArrayNode(jsonNode, "subpotentReason");
        if (subpotentReasonArray != null) {
            for (int i = 0; i < subpotentReasonArray.size(); i++) {
                if (subpotentReasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subpotentReasonArray.get(i).getNodeType() + " for element: subpotentReason");
                }
                builder.subpotentReason(parseCodeableConcept("subpotentReason", subpotentReasonArray.get(i), i));
            }
        }
        ArrayNode educationArray = getArrayNode(jsonNode, "education");
        if (educationArray != null) {
            for (int i = 0; i < educationArray.size(); i++) {
                if (educationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + educationArray.get(i).getNodeType() + " for element: education");
                }
                builder.education(parseImmunizationEducation("education", educationArray.get(i), i));
            }
        }
        ArrayNode programEligibilityArray = getArrayNode(jsonNode, "programEligibility");
        if (programEligibilityArray != null) {
            for (int i = 0; i < programEligibilityArray.size(); i++) {
                if (programEligibilityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + programEligibilityArray.get(i).getNodeType() + " for element: programEligibility");
                }
                builder.programEligibility(parseCodeableConcept("programEligibility", programEligibilityArray.get(i), i));
            }
        }
        builder.fundingSource(parseCodeableConcept("fundingSource", getJsonNode(jsonNode, "fundingSource", JsonNode.class), -1));
        ArrayNode reactionArray = getArrayNode(jsonNode, "reaction");
        if (reactionArray != null) {
            for (int i = 0; i < reactionArray.size(); i++) {
                if (reactionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reactionArray.get(i).getNodeType() + " for element: reaction");
                }
                builder.reaction(parseImmunizationReaction("reaction", reactionArray.get(i), i));
            }
        }
        ArrayNode protocolAppliedArray = getArrayNode(jsonNode, "protocolApplied");
        if (protocolAppliedArray != null) {
            for (int i = 0; i < protocolAppliedArray.size(); i++) {
                if (protocolAppliedArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + protocolAppliedArray.get(i).getNodeType() + " for element: protocolApplied");
                }
                builder.protocolApplied(parseImmunizationProtocolApplied("protocolApplied", protocolAppliedArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Immunization.Education parseImmunizationEducation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Immunization.Education.class, jsonNode);
        }
        Immunization.Education.Builder builder = Immunization.Education.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.documentType(parseString("documentType", getJsonNode(jsonNode, "documentType", TextNode.class), jsonNode.get("_documentType"), -1));
        builder.reference(parseUri("reference", getJsonNode(jsonNode, "reference", TextNode.class), jsonNode.get("_reference"), -1));
        builder.publicationDate(parseDateTime("publicationDate", getJsonNode(jsonNode, "publicationDate", TextNode.class), jsonNode.get("_publicationDate"), -1));
        builder.presentationDate(parseDateTime("presentationDate", getJsonNode(jsonNode, "presentationDate", TextNode.class), jsonNode.get("_presentationDate"), -1));
        stackPop();
        return builder.build();
    }

    private Immunization.Performer parseImmunizationPerformer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Immunization.Performer.class, jsonNode);
        }
        Immunization.Performer.Builder builder = Immunization.Performer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.function(parseCodeableConcept("function", getJsonNode(jsonNode, "function", JsonNode.class), -1));
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Immunization.ProtocolApplied parseImmunizationProtocolApplied(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Immunization.ProtocolApplied.class, jsonNode);
        }
        Immunization.ProtocolApplied.Builder builder = Immunization.ProtocolApplied.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.series(parseString("series", getJsonNode(jsonNode, "series", TextNode.class), jsonNode.get("_series"), -1));
        builder.authority(parseReference("authority", getJsonNode(jsonNode, "authority", JsonNode.class), -1));
        ArrayNode targetDiseaseArray = getArrayNode(jsonNode, "targetDisease");
        if (targetDiseaseArray != null) {
            for (int i = 0; i < targetDiseaseArray.size(); i++) {
                if (targetDiseaseArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetDiseaseArray.get(i).getNodeType() + " for element: targetDisease");
                }
                builder.targetDisease(parseCodeableConcept("targetDisease", targetDiseaseArray.get(i), i));
            }
        }
        builder.doseNumber(parseChoiceElement("doseNumber", jsonNode, PositiveInt.class, String.class));
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonNode, PositiveInt.class, String.class));
        stackPop();
        return builder.build();
    }

    private Immunization.Reaction parseImmunizationReaction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Immunization.Reaction.class, jsonNode);
        }
        Immunization.Reaction.Builder builder = Immunization.Reaction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.detail(parseReference("detail", getJsonNode(jsonNode, "detail", JsonNode.class), -1));
        builder.reported(parseBoolean("reported", getJsonNode(jsonNode, "reported", JsonNode.class), jsonNode.get("_reported"), -1));
        stackPop();
        return builder.build();
    }

    private ImmunizationEvaluation parseImmunizationEvaluation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImmunizationEvaluation.class, jsonNode);
        }
        ImmunizationEvaluation.Builder builder = ImmunizationEvaluation.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ImmunizationEvaluationStatus) parseString(ImmunizationEvaluationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.authority(parseReference("authority", getJsonNode(jsonNode, "authority", JsonNode.class), -1));
        builder.targetDisease(parseCodeableConcept("targetDisease", getJsonNode(jsonNode, "targetDisease", JsonNode.class), -1));
        builder.immunizationEvent(parseReference("immunizationEvent", getJsonNode(jsonNode, "immunizationEvent", JsonNode.class), -1));
        builder.doseStatus(parseCodeableConcept("doseStatus", getJsonNode(jsonNode, "doseStatus", JsonNode.class), -1));
        ArrayNode doseStatusReasonArray = getArrayNode(jsonNode, "doseStatusReason");
        if (doseStatusReasonArray != null) {
            for (int i = 0; i < doseStatusReasonArray.size(); i++) {
                if (doseStatusReasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + doseStatusReasonArray.get(i).getNodeType() + " for element: doseStatusReason");
                }
                builder.doseStatusReason(parseCodeableConcept("doseStatusReason", doseStatusReasonArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.series(parseString("series", getJsonNode(jsonNode, "series", TextNode.class), jsonNode.get("_series"), -1));
        builder.doseNumber(parseChoiceElement("doseNumber", jsonNode, PositiveInt.class, String.class));
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonNode, PositiveInt.class, String.class));
        stackPop();
        return builder.build();
    }

    private ImmunizationRecommendation parseImmunizationRecommendation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImmunizationRecommendation.class, jsonNode);
        }
        ImmunizationRecommendation.Builder builder = ImmunizationRecommendation.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.authority(parseReference("authority", getJsonNode(jsonNode, "authority", JsonNode.class), -1));
        ArrayNode recommendationArray = getArrayNode(jsonNode, "recommendation");
        if (recommendationArray != null) {
            for (int i = 0; i < recommendationArray.size(); i++) {
                if (recommendationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + recommendationArray.get(i).getNodeType() + " for element: recommendation");
                }
                builder.recommendation(parseImmunizationRecommendationRecommendation("recommendation", recommendationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImmunizationRecommendation.Recommendation parseImmunizationRecommendationRecommendation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImmunizationRecommendation.Recommendation.class, jsonNode);
        }
        ImmunizationRecommendation.Recommendation.Builder builder = ImmunizationRecommendation.Recommendation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode vaccineCodeArray = getArrayNode(jsonNode, "vaccineCode");
        if (vaccineCodeArray != null) {
            for (int i = 0; i < vaccineCodeArray.size(); i++) {
                if (vaccineCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + vaccineCodeArray.get(i).getNodeType() + " for element: vaccineCode");
                }
                builder.vaccineCode(parseCodeableConcept("vaccineCode", vaccineCodeArray.get(i), i));
            }
        }
        builder.targetDisease(parseCodeableConcept("targetDisease", getJsonNode(jsonNode, "targetDisease", JsonNode.class), -1));
        ArrayNode contraindicatedVaccineCodeArray = getArrayNode(jsonNode, "contraindicatedVaccineCode");
        if (contraindicatedVaccineCodeArray != null) {
            for (int i = 0; i < contraindicatedVaccineCodeArray.size(); i++) {
                if (contraindicatedVaccineCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contraindicatedVaccineCodeArray.get(i).getNodeType() + " for element: contraindicatedVaccineCode");
                }
                builder.contraindicatedVaccineCode(parseCodeableConcept("contraindicatedVaccineCode", contraindicatedVaccineCodeArray.get(i), i));
            }
        }
        builder.forecastStatus(parseCodeableConcept("forecastStatus", getJsonNode(jsonNode, "forecastStatus", JsonNode.class), -1));
        ArrayNode forecastReasonArray = getArrayNode(jsonNode, "forecastReason");
        if (forecastReasonArray != null) {
            for (int i = 0; i < forecastReasonArray.size(); i++) {
                if (forecastReasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + forecastReasonArray.get(i).getNodeType() + " for element: forecastReason");
                }
                builder.forecastReason(parseCodeableConcept("forecastReason", forecastReasonArray.get(i), i));
            }
        }
        ArrayNode dateCriterionArray = getArrayNode(jsonNode, "dateCriterion");
        if (dateCriterionArray != null) {
            for (int i = 0; i < dateCriterionArray.size(); i++) {
                if (dateCriterionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dateCriterionArray.get(i).getNodeType() + " for element: dateCriterion");
                }
                builder.dateCriterion(parseImmunizationRecommendationRecommendationDateCriterion("dateCriterion", dateCriterionArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.series(parseString("series", getJsonNode(jsonNode, "series", TextNode.class), jsonNode.get("_series"), -1));
        builder.doseNumber(parseChoiceElement("doseNumber", jsonNode, PositiveInt.class, String.class));
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonNode, PositiveInt.class, String.class));
        ArrayNode supportingImmunizationArray = getArrayNode(jsonNode, "supportingImmunization");
        if (supportingImmunizationArray != null) {
            for (int i = 0; i < supportingImmunizationArray.size(); i++) {
                if (supportingImmunizationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingImmunizationArray.get(i).getNodeType() + " for element: supportingImmunization");
                }
                builder.supportingImmunization(parseReference("supportingImmunization", supportingImmunizationArray.get(i), i));
            }
        }
        ArrayNode supportingPatientInformationArray = getArrayNode(jsonNode, "supportingPatientInformation");
        if (supportingPatientInformationArray != null) {
            for (int i = 0; i < supportingPatientInformationArray.size(); i++) {
                if (supportingPatientInformationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingPatientInformationArray.get(i).getNodeType() + " for element: supportingPatientInformation");
                }
                builder.supportingPatientInformation(parseReference("supportingPatientInformation", supportingPatientInformationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImmunizationRecommendation.Recommendation.DateCriterion parseImmunizationRecommendationRecommendationDateCriterion(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImmunizationRecommendation.Recommendation.DateCriterion.class, jsonNode);
        }
        ImmunizationRecommendation.Recommendation.DateCriterion.Builder builder = ImmunizationRecommendation.Recommendation.DateCriterion.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value(parseDateTime("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide parseImplementationGuide(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.class, jsonNode);
        }
        ImplementationGuide.Builder builder = ImplementationGuide.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.packageId((Id) parseString(Id.builder(), "packageId", getJsonNode(jsonNode, "packageId", TextNode.class), jsonNode.get("_packageId"), -1));
        builder.license((SPDXLicense) parseString(SPDXLicense.builder(), "license", getJsonNode(jsonNode, "license", TextNode.class), jsonNode.get("_license"), -1));
        ArrayNode fhirVersionArray = getArrayNode(jsonNode, "fhirVersion", true);
        if (fhirVersionArray != null) {
            ArrayNode _fhirVersionArray = getArrayNode(jsonNode, "_fhirVersion");
            for (int i = 0; i < fhirVersionArray.size(); i++) {
                builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", fhirVersionArray.get(i), getJsonNode(_fhirVersionArray, i), i));
            }
        }
        ArrayNode dependsOnArray = getArrayNode(jsonNode, "dependsOn");
        if (dependsOnArray != null) {
            for (int i = 0; i < dependsOnArray.size(); i++) {
                if (dependsOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dependsOnArray.get(i).getNodeType() + " for element: dependsOn");
                }
                builder.dependsOn(parseImplementationGuideDependsOn("dependsOn", dependsOnArray.get(i), i));
            }
        }
        ArrayNode globalArray = getArrayNode(jsonNode, "global");
        if (globalArray != null) {
            for (int i = 0; i < globalArray.size(); i++) {
                if (globalArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + globalArray.get(i).getNodeType() + " for element: global");
                }
                builder.global(parseImplementationGuideGlobal("global", globalArray.get(i), i));
            }
        }
        builder.definition(parseImplementationGuideDefinition("definition", getJsonNode(jsonNode, "definition", JsonNode.class), -1));
        builder.manifest(parseImplementationGuideManifest("manifest", getJsonNode(jsonNode, "manifest", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition parseImplementationGuideDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.class, jsonNode);
        }
        ImplementationGuide.Definition.Builder builder = ImplementationGuide.Definition.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode groupingArray = getArrayNode(jsonNode, "grouping");
        if (groupingArray != null) {
            for (int i = 0; i < groupingArray.size(); i++) {
                if (groupingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + groupingArray.get(i).getNodeType() + " for element: grouping");
                }
                builder.grouping(parseImplementationGuideDefinitionGrouping("grouping", groupingArray.get(i), i));
            }
        }
        ArrayNode resourceArray = getArrayNode(jsonNode, "resource");
        if (resourceArray != null) {
            for (int i = 0; i < resourceArray.size(); i++) {
                if (resourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + resourceArray.get(i).getNodeType() + " for element: resource");
                }
                builder.resource(parseImplementationGuideDefinitionResource("resource", resourceArray.get(i), i));
            }
        }
        builder.page(parseImplementationGuideDefinitionPage("page", getJsonNode(jsonNode, "page", JsonNode.class), -1));
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseImplementationGuideDefinitionParameter("parameter", parameterArray.get(i), i));
            }
        }
        ArrayNode templateArray = getArrayNode(jsonNode, "template");
        if (templateArray != null) {
            for (int i = 0; i < templateArray.size(); i++) {
                if (templateArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + templateArray.get(i).getNodeType() + " for element: template");
                }
                builder.template(parseImplementationGuideDefinitionTemplate("template", templateArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Grouping parseImplementationGuideDefinitionGrouping(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Grouping.class, jsonNode);
        }
        ImplementationGuide.Definition.Grouping.Builder builder = ImplementationGuide.Definition.Grouping.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Page parseImplementationGuideDefinitionPage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Page.class, jsonNode);
        }
        ImplementationGuide.Definition.Page.Builder builder = ImplementationGuide.Definition.Page.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseChoiceElement("name", jsonNode, Url.class, Reference.class));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.generation((GuidePageGeneration) parseString(GuidePageGeneration.builder(), "generation", getJsonNode(jsonNode, "generation", TextNode.class), jsonNode.get("_generation"), -1));
        ArrayNode pageArray = getArrayNode(jsonNode, "page");
        if (pageArray != null) {
            for (int i = 0; i < pageArray.size(); i++) {
                if (pageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + pageArray.get(i).getNodeType() + " for element: page");
                }
                builder.page(parseImplementationGuideDefinitionPage("page", pageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Parameter parseImplementationGuideDefinitionParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Parameter.class, jsonNode);
        }
        ImplementationGuide.Definition.Parameter.Builder builder = ImplementationGuide.Definition.Parameter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((GuideParameterCode) parseString(GuideParameterCode.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Resource parseImplementationGuideDefinitionResource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Resource.class, jsonNode);
        }
        ImplementationGuide.Definition.Resource.Builder builder = ImplementationGuide.Definition.Resource.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.reference(parseReference("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        ArrayNode fhirVersionArray = getArrayNode(jsonNode, "fhirVersion", true);
        if (fhirVersionArray != null) {
            ArrayNode _fhirVersionArray = getArrayNode(jsonNode, "_fhirVersion");
            for (int i = 0; i < fhirVersionArray.size(); i++) {
                builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", fhirVersionArray.get(i), getJsonNode(_fhirVersionArray, i), i));
            }
        }
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.example(parseChoiceElement("example", jsonNode, Boolean.class, Canonical.class));
        builder.groupingId((Id) parseString(Id.builder(), "groupingId", getJsonNode(jsonNode, "groupingId", TextNode.class), jsonNode.get("_groupingId"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Template parseImplementationGuideDefinitionTemplate(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Template.class, jsonNode);
        }
        ImplementationGuide.Definition.Template.Builder builder = ImplementationGuide.Definition.Template.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.source(parseString("source", getJsonNode(jsonNode, "source", TextNode.class), jsonNode.get("_source"), -1));
        builder.scope(parseString("scope", getJsonNode(jsonNode, "scope", TextNode.class), jsonNode.get("_scope"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.DependsOn parseImplementationGuideDependsOn(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.DependsOn.class, jsonNode);
        }
        ImplementationGuide.DependsOn.Builder builder = ImplementationGuide.DependsOn.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.uri((Canonical) parseUri(Canonical.builder(), "uri", getJsonNode(jsonNode, "uri", TextNode.class), jsonNode.get("_uri"), -1));
        builder.packageId((Id) parseString(Id.builder(), "packageId", getJsonNode(jsonNode, "packageId", TextNode.class), jsonNode.get("_packageId"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Global parseImplementationGuideGlobal(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Global.class, jsonNode);
        }
        ImplementationGuide.Global.Builder builder = ImplementationGuide.Global.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonNode(jsonNode, "profile", TextNode.class), jsonNode.get("_profile"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Manifest parseImplementationGuideManifest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Manifest.class, jsonNode);
        }
        ImplementationGuide.Manifest.Builder builder = ImplementationGuide.Manifest.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.rendering((Url) parseUri(Url.builder(), "rendering", getJsonNode(jsonNode, "rendering", TextNode.class), jsonNode.get("_rendering"), -1));
        ArrayNode resourceArray = getArrayNode(jsonNode, "resource");
        if (resourceArray != null) {
            for (int i = 0; i < resourceArray.size(); i++) {
                if (resourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + resourceArray.get(i).getNodeType() + " for element: resource");
                }
                builder.resource(parseImplementationGuideManifestResource("resource", resourceArray.get(i), i));
            }
        }
        ArrayNode pageArray = getArrayNode(jsonNode, "page");
        if (pageArray != null) {
            for (int i = 0; i < pageArray.size(); i++) {
                if (pageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + pageArray.get(i).getNodeType() + " for element: page");
                }
                builder.page(parseImplementationGuideManifestPage("page", pageArray.get(i), i));
            }
        }
        ArrayNode imageArray = getArrayNode(jsonNode, "image", true);
        if (imageArray != null) {
            ArrayNode _imageArray = getArrayNode(jsonNode, "_image");
            for (int i = 0; i < imageArray.size(); i++) {
                builder.image(parseString("image", imageArray.get(i), getJsonNode(_imageArray, i), i));
            }
        }
        ArrayNode otherArray = getArrayNode(jsonNode, "other", true);
        if (otherArray != null) {
            ArrayNode _otherArray = getArrayNode(jsonNode, "_other");
            for (int i = 0; i < otherArray.size(); i++) {
                builder.other(parseString("other", otherArray.get(i), getJsonNode(_otherArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Manifest.Page parseImplementationGuideManifestPage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Manifest.Page.class, jsonNode);
        }
        ImplementationGuide.Manifest.Page.Builder builder = ImplementationGuide.Manifest.Page.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        ArrayNode anchorArray = getArrayNode(jsonNode, "anchor", true);
        if (anchorArray != null) {
            ArrayNode _anchorArray = getArrayNode(jsonNode, "_anchor");
            for (int i = 0; i < anchorArray.size(); i++) {
                builder.anchor(parseString("anchor", anchorArray.get(i), getJsonNode(_anchorArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Manifest.Resource parseImplementationGuideManifestResource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ImplementationGuide.Manifest.Resource.class, jsonNode);
        }
        ImplementationGuide.Manifest.Resource.Builder builder = ImplementationGuide.Manifest.Resource.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.reference(parseReference("reference", getJsonNode(jsonNode, "reference", JsonNode.class), -1));
        builder.example(parseChoiceElement("example", jsonNode, Boolean.class, Canonical.class));
        builder.relativePath((Url) parseUri(Url.builder(), "relativePath", getJsonNode(jsonNode, "relativePath", TextNode.class), jsonNode.get("_relativePath"), -1));
        stackPop();
        return builder.build();
    }

    private Ingredient parseIngredient(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Ingredient.class, jsonNode);
        }
        Ingredient.Builder builder = Ingredient.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode forArray = getArrayNode(jsonNode, "for");
        if (forArray != null) {
            for (int i = 0; i < forArray.size(); i++) {
                if (forArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + forArray.get(i).getNodeType() + " for element: for");
                }
                builder._for(parseReference("for", forArray.get(i), i));
            }
        }
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        ArrayNode functionArray = getArrayNode(jsonNode, "function");
        if (functionArray != null) {
            for (int i = 0; i < functionArray.size(); i++) {
                if (functionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + functionArray.get(i).getNodeType() + " for element: function");
                }
                builder.function(parseCodeableConcept("function", functionArray.get(i), i));
            }
        }
        builder.allergenicIndicator(parseBoolean("allergenicIndicator", getJsonNode(jsonNode, "allergenicIndicator", JsonNode.class), jsonNode.get("_allergenicIndicator"), -1));
        ArrayNode manufacturerArray = getArrayNode(jsonNode, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                if (manufacturerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + manufacturerArray.get(i).getNodeType() + " for element: manufacturer");
                }
                builder.manufacturer(parseIngredientManufacturer("manufacturer", manufacturerArray.get(i), i));
            }
        }
        builder.substance(parseIngredientSubstance("substance", getJsonNode(jsonNode, "substance", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Ingredient.Manufacturer parseIngredientManufacturer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Ingredient.Manufacturer.class, jsonNode);
        }
        Ingredient.Manufacturer.Builder builder = Ingredient.Manufacturer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.role((IngredientManufacturerRole) parseString(IngredientManufacturerRole.builder(), "role", getJsonNode(jsonNode, "role", TextNode.class), jsonNode.get("_role"), -1));
        builder.manufacturer(parseReference("manufacturer", getJsonNode(jsonNode, "manufacturer", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Ingredient.Substance parseIngredientSubstance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Ingredient.Substance.class, jsonNode);
        }
        Ingredient.Substance.Builder builder = Ingredient.Substance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableReference("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode strengthArray = getArrayNode(jsonNode, "strength");
        if (strengthArray != null) {
            for (int i = 0; i < strengthArray.size(); i++) {
                if (strengthArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + strengthArray.get(i).getNodeType() + " for element: strength");
                }
                builder.strength(parseIngredientSubstanceStrength("strength", strengthArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Ingredient.Substance.Strength parseIngredientSubstanceStrength(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Ingredient.Substance.Strength.class, jsonNode);
        }
        Ingredient.Substance.Strength.Builder builder = Ingredient.Substance.Strength.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.presentation(parseChoiceElement("presentation", jsonNode, Ratio.class, RatioRange.class));
        builder.textPresentation(parseString("textPresentation", getJsonNode(jsonNode, "textPresentation", TextNode.class), jsonNode.get("_textPresentation"), -1));
        builder.concentration(parseChoiceElement("concentration", jsonNode, Ratio.class, RatioRange.class));
        builder.textConcentration(parseString("textConcentration", getJsonNode(jsonNode, "textConcentration", TextNode.class), jsonNode.get("_textConcentration"), -1));
        builder.measurementPoint(parseString("measurementPoint", getJsonNode(jsonNode, "measurementPoint", TextNode.class), jsonNode.get("_measurementPoint"), -1));
        ArrayNode countryArray = getArrayNode(jsonNode, "country");
        if (countryArray != null) {
            for (int i = 0; i < countryArray.size(); i++) {
                if (countryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + countryArray.get(i).getNodeType() + " for element: country");
                }
                builder.country(parseCodeableConcept("country", countryArray.get(i), i));
            }
        }
        ArrayNode referenceStrengthArray = getArrayNode(jsonNode, "referenceStrength");
        if (referenceStrengthArray != null) {
            for (int i = 0; i < referenceStrengthArray.size(); i++) {
                if (referenceStrengthArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referenceStrengthArray.get(i).getNodeType() + " for element: referenceStrength");
                }
                builder.referenceStrength(parseIngredientSubstanceStrengthReferenceStrength("referenceStrength", referenceStrengthArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Ingredient.Substance.Strength.ReferenceStrength parseIngredientSubstanceStrengthReferenceStrength(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Ingredient.Substance.Strength.ReferenceStrength.class, jsonNode);
        }
        Ingredient.Substance.Strength.ReferenceStrength.Builder builder = Ingredient.Substance.Strength.ReferenceStrength.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.substance(parseCodeableReference("substance", getJsonNode(jsonNode, "substance", JsonNode.class), -1));
        builder.strength(parseChoiceElement("strength", jsonNode, Ratio.class, RatioRange.class));
        builder.measurementPoint(parseString("measurementPoint", getJsonNode(jsonNode, "measurementPoint", TextNode.class), jsonNode.get("_measurementPoint"), -1));
        ArrayNode countryArray = getArrayNode(jsonNode, "country");
        if (countryArray != null) {
            for (int i = 0; i < countryArray.size(); i++) {
                if (countryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + countryArray.get(i).getNodeType() + " for element: country");
                }
                builder.country(parseCodeableConcept("country", countryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Instant parseInstant(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Instant.Builder builder = Instant.builder();
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.STRING) {
            TextNode jsonString = (TextNode) jsonValue;
            builder.value(jsonString.textValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan parseInsurancePlan(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.class, jsonNode);
        }
        InsurancePlan.Builder builder = InsurancePlan.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        ArrayNode aliasArray = getArrayNode(jsonNode, "alias", true);
        if (aliasArray != null) {
            ArrayNode _aliasArray = getArrayNode(jsonNode, "_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonNode(_aliasArray, i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.ownedBy(parseReference("ownedBy", getJsonNode(jsonNode, "ownedBy", JsonNode.class), -1));
        builder.administeredBy(parseReference("administeredBy", getJsonNode(jsonNode, "administeredBy", JsonNode.class), -1));
        ArrayNode coverageAreaArray = getArrayNode(jsonNode, "coverageArea");
        if (coverageAreaArray != null) {
            for (int i = 0; i < coverageAreaArray.size(); i++) {
                if (coverageAreaArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + coverageAreaArray.get(i).getNodeType() + " for element: coverageArea");
                }
                builder.coverageArea(parseReference("coverageArea", coverageAreaArray.get(i), i));
            }
        }
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseInsurancePlanContact("contact", contactArray.get(i), i));
            }
        }
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseReference("endpoint", endpointArray.get(i), i));
            }
        }
        ArrayNode networkArray = getArrayNode(jsonNode, "network");
        if (networkArray != null) {
            for (int i = 0; i < networkArray.size(); i++) {
                if (networkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + networkArray.get(i).getNodeType() + " for element: network");
                }
                builder.network(parseReference("network", networkArray.get(i), i));
            }
        }
        ArrayNode coverageArray = getArrayNode(jsonNode, "coverage");
        if (coverageArray != null) {
            for (int i = 0; i < coverageArray.size(); i++) {
                if (coverageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + coverageArray.get(i).getNodeType() + " for element: coverage");
                }
                builder.coverage(parseInsurancePlanCoverage("coverage", coverageArray.get(i), i));
            }
        }
        ArrayNode planArray = getArrayNode(jsonNode, "plan");
        if (planArray != null) {
            for (int i = 0; i < planArray.size(); i++) {
                if (planArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + planArray.get(i).getNodeType() + " for element: plan");
                }
                builder.plan(parseInsurancePlanPlan("plan", planArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Contact parseInsurancePlanContact(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Contact.class, jsonNode);
        }
        InsurancePlan.Contact.Builder builder = InsurancePlan.Contact.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.purpose(parseCodeableConcept("purpose", getJsonNode(jsonNode, "purpose", JsonNode.class), -1));
        builder.name(parseHumanName("name", getJsonNode(jsonNode, "name", JsonNode.class), -1));
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        builder.address(parseAddress("address", getJsonNode(jsonNode, "address", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Coverage parseInsurancePlanCoverage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Coverage.class, jsonNode);
        }
        InsurancePlan.Coverage.Builder builder = InsurancePlan.Coverage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode networkArray = getArrayNode(jsonNode, "network");
        if (networkArray != null) {
            for (int i = 0; i < networkArray.size(); i++) {
                if (networkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + networkArray.get(i).getNodeType() + " for element: network");
                }
                builder.network(parseReference("network", networkArray.get(i), i));
            }
        }
        ArrayNode benefitArray = getArrayNode(jsonNode, "benefit");
        if (benefitArray != null) {
            for (int i = 0; i < benefitArray.size(); i++) {
                if (benefitArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + benefitArray.get(i).getNodeType() + " for element: benefit");
                }
                builder.benefit(parseInsurancePlanCoverageBenefit("benefit", benefitArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Coverage.Benefit parseInsurancePlanCoverageBenefit(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Coverage.Benefit.class, jsonNode);
        }
        InsurancePlan.Coverage.Benefit.Builder builder = InsurancePlan.Coverage.Benefit.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.requirement(parseString("requirement", getJsonNode(jsonNode, "requirement", TextNode.class), jsonNode.get("_requirement"), -1));
        ArrayNode limitArray = getArrayNode(jsonNode, "limit");
        if (limitArray != null) {
            for (int i = 0; i < limitArray.size(); i++) {
                if (limitArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + limitArray.get(i).getNodeType() + " for element: limit");
                }
                builder.limit(parseInsurancePlanCoverageBenefitLimit("limit", limitArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Coverage.Benefit.Limit parseInsurancePlanCoverageBenefitLimit(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Coverage.Benefit.Limit.class, jsonNode);
        }
        InsurancePlan.Coverage.Benefit.Limit.Builder builder = InsurancePlan.Coverage.Benefit.Limit.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.value(parseQuantity("value", getJsonNode(jsonNode, "value", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan parseInsurancePlanPlan(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Plan.class, jsonNode);
        }
        InsurancePlan.Plan.Builder builder = InsurancePlan.Plan.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode coverageAreaArray = getArrayNode(jsonNode, "coverageArea");
        if (coverageAreaArray != null) {
            for (int i = 0; i < coverageAreaArray.size(); i++) {
                if (coverageAreaArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + coverageAreaArray.get(i).getNodeType() + " for element: coverageArea");
                }
                builder.coverageArea(parseReference("coverageArea", coverageAreaArray.get(i), i));
            }
        }
        ArrayNode networkArray = getArrayNode(jsonNode, "network");
        if (networkArray != null) {
            for (int i = 0; i < networkArray.size(); i++) {
                if (networkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + networkArray.get(i).getNodeType() + " for element: network");
                }
                builder.network(parseReference("network", networkArray.get(i), i));
            }
        }
        ArrayNode generalCostArray = getArrayNode(jsonNode, "generalCost");
        if (generalCostArray != null) {
            for (int i = 0; i < generalCostArray.size(); i++) {
                if (generalCostArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + generalCostArray.get(i).getNodeType() + " for element: generalCost");
                }
                builder.generalCost(parseInsurancePlanPlanGeneralCost("generalCost", generalCostArray.get(i), i));
            }
        }
        ArrayNode specificCostArray = getArrayNode(jsonNode, "specificCost");
        if (specificCostArray != null) {
            for (int i = 0; i < specificCostArray.size(); i++) {
                if (specificCostArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specificCostArray.get(i).getNodeType() + " for element: specificCost");
                }
                builder.specificCost(parseInsurancePlanPlanSpecificCost("specificCost", specificCostArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan.GeneralCost parseInsurancePlanPlanGeneralCost(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Plan.GeneralCost.class, jsonNode);
        }
        InsurancePlan.Plan.GeneralCost.Builder builder = InsurancePlan.Plan.GeneralCost.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.groupSize((PositiveInt) parseInteger(PositiveInt.builder(), "groupSize", getJsonNode(jsonNode, "groupSize", NumericNode.class), jsonNode.get("_groupSize"), -1));
        builder.cost(parseMoney("cost", getJsonNode(jsonNode, "cost", JsonNode.class), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan.SpecificCost parseInsurancePlanPlanSpecificCost(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Plan.SpecificCost.class, jsonNode);
        }
        InsurancePlan.Plan.SpecificCost.Builder builder = InsurancePlan.Plan.SpecificCost.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        ArrayNode benefitArray = getArrayNode(jsonNode, "benefit");
        if (benefitArray != null) {
            for (int i = 0; i < benefitArray.size(); i++) {
                if (benefitArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + benefitArray.get(i).getNodeType() + " for element: benefit");
                }
                builder.benefit(parseInsurancePlanPlanSpecificCostBenefit("benefit", benefitArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan.SpecificCost.Benefit parseInsurancePlanPlanSpecificCostBenefit(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Plan.SpecificCost.Benefit.class, jsonNode);
        }
        InsurancePlan.Plan.SpecificCost.Benefit.Builder builder = InsurancePlan.Plan.SpecificCost.Benefit.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode costArray = getArrayNode(jsonNode, "cost");
        if (costArray != null) {
            for (int i = 0; i < costArray.size(); i++) {
                if (costArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + costArray.get(i).getNodeType() + " for element: cost");
                }
                builder.cost(parseInsurancePlanPlanSpecificCostBenefitCost("cost", costArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan.SpecificCost.Benefit.Cost parseInsurancePlanPlanSpecificCostBenefitCost(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(InsurancePlan.Plan.SpecificCost.Benefit.Cost.class, jsonNode);
        }
        InsurancePlan.Plan.SpecificCost.Benefit.Cost.Builder builder = InsurancePlan.Plan.SpecificCost.Benefit.Cost.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.applicability(parseCodeableConcept("applicability", getJsonNode(jsonNode, "applicability", JsonNode.class), -1));
        ArrayNode qualifiersArray = getArrayNode(jsonNode, "qualifiers");
        if (qualifiersArray != null) {
            for (int i = 0; i < qualifiersArray.size(); i++) {
                if (qualifiersArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + qualifiersArray.get(i).getNodeType() + " for element: qualifiers");
                }
                builder.qualifiers(parseCodeableConcept("qualifiers", qualifiersArray.get(i), i));
            }
        }
        builder.value(parseQuantity("value", getJsonNode(jsonNode, "value", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Integer parseInteger(Integer.Builder builder, java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.NUMBER) {
            NumericNode jsonNumber = (NumericNode) jsonValue;
            // XXX: This will allow fractions through via truncation
            builder.value(jsonNumber.intValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: NUMBER but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Integer parseInteger(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        return parseInteger(Integer.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    private Invoice parseInvoice(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Invoice.class, jsonNode);
        }
        Invoice.Builder builder = Invoice.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((InvoiceStatus) parseString(InvoiceStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.cancelledReason(parseString("cancelledReason", getJsonNode(jsonNode, "cancelledReason", TextNode.class), jsonNode.get("_cancelledReason"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.recipient(parseReference("recipient", getJsonNode(jsonNode, "recipient", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        ArrayNode participantArray = getArrayNode(jsonNode, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                if (participantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantArray.get(i).getNodeType() + " for element: participant");
                }
                builder.participant(parseInvoiceParticipant("participant", participantArray.get(i), i));
            }
        }
        builder.issuer(parseReference("issuer", getJsonNode(jsonNode, "issuer", JsonNode.class), -1));
        builder.account(parseReference("account", getJsonNode(jsonNode, "account", JsonNode.class), -1));
        ArrayNode lineItemArray = getArrayNode(jsonNode, "lineItem");
        if (lineItemArray != null) {
            for (int i = 0; i < lineItemArray.size(); i++) {
                if (lineItemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + lineItemArray.get(i).getNodeType() + " for element: lineItem");
                }
                builder.lineItem(parseInvoiceLineItem("lineItem", lineItemArray.get(i), i));
            }
        }
        ArrayNode totalPriceComponentArray = getArrayNode(jsonNode, "totalPriceComponent");
        if (totalPriceComponentArray != null) {
            for (int i = 0; i < totalPriceComponentArray.size(); i++) {
                if (totalPriceComponentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + totalPriceComponentArray.get(i).getNodeType() + " for element: totalPriceComponent");
                }
                builder.totalPriceComponent(parseInvoiceLineItemPriceComponent("totalPriceComponent", totalPriceComponentArray.get(i), i));
            }
        }
        builder.totalNet(parseMoney("totalNet", getJsonNode(jsonNode, "totalNet", JsonNode.class), -1));
        builder.totalGross(parseMoney("totalGross", getJsonNode(jsonNode, "totalGross", JsonNode.class), -1));
        builder.paymentTerms((Markdown) parseString(Markdown.builder(), "paymentTerms", getJsonNode(jsonNode, "paymentTerms", TextNode.class), jsonNode.get("_paymentTerms"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Invoice.LineItem parseInvoiceLineItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Invoice.LineItem.class, jsonNode);
        }
        Invoice.LineItem.Builder builder = Invoice.LineItem.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonNode(jsonNode, "sequence", NumericNode.class), jsonNode.get("_sequence"), -1));
        builder.chargeItem(parseChoiceElement("chargeItem", jsonNode, Reference.class, CodeableConcept.class));
        ArrayNode priceComponentArray = getArrayNode(jsonNode, "priceComponent");
        if (priceComponentArray != null) {
            for (int i = 0; i < priceComponentArray.size(); i++) {
                if (priceComponentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + priceComponentArray.get(i).getNodeType() + " for element: priceComponent");
                }
                builder.priceComponent(parseInvoiceLineItemPriceComponent("priceComponent", priceComponentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Invoice.LineItem.PriceComponent parseInvoiceLineItemPriceComponent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Invoice.LineItem.PriceComponent.class, jsonNode);
        }
        Invoice.LineItem.PriceComponent.Builder builder = Invoice.LineItem.PriceComponent.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((InvoicePriceComponentType) parseString(InvoicePriceComponentType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Invoice.Participant parseInvoiceParticipant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Invoice.Participant.class, jsonNode);
        }
        Invoice.Participant.Builder builder = Invoice.Participant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Library parseLibrary(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Library.class, jsonNode);
        }
        Library.Builder builder = Library.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonNode(jsonNode, "usage", TextNode.class), jsonNode.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode topicArray = getArrayNode(jsonNode, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                if (topicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + topicArray.get(i).getNodeType() + " for element: topic");
                }
                builder.topic(parseCodeableConcept("topic", topicArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseParameterDefinition("parameter", parameterArray.get(i), i));
            }
        }
        ArrayNode dataRequirementArray = getArrayNode(jsonNode, "dataRequirement");
        if (dataRequirementArray != null) {
            for (int i = 0; i < dataRequirementArray.size(); i++) {
                if (dataRequirementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dataRequirementArray.get(i).getNodeType() + " for element: dataRequirement");
                }
                builder.dataRequirement(parseDataRequirement("dataRequirement", dataRequirementArray.get(i), i));
            }
        }
        ArrayNode contentArray = getArrayNode(jsonNode, "content");
        if (contentArray != null) {
            for (int i = 0; i < contentArray.size(); i++) {
                if (contentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contentArray.get(i).getNodeType() + " for element: content");
                }
                builder.content(parseAttachment("content", contentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Linkage parseLinkage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Linkage.class, jsonNode);
        }
        Linkage.Builder builder = Linkage.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseLinkageItem("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Linkage.Item parseLinkageItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Linkage.Item.class, jsonNode);
        }
        Linkage.Item.Builder builder = Linkage.Item.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((LinkageType) parseString(LinkageType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.resource(parseReference("resource", getJsonNode(jsonNode, "resource", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private List parseList(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(List.class, jsonNode);
        }
        List.Builder builder = List.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ListStatus) parseString(ListStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.mode((ListMode) parseString(ListMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.source(parseReference("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        builder.orderedBy(parseCodeableConcept("orderedBy", getJsonNode(jsonNode, "orderedBy", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode entryArray = getArrayNode(jsonNode, "entry");
        if (entryArray != null) {
            for (int i = 0; i < entryArray.size(); i++) {
                if (entryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entryArray.get(i).getNodeType() + " for element: entry");
                }
                builder.entry(parseListEntry("entry", entryArray.get(i), i));
            }
        }
        builder.emptyReason(parseCodeableConcept("emptyReason", getJsonNode(jsonNode, "emptyReason", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private List.Entry parseListEntry(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(List.Entry.class, jsonNode);
        }
        List.Entry.Builder builder = List.Entry.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.flag(parseCodeableConcept("flag", getJsonNode(jsonNode, "flag", JsonNode.class), -1));
        builder.deleted(parseBoolean("deleted", getJsonNode(jsonNode, "deleted", JsonNode.class), jsonNode.get("_deleted"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.item(parseReference("item", getJsonNode(jsonNode, "item", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Location parseLocation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Location.class, jsonNode);
        }
        Location.Builder builder = Location.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((LocationStatus) parseString(LocationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.operationalStatus(parseCoding("operationalStatus", getJsonNode(jsonNode, "operationalStatus", JsonNode.class), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        ArrayNode aliasArray = getArrayNode(jsonNode, "alias", true);
        if (aliasArray != null) {
            ArrayNode _aliasArray = getArrayNode(jsonNode, "_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonNode(_aliasArray, i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.mode((LocationMode) parseString(LocationMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        builder.address(parseAddress("address", getJsonNode(jsonNode, "address", JsonNode.class), -1));
        builder.physicalType(parseCodeableConcept("physicalType", getJsonNode(jsonNode, "physicalType", JsonNode.class), -1));
        builder.position(parseLocationPosition("position", getJsonNode(jsonNode, "position", JsonNode.class), -1));
        builder.managingOrganization(parseReference("managingOrganization", getJsonNode(jsonNode, "managingOrganization", JsonNode.class), -1));
        builder.partOf(parseReference("partOf", getJsonNode(jsonNode, "partOf", JsonNode.class), -1));
        ArrayNode hoursOfOperationArray = getArrayNode(jsonNode, "hoursOfOperation");
        if (hoursOfOperationArray != null) {
            for (int i = 0; i < hoursOfOperationArray.size(); i++) {
                if (hoursOfOperationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + hoursOfOperationArray.get(i).getNodeType() + " for element: hoursOfOperation");
                }
                builder.hoursOfOperation(parseLocationHoursOfOperation("hoursOfOperation", hoursOfOperationArray.get(i), i));
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", getJsonNode(jsonNode, "availabilityExceptions", TextNode.class), jsonNode.get("_availabilityExceptions"), -1));
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseReference("endpoint", endpointArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Location.HoursOfOperation parseLocationHoursOfOperation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Location.HoursOfOperation.class, jsonNode);
        }
        Location.HoursOfOperation.Builder builder = Location.HoursOfOperation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode daysOfWeekArray = getArrayNode(jsonNode, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            ArrayNode _daysOfWeekArray = getArrayNode(jsonNode, "_daysOfWeek");
            for (int i = 0; i < daysOfWeekArray.size(); i++) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", daysOfWeekArray.get(i), getJsonNode(_daysOfWeekArray, i), i));
            }
        }
        builder.allDay(parseBoolean("allDay", getJsonNode(jsonNode, "allDay", JsonNode.class), jsonNode.get("_allDay"), -1));
        builder.openingTime(parseTime("openingTime", getJsonNode(jsonNode, "openingTime", TextNode.class), jsonNode.get("_openingTime"), -1));
        builder.closingTime(parseTime("closingTime", getJsonNode(jsonNode, "closingTime", TextNode.class), jsonNode.get("_closingTime"), -1));
        stackPop();
        return builder.build();
    }

    private Location.Position parseLocationPosition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Location.Position.class, jsonNode);
        }
        Location.Position.Builder builder = Location.Position.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.longitude(parseDecimal("longitude", getJsonNode(jsonNode, "longitude", NumericNode.class), jsonNode.get("_longitude"), -1));
        builder.latitude(parseDecimal("latitude", getJsonNode(jsonNode, "latitude", NumericNode.class), jsonNode.get("_latitude"), -1));
        builder.altitude(parseDecimal("altitude", getJsonNode(jsonNode, "altitude", NumericNode.class), jsonNode.get("_altitude"), -1));
        stackPop();
        return builder.build();
    }

    private ManufacturedItemDefinition parseManufacturedItemDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ManufacturedItemDefinition.class, jsonNode);
        }
        ManufacturedItemDefinition.Builder builder = ManufacturedItemDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.manufacturedDoseForm(parseCodeableConcept("manufacturedDoseForm", getJsonNode(jsonNode, "manufacturedDoseForm", JsonNode.class), -1));
        builder.unitOfPresentation(parseCodeableConcept("unitOfPresentation", getJsonNode(jsonNode, "unitOfPresentation", JsonNode.class), -1));
        ArrayNode manufacturerArray = getArrayNode(jsonNode, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                if (manufacturerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + manufacturerArray.get(i).getNodeType() + " for element: manufacturer");
                }
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.get(i), i));
            }
        }
        ArrayNode ingredientArray = getArrayNode(jsonNode, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                if (ingredientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ingredientArray.get(i).getNodeType() + " for element: ingredient");
                }
                builder.ingredient(parseCodeableConcept("ingredient", ingredientArray.get(i), i));
            }
        }
        ArrayNode propertyArray = getArrayNode(jsonNode, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                if (propertyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyArray.get(i).getNodeType() + " for element: property");
                }
                builder.property(parseManufacturedItemDefinitionProperty("property", propertyArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ManufacturedItemDefinition.Property parseManufacturedItemDefinitionProperty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ManufacturedItemDefinition.Property.class, jsonNode);
        }
        ManufacturedItemDefinition.Property.Builder builder = ManufacturedItemDefinition.Property.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Date.class, Boolean.class, Attachment.class));
        stackPop();
        return builder.build();
    }

    private MarketingStatus parseMarketingStatus(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MarketingStatus.class, jsonNode);
        }
        MarketingStatus.Builder builder = MarketingStatus.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.country(parseCodeableConcept("country", getJsonNode(jsonNode, "country", JsonNode.class), -1));
        builder.jurisdiction(parseCodeableConcept("jurisdiction", getJsonNode(jsonNode, "jurisdiction", JsonNode.class), -1));
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.dateRange(parsePeriod("dateRange", getJsonNode(jsonNode, "dateRange", JsonNode.class), -1));
        builder.restoreDate(parseDateTime("restoreDate", getJsonNode(jsonNode, "restoreDate", TextNode.class), jsonNode.get("_restoreDate"), -1));
        stackPop();
        return builder.build();
    }

    private Measure parseMeasure(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Measure.class, jsonNode);
        }
        Measure.Builder builder = Measure.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonNode(jsonNode, "usage", TextNode.class), jsonNode.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode topicArray = getArrayNode(jsonNode, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                if (topicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + topicArray.get(i).getNodeType() + " for element: topic");
                }
                builder.topic(parseCodeableConcept("topic", topicArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        ArrayNode libraryArray = getArrayNode(jsonNode, "library", true);
        if (libraryArray != null) {
            ArrayNode _libraryArray = getArrayNode(jsonNode, "_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonNode(_libraryArray, i), i));
            }
        }
        builder.disclaimer((Markdown) parseString(Markdown.builder(), "disclaimer", getJsonNode(jsonNode, "disclaimer", TextNode.class), jsonNode.get("_disclaimer"), -1));
        builder.scoring(parseCodeableConcept("scoring", getJsonNode(jsonNode, "scoring", JsonNode.class), -1));
        builder.compositeScoring(parseCodeableConcept("compositeScoring", getJsonNode(jsonNode, "compositeScoring", JsonNode.class), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.riskAdjustment(parseString("riskAdjustment", getJsonNode(jsonNode, "riskAdjustment", TextNode.class), jsonNode.get("_riskAdjustment"), -1));
        builder.rateAggregation(parseString("rateAggregation", getJsonNode(jsonNode, "rateAggregation", TextNode.class), jsonNode.get("_rateAggregation"), -1));
        builder.rationale((Markdown) parseString(Markdown.builder(), "rationale", getJsonNode(jsonNode, "rationale", TextNode.class), jsonNode.get("_rationale"), -1));
        builder.clinicalRecommendationStatement((Markdown) parseString(Markdown.builder(), "clinicalRecommendationStatement", getJsonNode(jsonNode, "clinicalRecommendationStatement", TextNode.class), jsonNode.get("_clinicalRecommendationStatement"), -1));
        builder.improvementNotation(parseCodeableConcept("improvementNotation", getJsonNode(jsonNode, "improvementNotation", JsonNode.class), -1));
        ArrayNode definitionArray = getArrayNode(jsonNode, "definition", true);
        if (definitionArray != null) {
            ArrayNode _definitionArray = getArrayNode(jsonNode, "_definition");
            for (int i = 0; i < definitionArray.size(); i++) {
                builder.definition((Markdown) parseString(Markdown.builder(), "definition", definitionArray.get(i), getJsonNode(_definitionArray, i), i));
            }
        }
        builder.guidance((Markdown) parseString(Markdown.builder(), "guidance", getJsonNode(jsonNode, "guidance", TextNode.class), jsonNode.get("_guidance"), -1));
        ArrayNode groupArray = getArrayNode(jsonNode, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                if (groupArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + groupArray.get(i).getNodeType() + " for element: group");
                }
                builder.group(parseMeasureGroup("group", groupArray.get(i), i));
            }
        }
        ArrayNode supplementalDataArray = getArrayNode(jsonNode, "supplementalData");
        if (supplementalDataArray != null) {
            for (int i = 0; i < supplementalDataArray.size(); i++) {
                if (supplementalDataArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supplementalDataArray.get(i).getNodeType() + " for element: supplementalData");
                }
                builder.supplementalData(parseMeasureSupplementalData("supplementalData", supplementalDataArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Measure.Group parseMeasureGroup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Measure.Group.class, jsonNode);
        }
        Measure.Group.Builder builder = Measure.Group.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode populationArray = getArrayNode(jsonNode, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                if (populationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + populationArray.get(i).getNodeType() + " for element: population");
                }
                builder.population(parseMeasureGroupPopulation("population", populationArray.get(i), i));
            }
        }
        ArrayNode stratifierArray = getArrayNode(jsonNode, "stratifier");
        if (stratifierArray != null) {
            for (int i = 0; i < stratifierArray.size(); i++) {
                if (stratifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + stratifierArray.get(i).getNodeType() + " for element: stratifier");
                }
                builder.stratifier(parseMeasureGroupStratifier("stratifier", stratifierArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Measure.Group.Population parseMeasureGroupPopulation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Measure.Group.Population.class, jsonNode);
        }
        Measure.Group.Population.Builder builder = Measure.Group.Population.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.criteria(parseExpression("criteria", getJsonNode(jsonNode, "criteria", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Measure.Group.Stratifier parseMeasureGroupStratifier(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Measure.Group.Stratifier.class, jsonNode);
        }
        Measure.Group.Stratifier.Builder builder = Measure.Group.Stratifier.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.criteria(parseExpression("criteria", getJsonNode(jsonNode, "criteria", JsonNode.class), -1));
        ArrayNode componentArray = getArrayNode(jsonNode, "component");
        if (componentArray != null) {
            for (int i = 0; i < componentArray.size(); i++) {
                if (componentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + componentArray.get(i).getNodeType() + " for element: component");
                }
                builder.component(parseMeasureGroupStratifierComponent("component", componentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Measure.Group.Stratifier.Component parseMeasureGroupStratifierComponent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Measure.Group.Stratifier.Component.class, jsonNode);
        }
        Measure.Group.Stratifier.Component.Builder builder = Measure.Group.Stratifier.Component.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.criteria(parseExpression("criteria", getJsonNode(jsonNode, "criteria", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Measure.SupplementalData parseMeasureSupplementalData(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Measure.SupplementalData.class, jsonNode);
        }
        Measure.SupplementalData.Builder builder = Measure.SupplementalData.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode usageArray = getArrayNode(jsonNode, "usage");
        if (usageArray != null) {
            for (int i = 0; i < usageArray.size(); i++) {
                if (usageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + usageArray.get(i).getNodeType() + " for element: usage");
                }
                builder.usage(parseCodeableConcept("usage", usageArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.criteria(parseExpression("criteria", getJsonNode(jsonNode, "criteria", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MeasureReport parseMeasureReport(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MeasureReport.class, jsonNode);
        }
        MeasureReport.Builder builder = MeasureReport.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((MeasureReportStatus) parseString(MeasureReportStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type((MeasureReportType) parseString(MeasureReportType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.measure((Canonical) parseUri(Canonical.builder(), "measure", getJsonNode(jsonNode, "measure", TextNode.class), jsonNode.get("_measure"), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.reporter(parseReference("reporter", getJsonNode(jsonNode, "reporter", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.improvementNotation(parseCodeableConcept("improvementNotation", getJsonNode(jsonNode, "improvementNotation", JsonNode.class), -1));
        ArrayNode groupArray = getArrayNode(jsonNode, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                if (groupArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + groupArray.get(i).getNodeType() + " for element: group");
                }
                builder.group(parseMeasureReportGroup("group", groupArray.get(i), i));
            }
        }
        ArrayNode evaluatedResourceArray = getArrayNode(jsonNode, "evaluatedResource");
        if (evaluatedResourceArray != null) {
            for (int i = 0; i < evaluatedResourceArray.size(); i++) {
                if (evaluatedResourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + evaluatedResourceArray.get(i).getNodeType() + " for element: evaluatedResource");
                }
                builder.evaluatedResource(parseReference("evaluatedResource", evaluatedResourceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group parseMeasureReportGroup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MeasureReport.Group.class, jsonNode);
        }
        MeasureReport.Group.Builder builder = MeasureReport.Group.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode populationArray = getArrayNode(jsonNode, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                if (populationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + populationArray.get(i).getNodeType() + " for element: population");
                }
                builder.population(parseMeasureReportGroupPopulation("population", populationArray.get(i), i));
            }
        }
        builder.measureScore(parseQuantity("measureScore", getJsonNode(jsonNode, "measureScore", JsonNode.class), -1));
        ArrayNode stratifierArray = getArrayNode(jsonNode, "stratifier");
        if (stratifierArray != null) {
            for (int i = 0; i < stratifierArray.size(); i++) {
                if (stratifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + stratifierArray.get(i).getNodeType() + " for element: stratifier");
                }
                builder.stratifier(parseMeasureReportGroupStratifier("stratifier", stratifierArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Population parseMeasureReportGroupPopulation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MeasureReport.Group.Population.class, jsonNode);
        }
        MeasureReport.Group.Population.Builder builder = MeasureReport.Group.Population.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.count(parseInteger("count", getJsonNode(jsonNode, "count", NumericNode.class), jsonNode.get("_count"), -1));
        builder.subjectResults(parseReference("subjectResults", getJsonNode(jsonNode, "subjectResults", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Stratifier parseMeasureReportGroupStratifier(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MeasureReport.Group.Stratifier.class, jsonNode);
        }
        MeasureReport.Group.Stratifier.Builder builder = MeasureReport.Group.Stratifier.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        ArrayNode stratumArray = getArrayNode(jsonNode, "stratum");
        if (stratumArray != null) {
            for (int i = 0; i < stratumArray.size(); i++) {
                if (stratumArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + stratumArray.get(i).getNodeType() + " for element: stratum");
                }
                builder.stratum(parseMeasureReportGroupStratifierStratum("stratum", stratumArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Stratifier.Stratum parseMeasureReportGroupStratifierStratum(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MeasureReport.Group.Stratifier.Stratum.class, jsonNode);
        }
        MeasureReport.Group.Stratifier.Stratum.Builder builder = MeasureReport.Group.Stratifier.Stratum.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.value(parseCodeableConcept("value", getJsonNode(jsonNode, "value", JsonNode.class), -1));
        ArrayNode componentArray = getArrayNode(jsonNode, "component");
        if (componentArray != null) {
            for (int i = 0; i < componentArray.size(); i++) {
                if (componentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + componentArray.get(i).getNodeType() + " for element: component");
                }
                builder.component(parseMeasureReportGroupStratifierStratumComponent("component", componentArray.get(i), i));
            }
        }
        ArrayNode populationArray = getArrayNode(jsonNode, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                if (populationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + populationArray.get(i).getNodeType() + " for element: population");
                }
                builder.population(parseMeasureReportGroupStratifierStratumPopulation("population", populationArray.get(i), i));
            }
        }
        builder.measureScore(parseQuantity("measureScore", getJsonNode(jsonNode, "measureScore", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Stratifier.Stratum.Component parseMeasureReportGroupStratifierStratumComponent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MeasureReport.Group.Stratifier.Stratum.Component.class, jsonNode);
        }
        MeasureReport.Group.Stratifier.Stratum.Component.Builder builder = MeasureReport.Group.Stratifier.Stratum.Component.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value(parseCodeableConcept("value", getJsonNode(jsonNode, "value", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Stratifier.Stratum.Population parseMeasureReportGroupStratifierStratumPopulation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MeasureReport.Group.Stratifier.Stratum.Population.class, jsonNode);
        }
        MeasureReport.Group.Stratifier.Stratum.Population.Builder builder = MeasureReport.Group.Stratifier.Stratum.Population.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.count(parseInteger("count", getJsonNode(jsonNode, "count", NumericNode.class), jsonNode.get("_count"), -1));
        builder.subjectResults(parseReference("subjectResults", getJsonNode(jsonNode, "subjectResults", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Media parseMedia(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Media.class, jsonNode);
        }
        Media.Builder builder = Media.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((MediaStatus) parseString(MediaStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.modality(parseCodeableConcept("modality", getJsonNode(jsonNode, "modality", JsonNode.class), -1));
        builder.view(parseCodeableConcept("view", getJsonNode(jsonNode, "view", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.created(parseChoiceElement("created", jsonNode, DateTime.class, Period.class));
        builder.issued(parseInstant("issued", getJsonNode(jsonNode, "issued", TextNode.class), jsonNode.get("_issued"), -1));
        builder.operator(parseReference("operator", getJsonNode(jsonNode, "operator", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        builder.deviceName(parseString("deviceName", getJsonNode(jsonNode, "deviceName", TextNode.class), jsonNode.get("_deviceName"), -1));
        builder.device(parseReference("device", getJsonNode(jsonNode, "device", JsonNode.class), -1));
        builder.height((PositiveInt) parseInteger(PositiveInt.builder(), "height", getJsonNode(jsonNode, "height", NumericNode.class), jsonNode.get("_height"), -1));
        builder.width((PositiveInt) parseInteger(PositiveInt.builder(), "width", getJsonNode(jsonNode, "width", NumericNode.class), jsonNode.get("_width"), -1));
        builder.frames((PositiveInt) parseInteger(PositiveInt.builder(), "frames", getJsonNode(jsonNode, "frames", NumericNode.class), jsonNode.get("_frames"), -1));
        builder.duration(parseDecimal("duration", getJsonNode(jsonNode, "duration", NumericNode.class), jsonNode.get("_duration"), -1));
        builder.content(parseAttachment("content", getJsonNode(jsonNode, "content", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Medication parseMedication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Medication.class, jsonNode);
        }
        Medication.Builder builder = Medication.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.status((MedicationStatus) parseString(MedicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.manufacturer(parseReference("manufacturer", getJsonNode(jsonNode, "manufacturer", JsonNode.class), -1));
        builder.form(parseCodeableConcept("form", getJsonNode(jsonNode, "form", JsonNode.class), -1));
        builder.amount(parseRatio("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        ArrayNode ingredientArray = getArrayNode(jsonNode, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                if (ingredientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ingredientArray.get(i).getNodeType() + " for element: ingredient");
                }
                builder.ingredient(parseMedicationIngredient("ingredient", ingredientArray.get(i), i));
            }
        }
        builder.batch(parseMedicationBatch("batch", getJsonNode(jsonNode, "batch", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Medication.Batch parseMedicationBatch(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Medication.Batch.class, jsonNode);
        }
        Medication.Batch.Builder builder = Medication.Batch.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.lotNumber(parseString("lotNumber", getJsonNode(jsonNode, "lotNumber", TextNode.class), jsonNode.get("_lotNumber"), -1));
        builder.expirationDate(parseDateTime("expirationDate", getJsonNode(jsonNode, "expirationDate", TextNode.class), jsonNode.get("_expirationDate"), -1));
        stackPop();
        return builder.build();
    }

    private Medication.Ingredient parseMedicationIngredient(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Medication.Ingredient.class, jsonNode);
        }
        Medication.Ingredient.Builder builder = Medication.Ingredient.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.item(parseChoiceElement("item", jsonNode, CodeableConcept.class, Reference.class));
        builder.isActive(parseBoolean("isActive", getJsonNode(jsonNode, "isActive", JsonNode.class), jsonNode.get("_isActive"), -1));
        builder.strength(parseRatio("strength", getJsonNode(jsonNode, "strength", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationAdministration parseMedicationAdministration(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationAdministration.class, jsonNode);
        }
        MedicationAdministration.Builder builder = MedicationAdministration.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesArray = getArrayNode(jsonNode, "instantiates", true);
        if (instantiatesArray != null) {
            ArrayNode _instantiatesArray = getArrayNode(jsonNode, "_instantiates");
            for (int i = 0; i < instantiatesArray.size(); i++) {
                builder.instantiates(parseUri("instantiates", instantiatesArray.get(i), getJsonNode(_instantiatesArray, i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((MedicationAdministrationStatus) parseString(MedicationAdministrationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode statusReasonArray = getArrayNode(jsonNode, "statusReason");
        if (statusReasonArray != null) {
            for (int i = 0; i < statusReasonArray.size(); i++) {
                if (statusReasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + statusReasonArray.get(i).getNodeType() + " for element: statusReason");
                }
                builder.statusReason(parseCodeableConcept("statusReason", statusReasonArray.get(i), i));
            }
        }
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.medication(parseChoiceElement("medication", jsonNode, CodeableConcept.class, Reference.class));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.context(parseReference("context", getJsonNode(jsonNode, "context", JsonNode.class), -1));
        ArrayNode supportingInformationArray = getArrayNode(jsonNode, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                if (supportingInformationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInformationArray.get(i).getNodeType() + " for element: supportingInformation");
                }
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.get(i), i));
            }
        }
        builder.effective(parseChoiceElement("effective", jsonNode, DateTime.class, Period.class));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseMedicationAdministrationPerformer("performer", performerArray.get(i), i));
            }
        }
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        builder.request(parseReference("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        ArrayNode deviceArray = getArrayNode(jsonNode, "device");
        if (deviceArray != null) {
            for (int i = 0; i < deviceArray.size(); i++) {
                if (deviceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + deviceArray.get(i).getNodeType() + " for element: device");
                }
                builder.device(parseReference("device", deviceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.dosage(parseMedicationAdministrationDosage("dosage", getJsonNode(jsonNode, "dosage", JsonNode.class), -1));
        ArrayNode eventHistoryArray = getArrayNode(jsonNode, "eventHistory");
        if (eventHistoryArray != null) {
            for (int i = 0; i < eventHistoryArray.size(); i++) {
                if (eventHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + eventHistoryArray.get(i).getNodeType() + " for element: eventHistory");
                }
                builder.eventHistory(parseReference("eventHistory", eventHistoryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationAdministration.Dosage parseMedicationAdministrationDosage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationAdministration.Dosage.class, jsonNode);
        }
        MedicationAdministration.Dosage.Builder builder = MedicationAdministration.Dosage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        builder.site(parseCodeableConcept("site", getJsonNode(jsonNode, "site", JsonNode.class), -1));
        builder.route(parseCodeableConcept("route", getJsonNode(jsonNode, "route", JsonNode.class), -1));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        builder.dose((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "dose", getJsonNode(jsonNode, "dose", JsonNode.class), -1));
        builder.rate(parseChoiceElement("rate", jsonNode, Ratio.class, SimpleQuantity.class));
        stackPop();
        return builder.build();
    }

    private MedicationAdministration.Performer parseMedicationAdministrationPerformer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationAdministration.Performer.class, jsonNode);
        }
        MedicationAdministration.Performer.Builder builder = MedicationAdministration.Performer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.function(parseCodeableConcept("function", getJsonNode(jsonNode, "function", JsonNode.class), -1));
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationDispense parseMedicationDispense(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationDispense.class, jsonNode);
        }
        MedicationDispense.Builder builder = MedicationDispense.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((MedicationDispenseStatus) parseString(MedicationDispenseStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseChoiceElement("statusReason", jsonNode, CodeableConcept.class, Reference.class));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.medication(parseChoiceElement("medication", jsonNode, CodeableConcept.class, Reference.class));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.context(parseReference("context", getJsonNode(jsonNode, "context", JsonNode.class), -1));
        ArrayNode supportingInformationArray = getArrayNode(jsonNode, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                if (supportingInformationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInformationArray.get(i).getNodeType() + " for element: supportingInformation");
                }
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.get(i), i));
            }
        }
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseMedicationDispensePerformer("performer", performerArray.get(i), i));
            }
        }
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        ArrayNode authorizingPrescriptionArray = getArrayNode(jsonNode, "authorizingPrescription");
        if (authorizingPrescriptionArray != null) {
            for (int i = 0; i < authorizingPrescriptionArray.size(); i++) {
                if (authorizingPrescriptionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorizingPrescriptionArray.get(i).getNodeType() + " for element: authorizingPrescription");
                }
                builder.authorizingPrescription(parseReference("authorizingPrescription", authorizingPrescriptionArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.daysSupply((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "daysSupply", getJsonNode(jsonNode, "daysSupply", JsonNode.class), -1));
        builder.whenPrepared(parseDateTime("whenPrepared", getJsonNode(jsonNode, "whenPrepared", TextNode.class), jsonNode.get("_whenPrepared"), -1));
        builder.whenHandedOver(parseDateTime("whenHandedOver", getJsonNode(jsonNode, "whenHandedOver", TextNode.class), jsonNode.get("_whenHandedOver"), -1));
        builder.destination(parseReference("destination", getJsonNode(jsonNode, "destination", JsonNode.class), -1));
        ArrayNode receiverArray = getArrayNode(jsonNode, "receiver");
        if (receiverArray != null) {
            for (int i = 0; i < receiverArray.size(); i++) {
                if (receiverArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + receiverArray.get(i).getNodeType() + " for element: receiver");
                }
                builder.receiver(parseReference("receiver", receiverArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode dosageInstructionArray = getArrayNode(jsonNode, "dosageInstruction");
        if (dosageInstructionArray != null) {
            for (int i = 0; i < dosageInstructionArray.size(); i++) {
                if (dosageInstructionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dosageInstructionArray.get(i).getNodeType() + " for element: dosageInstruction");
                }
                builder.dosageInstruction(parseDosage("dosageInstruction", dosageInstructionArray.get(i), i));
            }
        }
        builder.substitution(parseMedicationDispenseSubstitution("substitution", getJsonNode(jsonNode, "substitution", JsonNode.class), -1));
        ArrayNode detectedIssueArray = getArrayNode(jsonNode, "detectedIssue");
        if (detectedIssueArray != null) {
            for (int i = 0; i < detectedIssueArray.size(); i++) {
                if (detectedIssueArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detectedIssueArray.get(i).getNodeType() + " for element: detectedIssue");
                }
                builder.detectedIssue(parseReference("detectedIssue", detectedIssueArray.get(i), i));
            }
        }
        ArrayNode eventHistoryArray = getArrayNode(jsonNode, "eventHistory");
        if (eventHistoryArray != null) {
            for (int i = 0; i < eventHistoryArray.size(); i++) {
                if (eventHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + eventHistoryArray.get(i).getNodeType() + " for element: eventHistory");
                }
                builder.eventHistory(parseReference("eventHistory", eventHistoryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationDispense.Performer parseMedicationDispensePerformer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationDispense.Performer.class, jsonNode);
        }
        MedicationDispense.Performer.Builder builder = MedicationDispense.Performer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.function(parseCodeableConcept("function", getJsonNode(jsonNode, "function", JsonNode.class), -1));
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationDispense.Substitution parseMedicationDispenseSubstitution(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationDispense.Substitution.class, jsonNode);
        }
        MedicationDispense.Substitution.Builder builder = MedicationDispense.Substitution.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.wasSubstituted(parseBoolean("wasSubstituted", getJsonNode(jsonNode, "wasSubstituted", JsonNode.class), jsonNode.get("_wasSubstituted"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode reasonArray = getArrayNode(jsonNode, "reason");
        if (reasonArray != null) {
            for (int i = 0; i < reasonArray.size(); i++) {
                if (reasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonArray.get(i).getNodeType() + " for element: reason");
                }
                builder.reason(parseCodeableConcept("reason", reasonArray.get(i), i));
            }
        }
        ArrayNode responsiblePartyArray = getArrayNode(jsonNode, "responsibleParty");
        if (responsiblePartyArray != null) {
            for (int i = 0; i < responsiblePartyArray.size(); i++) {
                if (responsiblePartyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + responsiblePartyArray.get(i).getNodeType() + " for element: responsibleParty");
                }
                builder.responsibleParty(parseReference("responsibleParty", responsiblePartyArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge parseMedicationKnowledge(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.class, jsonNode);
        }
        MedicationKnowledge.Builder builder = MedicationKnowledge.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.status((MedicationKnowledgeStatus) parseString(MedicationKnowledgeStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.manufacturer(parseReference("manufacturer", getJsonNode(jsonNode, "manufacturer", JsonNode.class), -1));
        builder.doseForm(parseCodeableConcept("doseForm", getJsonNode(jsonNode, "doseForm", JsonNode.class), -1));
        builder.amount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        ArrayNode synonymArray = getArrayNode(jsonNode, "synonym", true);
        if (synonymArray != null) {
            ArrayNode _synonymArray = getArrayNode(jsonNode, "_synonym");
            for (int i = 0; i < synonymArray.size(); i++) {
                builder.synonym(parseString("synonym", synonymArray.get(i), getJsonNode(_synonymArray, i), i));
            }
        }
        ArrayNode relatedMedicationKnowledgeArray = getArrayNode(jsonNode, "relatedMedicationKnowledge");
        if (relatedMedicationKnowledgeArray != null) {
            for (int i = 0; i < relatedMedicationKnowledgeArray.size(); i++) {
                if (relatedMedicationKnowledgeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedMedicationKnowledgeArray.get(i).getNodeType() + " for element: relatedMedicationKnowledge");
                }
                builder.relatedMedicationKnowledge(parseMedicationKnowledgeRelatedMedicationKnowledge("relatedMedicationKnowledge", relatedMedicationKnowledgeArray.get(i), i));
            }
        }
        ArrayNode associatedMedicationArray = getArrayNode(jsonNode, "associatedMedication");
        if (associatedMedicationArray != null) {
            for (int i = 0; i < associatedMedicationArray.size(); i++) {
                if (associatedMedicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + associatedMedicationArray.get(i).getNodeType() + " for element: associatedMedication");
                }
                builder.associatedMedication(parseReference("associatedMedication", associatedMedicationArray.get(i), i));
            }
        }
        ArrayNode productTypeArray = getArrayNode(jsonNode, "productType");
        if (productTypeArray != null) {
            for (int i = 0; i < productTypeArray.size(); i++) {
                if (productTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + productTypeArray.get(i).getNodeType() + " for element: productType");
                }
                builder.productType(parseCodeableConcept("productType", productTypeArray.get(i), i));
            }
        }
        ArrayNode monographArray = getArrayNode(jsonNode, "monograph");
        if (monographArray != null) {
            for (int i = 0; i < monographArray.size(); i++) {
                if (monographArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + monographArray.get(i).getNodeType() + " for element: monograph");
                }
                builder.monograph(parseMedicationKnowledgeMonograph("monograph", monographArray.get(i), i));
            }
        }
        ArrayNode ingredientArray = getArrayNode(jsonNode, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                if (ingredientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ingredientArray.get(i).getNodeType() + " for element: ingredient");
                }
                builder.ingredient(parseMedicationKnowledgeIngredient("ingredient", ingredientArray.get(i), i));
            }
        }
        builder.preparationInstruction((Markdown) parseString(Markdown.builder(), "preparationInstruction", getJsonNode(jsonNode, "preparationInstruction", TextNode.class), jsonNode.get("_preparationInstruction"), -1));
        ArrayNode intendedRouteArray = getArrayNode(jsonNode, "intendedRoute");
        if (intendedRouteArray != null) {
            for (int i = 0; i < intendedRouteArray.size(); i++) {
                if (intendedRouteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + intendedRouteArray.get(i).getNodeType() + " for element: intendedRoute");
                }
                builder.intendedRoute(parseCodeableConcept("intendedRoute", intendedRouteArray.get(i), i));
            }
        }
        ArrayNode costArray = getArrayNode(jsonNode, "cost");
        if (costArray != null) {
            for (int i = 0; i < costArray.size(); i++) {
                if (costArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + costArray.get(i).getNodeType() + " for element: cost");
                }
                builder.cost(parseMedicationKnowledgeCost("cost", costArray.get(i), i));
            }
        }
        ArrayNode monitoringProgramArray = getArrayNode(jsonNode, "monitoringProgram");
        if (monitoringProgramArray != null) {
            for (int i = 0; i < monitoringProgramArray.size(); i++) {
                if (monitoringProgramArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + monitoringProgramArray.get(i).getNodeType() + " for element: monitoringProgram");
                }
                builder.monitoringProgram(parseMedicationKnowledgeMonitoringProgram("monitoringProgram", monitoringProgramArray.get(i), i));
            }
        }
        ArrayNode administrationGuidelinesArray = getArrayNode(jsonNode, "administrationGuidelines");
        if (administrationGuidelinesArray != null) {
            for (int i = 0; i < administrationGuidelinesArray.size(); i++) {
                if (administrationGuidelinesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + administrationGuidelinesArray.get(i).getNodeType() + " for element: administrationGuidelines");
                }
                builder.administrationGuidelines(parseMedicationKnowledgeAdministrationGuidelines("administrationGuidelines", administrationGuidelinesArray.get(i), i));
            }
        }
        ArrayNode medicineClassificationArray = getArrayNode(jsonNode, "medicineClassification");
        if (medicineClassificationArray != null) {
            for (int i = 0; i < medicineClassificationArray.size(); i++) {
                if (medicineClassificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + medicineClassificationArray.get(i).getNodeType() + " for element: medicineClassification");
                }
                builder.medicineClassification(parseMedicationKnowledgeMedicineClassification("medicineClassification", medicineClassificationArray.get(i), i));
            }
        }
        builder.packaging(parseMedicationKnowledgePackaging("packaging", getJsonNode(jsonNode, "packaging", JsonNode.class), -1));
        ArrayNode drugCharacteristicArray = getArrayNode(jsonNode, "drugCharacteristic");
        if (drugCharacteristicArray != null) {
            for (int i = 0; i < drugCharacteristicArray.size(); i++) {
                if (drugCharacteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + drugCharacteristicArray.get(i).getNodeType() + " for element: drugCharacteristic");
                }
                builder.drugCharacteristic(parseMedicationKnowledgeDrugCharacteristic("drugCharacteristic", drugCharacteristicArray.get(i), i));
            }
        }
        ArrayNode contraindicationArray = getArrayNode(jsonNode, "contraindication");
        if (contraindicationArray != null) {
            for (int i = 0; i < contraindicationArray.size(); i++) {
                if (contraindicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contraindicationArray.get(i).getNodeType() + " for element: contraindication");
                }
                builder.contraindication(parseReference("contraindication", contraindicationArray.get(i), i));
            }
        }
        ArrayNode regulatoryArray = getArrayNode(jsonNode, "regulatory");
        if (regulatoryArray != null) {
            for (int i = 0; i < regulatoryArray.size(); i++) {
                if (regulatoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + regulatoryArray.get(i).getNodeType() + " for element: regulatory");
                }
                builder.regulatory(parseMedicationKnowledgeRegulatory("regulatory", regulatoryArray.get(i), i));
            }
        }
        ArrayNode kineticsArray = getArrayNode(jsonNode, "kinetics");
        if (kineticsArray != null) {
            for (int i = 0; i < kineticsArray.size(); i++) {
                if (kineticsArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + kineticsArray.get(i).getNodeType() + " for element: kinetics");
                }
                builder.kinetics(parseMedicationKnowledgeKinetics("kinetics", kineticsArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.AdministrationGuidelines parseMedicationKnowledgeAdministrationGuidelines(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.AdministrationGuidelines.class, jsonNode);
        }
        MedicationKnowledge.AdministrationGuidelines.Builder builder = MedicationKnowledge.AdministrationGuidelines.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode dosageArray = getArrayNode(jsonNode, "dosage");
        if (dosageArray != null) {
            for (int i = 0; i < dosageArray.size(); i++) {
                if (dosageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dosageArray.get(i).getNodeType() + " for element: dosage");
                }
                builder.dosage(parseMedicationKnowledgeAdministrationGuidelinesDosage("dosage", dosageArray.get(i), i));
            }
        }
        builder.indication(parseChoiceElement("indication", jsonNode, CodeableConcept.class, Reference.class));
        ArrayNode patientCharacteristicsArray = getArrayNode(jsonNode, "patientCharacteristics");
        if (patientCharacteristicsArray != null) {
            for (int i = 0; i < patientCharacteristicsArray.size(); i++) {
                if (patientCharacteristicsArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + patientCharacteristicsArray.get(i).getNodeType() + " for element: patientCharacteristics");
                }
                builder.patientCharacteristics(parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics("patientCharacteristics", patientCharacteristicsArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.AdministrationGuidelines.Dosage parseMedicationKnowledgeAdministrationGuidelinesDosage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.AdministrationGuidelines.Dosage.class, jsonNode);
        }
        MedicationKnowledge.AdministrationGuidelines.Dosage.Builder builder = MedicationKnowledge.AdministrationGuidelines.Dosage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode dosageArray = getArrayNode(jsonNode, "dosage");
        if (dosageArray != null) {
            for (int i = 0; i < dosageArray.size(); i++) {
                if (dosageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dosageArray.get(i).getNodeType() + " for element: dosage");
                }
                builder.dosage(parseDosage("dosage", dosageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.class, jsonNode);
        }
        MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.Builder builder = MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.characteristic(parseChoiceElement("characteristic", jsonNode, CodeableConcept.class, SimpleQuantity.class));
        ArrayNode valueArray = getArrayNode(jsonNode, "value", true);
        if (valueArray != null) {
            ArrayNode _valueArray = getArrayNode(jsonNode, "_value");
            for (int i = 0; i < valueArray.size(); i++) {
                builder.value(parseString("value", valueArray.get(i), getJsonNode(_valueArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Cost parseMedicationKnowledgeCost(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Cost.class, jsonNode);
        }
        MedicationKnowledge.Cost.Builder builder = MedicationKnowledge.Cost.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.source(parseString("source", getJsonNode(jsonNode, "source", TextNode.class), jsonNode.get("_source"), -1));
        builder.cost(parseMoney("cost", getJsonNode(jsonNode, "cost", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.DrugCharacteristic parseMedicationKnowledgeDrugCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.DrugCharacteristic.class, jsonNode);
        }
        MedicationKnowledge.DrugCharacteristic.Builder builder = MedicationKnowledge.DrugCharacteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, String.class, SimpleQuantity.class, Base64Binary.class));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Ingredient parseMedicationKnowledgeIngredient(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Ingredient.class, jsonNode);
        }
        MedicationKnowledge.Ingredient.Builder builder = MedicationKnowledge.Ingredient.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.item(parseChoiceElement("item", jsonNode, CodeableConcept.class, Reference.class));
        builder.isActive(parseBoolean("isActive", getJsonNode(jsonNode, "isActive", JsonNode.class), jsonNode.get("_isActive"), -1));
        builder.strength(parseRatio("strength", getJsonNode(jsonNode, "strength", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Kinetics parseMedicationKnowledgeKinetics(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Kinetics.class, jsonNode);
        }
        MedicationKnowledge.Kinetics.Builder builder = MedicationKnowledge.Kinetics.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode areaUnderCurveArray = getArrayNode(jsonNode, "areaUnderCurve");
        if (areaUnderCurveArray != null) {
            for (int i = 0; i < areaUnderCurveArray.size(); i++) {
                if (areaUnderCurveArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + areaUnderCurveArray.get(i).getNodeType() + " for element: areaUnderCurve");
                }
                builder.areaUnderCurve((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "areaUnderCurve", areaUnderCurveArray.get(i), i));
            }
        }
        ArrayNode lethalDose50Array = getArrayNode(jsonNode, "lethalDose50");
        if (lethalDose50Array != null) {
            for (int i = 0; i < lethalDose50Array.size(); i++) {
                if (lethalDose50Array.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + lethalDose50Array.get(i).getNodeType() + " for element: lethalDose50");
                }
                builder.lethalDose50((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "lethalDose50", lethalDose50Array.get(i), i));
            }
        }
        builder.halfLifePeriod((Duration) parseQuantity(Duration.builder(), "halfLifePeriod", getJsonNode(jsonNode, "halfLifePeriod", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.MedicineClassification parseMedicationKnowledgeMedicineClassification(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.MedicineClassification.class, jsonNode);
        }
        MedicationKnowledge.MedicineClassification.Builder builder = MedicationKnowledge.MedicineClassification.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode classificationArray = getArrayNode(jsonNode, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                if (classificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classificationArray.get(i).getNodeType() + " for element: classification");
                }
                builder.classification(parseCodeableConcept("classification", classificationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.MonitoringProgram parseMedicationKnowledgeMonitoringProgram(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.MonitoringProgram.class, jsonNode);
        }
        MedicationKnowledge.MonitoringProgram.Builder builder = MedicationKnowledge.MonitoringProgram.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Monograph parseMedicationKnowledgeMonograph(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Monograph.class, jsonNode);
        }
        MedicationKnowledge.Monograph.Builder builder = MedicationKnowledge.Monograph.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.source(parseReference("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Packaging parseMedicationKnowledgePackaging(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Packaging.class, jsonNode);
        }
        MedicationKnowledge.Packaging.Builder builder = MedicationKnowledge.Packaging.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Regulatory parseMedicationKnowledgeRegulatory(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Regulatory.class, jsonNode);
        }
        MedicationKnowledge.Regulatory.Builder builder = MedicationKnowledge.Regulatory.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.regulatoryAuthority(parseReference("regulatoryAuthority", getJsonNode(jsonNode, "regulatoryAuthority", JsonNode.class), -1));
        ArrayNode substitutionArray = getArrayNode(jsonNode, "substitution");
        if (substitutionArray != null) {
            for (int i = 0; i < substitutionArray.size(); i++) {
                if (substitutionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + substitutionArray.get(i).getNodeType() + " for element: substitution");
                }
                builder.substitution(parseMedicationKnowledgeRegulatorySubstitution("substitution", substitutionArray.get(i), i));
            }
        }
        ArrayNode scheduleArray = getArrayNode(jsonNode, "schedule");
        if (scheduleArray != null) {
            for (int i = 0; i < scheduleArray.size(); i++) {
                if (scheduleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + scheduleArray.get(i).getNodeType() + " for element: schedule");
                }
                builder.schedule(parseMedicationKnowledgeRegulatorySchedule("schedule", scheduleArray.get(i), i));
            }
        }
        builder.maxDispense(parseMedicationKnowledgeRegulatoryMaxDispense("maxDispense", getJsonNode(jsonNode, "maxDispense", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Regulatory.MaxDispense parseMedicationKnowledgeRegulatoryMaxDispense(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Regulatory.MaxDispense.class, jsonNode);
        }
        MedicationKnowledge.Regulatory.MaxDispense.Builder builder = MedicationKnowledge.Regulatory.MaxDispense.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.period((Duration) parseQuantity(Duration.builder(), "period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Regulatory.Schedule parseMedicationKnowledgeRegulatorySchedule(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Regulatory.Schedule.class, jsonNode);
        }
        MedicationKnowledge.Regulatory.Schedule.Builder builder = MedicationKnowledge.Regulatory.Schedule.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.schedule(parseCodeableConcept("schedule", getJsonNode(jsonNode, "schedule", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Regulatory.Substitution parseMedicationKnowledgeRegulatorySubstitution(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.Regulatory.Substitution.class, jsonNode);
        }
        MedicationKnowledge.Regulatory.Substitution.Builder builder = MedicationKnowledge.Regulatory.Substitution.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.allowed(parseBoolean("allowed", getJsonNode(jsonNode, "allowed", JsonNode.class), jsonNode.get("_allowed"), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.RelatedMedicationKnowledge parseMedicationKnowledgeRelatedMedicationKnowledge(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationKnowledge.RelatedMedicationKnowledge.class, jsonNode);
        }
        MedicationKnowledge.RelatedMedicationKnowledge.Builder builder = MedicationKnowledge.RelatedMedicationKnowledge.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode referenceArray = getArrayNode(jsonNode, "reference");
        if (referenceArray != null) {
            for (int i = 0; i < referenceArray.size(); i++) {
                if (referenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referenceArray.get(i).getNodeType() + " for element: reference");
                }
                builder.reference(parseReference("reference", referenceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationRequest parseMedicationRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationRequest.class, jsonNode);
        }
        MedicationRequest.Builder builder = MedicationRequest.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((MedicationRequestStatus) parseString(MedicationRequestStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonNode(jsonNode, "statusReason", JsonNode.class), -1));
        builder.intent((MedicationRequestIntent) parseString(MedicationRequestIntent.builder(), "intent", getJsonNode(jsonNode, "intent", TextNode.class), jsonNode.get("_intent"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.priority((MedicationRequestPriority) parseString(MedicationRequestPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonNode(jsonNode, "doNotPerform", JsonNode.class), jsonNode.get("_doNotPerform"), -1));
        builder.reported(parseChoiceElement("reported", jsonNode, Boolean.class, Reference.class));
        builder.medication(parseChoiceElement("medication", jsonNode, CodeableConcept.class, Reference.class));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        ArrayNode supportingInformationArray = getArrayNode(jsonNode, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                if (supportingInformationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInformationArray.get(i).getNodeType() + " for element: supportingInformation");
                }
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.get(i), i));
            }
        }
        builder.authoredOn(parseDateTime("authoredOn", getJsonNode(jsonNode, "authoredOn", TextNode.class), jsonNode.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonNode(jsonNode, "requester", JsonNode.class), -1));
        builder.performer(parseReference("performer", getJsonNode(jsonNode, "performer", JsonNode.class), -1));
        builder.performerType(parseCodeableConcept("performerType", getJsonNode(jsonNode, "performerType", JsonNode.class), -1));
        builder.recorder(parseReference("recorder", getJsonNode(jsonNode, "recorder", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonNode(jsonNode, "groupIdentifier", JsonNode.class), -1));
        builder.courseOfTherapyType(parseCodeableConcept("courseOfTherapyType", getJsonNode(jsonNode, "courseOfTherapyType", JsonNode.class), -1));
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseReference("insurance", insuranceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode dosageInstructionArray = getArrayNode(jsonNode, "dosageInstruction");
        if (dosageInstructionArray != null) {
            for (int i = 0; i < dosageInstructionArray.size(); i++) {
                if (dosageInstructionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dosageInstructionArray.get(i).getNodeType() + " for element: dosageInstruction");
                }
                builder.dosageInstruction(parseDosage("dosageInstruction", dosageInstructionArray.get(i), i));
            }
        }
        builder.dispenseRequest(parseMedicationRequestDispenseRequest("dispenseRequest", getJsonNode(jsonNode, "dispenseRequest", JsonNode.class), -1));
        builder.substitution(parseMedicationRequestSubstitution("substitution", getJsonNode(jsonNode, "substitution", JsonNode.class), -1));
        builder.priorPrescription(parseReference("priorPrescription", getJsonNode(jsonNode, "priorPrescription", JsonNode.class), -1));
        ArrayNode detectedIssueArray = getArrayNode(jsonNode, "detectedIssue");
        if (detectedIssueArray != null) {
            for (int i = 0; i < detectedIssueArray.size(); i++) {
                if (detectedIssueArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detectedIssueArray.get(i).getNodeType() + " for element: detectedIssue");
                }
                builder.detectedIssue(parseReference("detectedIssue", detectedIssueArray.get(i), i));
            }
        }
        ArrayNode eventHistoryArray = getArrayNode(jsonNode, "eventHistory");
        if (eventHistoryArray != null) {
            for (int i = 0; i < eventHistoryArray.size(); i++) {
                if (eventHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + eventHistoryArray.get(i).getNodeType() + " for element: eventHistory");
                }
                builder.eventHistory(parseReference("eventHistory", eventHistoryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationRequest.DispenseRequest parseMedicationRequestDispenseRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationRequest.DispenseRequest.class, jsonNode);
        }
        MedicationRequest.DispenseRequest.Builder builder = MedicationRequest.DispenseRequest.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.initialFill(parseMedicationRequestDispenseRequestInitialFill("initialFill", getJsonNode(jsonNode, "initialFill", JsonNode.class), -1));
        builder.dispenseInterval((Duration) parseQuantity(Duration.builder(), "dispenseInterval", getJsonNode(jsonNode, "dispenseInterval", JsonNode.class), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", getJsonNode(jsonNode, "validityPeriod", JsonNode.class), -1));
        builder.numberOfRepeatsAllowed((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfRepeatsAllowed", getJsonNode(jsonNode, "numberOfRepeatsAllowed", NumericNode.class), jsonNode.get("_numberOfRepeatsAllowed"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.expectedSupplyDuration((Duration) parseQuantity(Duration.builder(), "expectedSupplyDuration", getJsonNode(jsonNode, "expectedSupplyDuration", JsonNode.class), -1));
        builder.performer(parseReference("performer", getJsonNode(jsonNode, "performer", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationRequest.DispenseRequest.InitialFill parseMedicationRequestDispenseRequestInitialFill(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationRequest.DispenseRequest.InitialFill.class, jsonNode);
        }
        MedicationRequest.DispenseRequest.InitialFill.Builder builder = MedicationRequest.DispenseRequest.InitialFill.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.duration((Duration) parseQuantity(Duration.builder(), "duration", getJsonNode(jsonNode, "duration", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationRequest.Substitution parseMedicationRequestSubstitution(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationRequest.Substitution.class, jsonNode);
        }
        MedicationRequest.Substitution.Builder builder = MedicationRequest.Substitution.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.allowed(parseChoiceElement("allowed", jsonNode, Boolean.class, CodeableConcept.class));
        builder.reason(parseCodeableConcept("reason", getJsonNode(jsonNode, "reason", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationStatement parseMedicationStatement(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicationStatement.class, jsonNode);
        }
        MedicationStatement.Builder builder = MedicationStatement.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((MedicationStatementStatus) parseString(MedicationStatementStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode statusReasonArray = getArrayNode(jsonNode, "statusReason");
        if (statusReasonArray != null) {
            for (int i = 0; i < statusReasonArray.size(); i++) {
                if (statusReasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + statusReasonArray.get(i).getNodeType() + " for element: statusReason");
                }
                builder.statusReason(parseCodeableConcept("statusReason", statusReasonArray.get(i), i));
            }
        }
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.medication(parseChoiceElement("medication", jsonNode, CodeableConcept.class, Reference.class));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.context(parseReference("context", getJsonNode(jsonNode, "context", JsonNode.class), -1));
        builder.effective(parseChoiceElement("effective", jsonNode, DateTime.class, Period.class));
        builder.dateAsserted(parseDateTime("dateAsserted", getJsonNode(jsonNode, "dateAsserted", TextNode.class), jsonNode.get("_dateAsserted"), -1));
        builder.informationSource(parseReference("informationSource", getJsonNode(jsonNode, "informationSource", JsonNode.class), -1));
        ArrayNode derivedFromArray = getArrayNode(jsonNode, "derivedFrom");
        if (derivedFromArray != null) {
            for (int i = 0; i < derivedFromArray.size(); i++) {
                if (derivedFromArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + derivedFromArray.get(i).getNodeType() + " for element: derivedFrom");
                }
                builder.derivedFrom(parseReference("derivedFrom", derivedFromArray.get(i), i));
            }
        }
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode dosageArray = getArrayNode(jsonNode, "dosage");
        if (dosageArray != null) {
            for (int i = 0; i < dosageArray.size(); i++) {
                if (dosageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dosageArray.get(i).getNodeType() + " for element: dosage");
                }
                builder.dosage(parseDosage("dosage", dosageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductDefinition parseMedicinalProductDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicinalProductDefinition.class, jsonNode);
        }
        MedicinalProductDefinition.Builder builder = MedicinalProductDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.domain(parseCodeableConcept("domain", getJsonNode(jsonNode, "domain", JsonNode.class), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.statusDate(parseDateTime("statusDate", getJsonNode(jsonNode, "statusDate", TextNode.class), jsonNode.get("_statusDate"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.combinedPharmaceuticalDoseForm(parseCodeableConcept("combinedPharmaceuticalDoseForm", getJsonNode(jsonNode, "combinedPharmaceuticalDoseForm", JsonNode.class), -1));
        ArrayNode routeArray = getArrayNode(jsonNode, "route");
        if (routeArray != null) {
            for (int i = 0; i < routeArray.size(); i++) {
                if (routeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + routeArray.get(i).getNodeType() + " for element: route");
                }
                builder.route(parseCodeableConcept("route", routeArray.get(i), i));
            }
        }
        builder.indication((Markdown) parseString(Markdown.builder(), "indication", getJsonNode(jsonNode, "indication", TextNode.class), jsonNode.get("_indication"), -1));
        builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", getJsonNode(jsonNode, "legalStatusOfSupply", JsonNode.class), -1));
        builder.additionalMonitoringIndicator(parseCodeableConcept("additionalMonitoringIndicator", getJsonNode(jsonNode, "additionalMonitoringIndicator", JsonNode.class), -1));
        ArrayNode specialMeasuresArray = getArrayNode(jsonNode, "specialMeasures");
        if (specialMeasuresArray != null) {
            for (int i = 0; i < specialMeasuresArray.size(); i++) {
                if (specialMeasuresArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialMeasuresArray.get(i).getNodeType() + " for element: specialMeasures");
                }
                builder.specialMeasures(parseCodeableConcept("specialMeasures", specialMeasuresArray.get(i), i));
            }
        }
        builder.pediatricUseIndicator(parseCodeableConcept("pediatricUseIndicator", getJsonNode(jsonNode, "pediatricUseIndicator", JsonNode.class), -1));
        ArrayNode classificationArray = getArrayNode(jsonNode, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                if (classificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classificationArray.get(i).getNodeType() + " for element: classification");
                }
                builder.classification(parseCodeableConcept("classification", classificationArray.get(i), i));
            }
        }
        ArrayNode marketingStatusArray = getArrayNode(jsonNode, "marketingStatus");
        if (marketingStatusArray != null) {
            for (int i = 0; i < marketingStatusArray.size(); i++) {
                if (marketingStatusArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + marketingStatusArray.get(i).getNodeType() + " for element: marketingStatus");
                }
                builder.marketingStatus(parseMarketingStatus("marketingStatus", marketingStatusArray.get(i), i));
            }
        }
        ArrayNode packagedMedicinalProductArray = getArrayNode(jsonNode, "packagedMedicinalProduct");
        if (packagedMedicinalProductArray != null) {
            for (int i = 0; i < packagedMedicinalProductArray.size(); i++) {
                if (packagedMedicinalProductArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + packagedMedicinalProductArray.get(i).getNodeType() + " for element: packagedMedicinalProduct");
                }
                builder.packagedMedicinalProduct(parseCodeableConcept("packagedMedicinalProduct", packagedMedicinalProductArray.get(i), i));
            }
        }
        ArrayNode ingredientArray = getArrayNode(jsonNode, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                if (ingredientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ingredientArray.get(i).getNodeType() + " for element: ingredient");
                }
                builder.ingredient(parseCodeableConcept("ingredient", ingredientArray.get(i), i));
            }
        }
        ArrayNode impurityArray = getArrayNode(jsonNode, "impurity");
        if (impurityArray != null) {
            for (int i = 0; i < impurityArray.size(); i++) {
                if (impurityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + impurityArray.get(i).getNodeType() + " for element: impurity");
                }
                builder.impurity(parseCodeableReference("impurity", impurityArray.get(i), i));
            }
        }
        ArrayNode attachedDocumentArray = getArrayNode(jsonNode, "attachedDocument");
        if (attachedDocumentArray != null) {
            for (int i = 0; i < attachedDocumentArray.size(); i++) {
                if (attachedDocumentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + attachedDocumentArray.get(i).getNodeType() + " for element: attachedDocument");
                }
                builder.attachedDocument(parseReference("attachedDocument", attachedDocumentArray.get(i), i));
            }
        }
        ArrayNode masterFileArray = getArrayNode(jsonNode, "masterFile");
        if (masterFileArray != null) {
            for (int i = 0; i < masterFileArray.size(); i++) {
                if (masterFileArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + masterFileArray.get(i).getNodeType() + " for element: masterFile");
                }
                builder.masterFile(parseReference("masterFile", masterFileArray.get(i), i));
            }
        }
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseMedicinalProductDefinitionContact("contact", contactArray.get(i), i));
            }
        }
        ArrayNode clinicalTrialArray = getArrayNode(jsonNode, "clinicalTrial");
        if (clinicalTrialArray != null) {
            for (int i = 0; i < clinicalTrialArray.size(); i++) {
                if (clinicalTrialArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + clinicalTrialArray.get(i).getNodeType() + " for element: clinicalTrial");
                }
                builder.clinicalTrial(parseReference("clinicalTrial", clinicalTrialArray.get(i), i));
            }
        }
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCoding("code", codeArray.get(i), i));
            }
        }
        ArrayNode nameArray = getArrayNode(jsonNode, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                if (nameArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + nameArray.get(i).getNodeType() + " for element: name");
                }
                builder.name(parseMedicinalProductDefinitionName("name", nameArray.get(i), i));
            }
        }
        ArrayNode crossReferenceArray = getArrayNode(jsonNode, "crossReference");
        if (crossReferenceArray != null) {
            for (int i = 0; i < crossReferenceArray.size(); i++) {
                if (crossReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + crossReferenceArray.get(i).getNodeType() + " for element: crossReference");
                }
                builder.crossReference(parseMedicinalProductDefinitionCrossReference("crossReference", crossReferenceArray.get(i), i));
            }
        }
        ArrayNode operationArray = getArrayNode(jsonNode, "operation");
        if (operationArray != null) {
            for (int i = 0; i < operationArray.size(); i++) {
                if (operationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + operationArray.get(i).getNodeType() + " for element: operation");
                }
                builder.operation(parseMedicinalProductDefinitionOperation("operation", operationArray.get(i), i));
            }
        }
        ArrayNode characteristicArray = getArrayNode(jsonNode, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                if (characteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + characteristicArray.get(i).getNodeType() + " for element: characteristic");
                }
                builder.characteristic(parseMedicinalProductDefinitionCharacteristic("characteristic", characteristicArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductDefinition.Characteristic parseMedicinalProductDefinitionCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicinalProductDefinition.Characteristic.class, jsonNode);
        }
        MedicinalProductDefinition.Characteristic.Builder builder = MedicinalProductDefinition.Characteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Date.class, Boolean.class, Attachment.class));
        stackPop();
        return builder.build();
    }

    private MedicinalProductDefinition.Contact parseMedicinalProductDefinitionContact(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicinalProductDefinition.Contact.class, jsonNode);
        }
        MedicinalProductDefinition.Contact.Builder builder = MedicinalProductDefinition.Contact.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.contact(parseReference("contact", getJsonNode(jsonNode, "contact", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductDefinition.CrossReference parseMedicinalProductDefinitionCrossReference(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicinalProductDefinition.CrossReference.class, jsonNode);
        }
        MedicinalProductDefinition.CrossReference.Builder builder = MedicinalProductDefinition.CrossReference.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.product(parseCodeableReference("product", getJsonNode(jsonNode, "product", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductDefinition.Name parseMedicinalProductDefinitionName(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicinalProductDefinition.Name.class, jsonNode);
        }
        MedicinalProductDefinition.Name.Builder builder = MedicinalProductDefinition.Name.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.productName(parseString("productName", getJsonNode(jsonNode, "productName", TextNode.class), jsonNode.get("_productName"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode namePartArray = getArrayNode(jsonNode, "namePart");
        if (namePartArray != null) {
            for (int i = 0; i < namePartArray.size(); i++) {
                if (namePartArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + namePartArray.get(i).getNodeType() + " for element: namePart");
                }
                builder.namePart(parseMedicinalProductDefinitionNameNamePart("namePart", namePartArray.get(i), i));
            }
        }
        ArrayNode countryLanguageArray = getArrayNode(jsonNode, "countryLanguage");
        if (countryLanguageArray != null) {
            for (int i = 0; i < countryLanguageArray.size(); i++) {
                if (countryLanguageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + countryLanguageArray.get(i).getNodeType() + " for element: countryLanguage");
                }
                builder.countryLanguage(parseMedicinalProductDefinitionNameCountryLanguage("countryLanguage", countryLanguageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductDefinition.Name.CountryLanguage parseMedicinalProductDefinitionNameCountryLanguage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicinalProductDefinition.Name.CountryLanguage.class, jsonNode);
        }
        MedicinalProductDefinition.Name.CountryLanguage.Builder builder = MedicinalProductDefinition.Name.CountryLanguage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.country(parseCodeableConcept("country", getJsonNode(jsonNode, "country", JsonNode.class), -1));
        builder.jurisdiction(parseCodeableConcept("jurisdiction", getJsonNode(jsonNode, "jurisdiction", JsonNode.class), -1));
        builder.language(parseCodeableConcept("language", getJsonNode(jsonNode, "language", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductDefinition.Name.NamePart parseMedicinalProductDefinitionNameNamePart(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicinalProductDefinition.Name.NamePart.class, jsonNode);
        }
        MedicinalProductDefinition.Name.NamePart.Builder builder = MedicinalProductDefinition.Name.NamePart.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.part(parseString("part", getJsonNode(jsonNode, "part", TextNode.class), jsonNode.get("_part"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductDefinition.Operation parseMedicinalProductDefinitionOperation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MedicinalProductDefinition.Operation.class, jsonNode);
        }
        MedicinalProductDefinition.Operation.Builder builder = MedicinalProductDefinition.Operation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableReference("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.effectiveDate(parsePeriod("effectiveDate", getJsonNode(jsonNode, "effectiveDate", JsonNode.class), -1));
        ArrayNode organizationArray = getArrayNode(jsonNode, "organization");
        if (organizationArray != null) {
            for (int i = 0; i < organizationArray.size(); i++) {
                if (organizationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + organizationArray.get(i).getNodeType() + " for element: organization");
                }
                builder.organization(parseReference("organization", organizationArray.get(i), i));
            }
        }
        builder.confidentialityIndicator(parseCodeableConcept("confidentialityIndicator", getJsonNode(jsonNode, "confidentialityIndicator", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MessageDefinition parseMessageDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MessageDefinition.class, jsonNode);
        }
        MessageDefinition.Builder builder = MessageDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        ArrayNode replacesArray = getArrayNode(jsonNode, "replaces", true);
        if (replacesArray != null) {
            ArrayNode _replacesArray = getArrayNode(jsonNode, "_replaces");
            for (int i = 0; i < replacesArray.size(); i++) {
                builder.replaces((Canonical) parseUri(Canonical.builder(), "replaces", replacesArray.get(i), getJsonNode(_replacesArray, i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.base((Canonical) parseUri(Canonical.builder(), "base", getJsonNode(jsonNode, "base", TextNode.class), jsonNode.get("_base"), -1));
        ArrayNode parentArray = getArrayNode(jsonNode, "parent", true);
        if (parentArray != null) {
            ArrayNode _parentArray = getArrayNode(jsonNode, "_parent");
            for (int i = 0; i < parentArray.size(); i++) {
                builder.parent((Canonical) parseUri(Canonical.builder(), "parent", parentArray.get(i), getJsonNode(_parentArray, i), i));
            }
        }
        builder.event(parseChoiceElement("event", jsonNode, Coding.class, Uri.class));
        builder.category((MessageSignificanceCategory) parseString(MessageSignificanceCategory.builder(), "category", getJsonNode(jsonNode, "category", TextNode.class), jsonNode.get("_category"), -1));
        ArrayNode focusArray = getArrayNode(jsonNode, "focus");
        if (focusArray != null) {
            for (int i = 0; i < focusArray.size(); i++) {
                if (focusArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + focusArray.get(i).getNodeType() + " for element: focus");
                }
                builder.focus(parseMessageDefinitionFocus("focus", focusArray.get(i), i));
            }
        }
        builder.responseRequired((MessageHeaderResponseRequest) parseString(MessageHeaderResponseRequest.builder(), "responseRequired", getJsonNode(jsonNode, "responseRequired", TextNode.class), jsonNode.get("_responseRequired"), -1));
        ArrayNode allowedResponseArray = getArrayNode(jsonNode, "allowedResponse");
        if (allowedResponseArray != null) {
            for (int i = 0; i < allowedResponseArray.size(); i++) {
                if (allowedResponseArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + allowedResponseArray.get(i).getNodeType() + " for element: allowedResponse");
                }
                builder.allowedResponse(parseMessageDefinitionAllowedResponse("allowedResponse", allowedResponseArray.get(i), i));
            }
        }
        ArrayNode graphArray = getArrayNode(jsonNode, "graph", true);
        if (graphArray != null) {
            ArrayNode _graphArray = getArrayNode(jsonNode, "_graph");
            for (int i = 0; i < graphArray.size(); i++) {
                builder.graph((Canonical) parseUri(Canonical.builder(), "graph", graphArray.get(i), getJsonNode(_graphArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MessageDefinition.AllowedResponse parseMessageDefinitionAllowedResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MessageDefinition.AllowedResponse.class, jsonNode);
        }
        MessageDefinition.AllowedResponse.Builder builder = MessageDefinition.AllowedResponse.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.message((Canonical) parseUri(Canonical.builder(), "message", getJsonNode(jsonNode, "message", TextNode.class), jsonNode.get("_message"), -1));
        builder.situation((Markdown) parseString(Markdown.builder(), "situation", getJsonNode(jsonNode, "situation", TextNode.class), jsonNode.get("_situation"), -1));
        stackPop();
        return builder.build();
    }

    private MessageDefinition.Focus parseMessageDefinitionFocus(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MessageDefinition.Focus.class, jsonNode);
        }
        MessageDefinition.Focus.Builder builder = MessageDefinition.Focus.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonNode(jsonNode, "profile", TextNode.class), jsonNode.get("_profile"), -1));
        builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", getJsonNode(jsonNode, "min", NumericNode.class), jsonNode.get("_min"), -1));
        builder.max(parseString("max", getJsonNode(jsonNode, "max", TextNode.class), jsonNode.get("_max"), -1));
        stackPop();
        return builder.build();
    }

    private MessageHeader parseMessageHeader(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MessageHeader.class, jsonNode);
        }
        MessageHeader.Builder builder = MessageHeader.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.event(parseChoiceElement("event", jsonNode, Coding.class, Uri.class));
        ArrayNode destinationArray = getArrayNode(jsonNode, "destination");
        if (destinationArray != null) {
            for (int i = 0; i < destinationArray.size(); i++) {
                if (destinationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + destinationArray.get(i).getNodeType() + " for element: destination");
                }
                builder.destination(parseMessageHeaderDestination("destination", destinationArray.get(i), i));
            }
        }
        builder.sender(parseReference("sender", getJsonNode(jsonNode, "sender", JsonNode.class), -1));
        builder.enterer(parseReference("enterer", getJsonNode(jsonNode, "enterer", JsonNode.class), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        builder.source(parseMessageHeaderSource("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        builder.responsible(parseReference("responsible", getJsonNode(jsonNode, "responsible", JsonNode.class), -1));
        builder.reason(parseCodeableConcept("reason", getJsonNode(jsonNode, "reason", JsonNode.class), -1));
        builder.response(parseMessageHeaderResponse("response", getJsonNode(jsonNode, "response", JsonNode.class), -1));
        ArrayNode focusArray = getArrayNode(jsonNode, "focus");
        if (focusArray != null) {
            for (int i = 0; i < focusArray.size(); i++) {
                if (focusArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + focusArray.get(i).getNodeType() + " for element: focus");
                }
                builder.focus(parseReference("focus", focusArray.get(i), i));
            }
        }
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        stackPop();
        return builder.build();
    }

    private MessageHeader.Destination parseMessageHeaderDestination(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MessageHeader.Destination.class, jsonNode);
        }
        MessageHeader.Destination.Builder builder = MessageHeader.Destination.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.target(parseReference("target", getJsonNode(jsonNode, "target", JsonNode.class), -1));
        builder.endpoint((Url) parseUri(Url.builder(), "endpoint", getJsonNode(jsonNode, "endpoint", TextNode.class), jsonNode.get("_endpoint"), -1));
        builder.receiver(parseReference("receiver", getJsonNode(jsonNode, "receiver", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MessageHeader.Response parseMessageHeaderResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MessageHeader.Response.class, jsonNode);
        }
        MessageHeader.Response.Builder builder = MessageHeader.Response.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identifier((Id) parseString(Id.builder(), "identifier", getJsonNode(jsonNode, "identifier", TextNode.class), jsonNode.get("_identifier"), -1));
        builder.code((ResponseType) parseString(ResponseType.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.details(parseReference("details", getJsonNode(jsonNode, "details", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MessageHeader.Source parseMessageHeaderSource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MessageHeader.Source.class, jsonNode);
        }
        MessageHeader.Source.Builder builder = MessageHeader.Source.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.software(parseString("software", getJsonNode(jsonNode, "software", TextNode.class), jsonNode.get("_software"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.contact(parseContactPoint("contact", getJsonNode(jsonNode, "contact", JsonNode.class), -1));
        builder.endpoint((Url) parseUri(Url.builder(), "endpoint", getJsonNode(jsonNode, "endpoint", TextNode.class), jsonNode.get("_endpoint"), -1));
        stackPop();
        return builder.build();
    }

    private Meta parseMeta(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Meta.class, jsonNode);
        }
        Meta.Builder builder = Meta.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.versionId((Id) parseString(Id.builder(), "versionId", getJsonNode(jsonNode, "versionId", TextNode.class), jsonNode.get("_versionId"), -1));
        builder.lastUpdated(parseInstant("lastUpdated", getJsonNode(jsonNode, "lastUpdated", TextNode.class), jsonNode.get("_lastUpdated"), -1));
        builder.source(parseUri("source", getJsonNode(jsonNode, "source", TextNode.class), jsonNode.get("_source"), -1));
        ArrayNode profileArray = getArrayNode(jsonNode, "profile", true);
        if (profileArray != null) {
            ArrayNode _profileArray = getArrayNode(jsonNode, "_profile");
            for (int i = 0; i < profileArray.size(); i++) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", profileArray.get(i), getJsonNode(_profileArray, i), i));
            }
        }
        ArrayNode securityArray = getArrayNode(jsonNode, "security");
        if (securityArray != null) {
            for (int i = 0; i < securityArray.size(); i++) {
                if (securityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + securityArray.get(i).getNodeType() + " for element: security");
                }
                builder.security(parseCoding("security", securityArray.get(i), i));
            }
        }
        ArrayNode tagArray = getArrayNode(jsonNode, "tag");
        if (tagArray != null) {
            for (int i = 0; i < tagArray.size(); i++) {
                if (tagArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + tagArray.get(i).getNodeType() + " for element: tag");
                }
                builder.tag(parseCoding("tag", tagArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MolecularSequence parseMolecularSequence(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.class, jsonNode);
        }
        MolecularSequence.Builder builder = MolecularSequence.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.type((SequenceType) parseString(SequenceType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.coordinateSystem(parseInteger("coordinateSystem", getJsonNode(jsonNode, "coordinateSystem", NumericNode.class), jsonNode.get("_coordinateSystem"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.specimen(parseReference("specimen", getJsonNode(jsonNode, "specimen", JsonNode.class), -1));
        builder.device(parseReference("device", getJsonNode(jsonNode, "device", JsonNode.class), -1));
        builder.performer(parseReference("performer", getJsonNode(jsonNode, "performer", JsonNode.class), -1));
        builder.quantity(parseQuantity("quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.referenceSeq(parseMolecularSequenceReferenceSeq("referenceSeq", getJsonNode(jsonNode, "referenceSeq", JsonNode.class), -1));
        ArrayNode variantArray = getArrayNode(jsonNode, "variant");
        if (variantArray != null) {
            for (int i = 0; i < variantArray.size(); i++) {
                if (variantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + variantArray.get(i).getNodeType() + " for element: variant");
                }
                builder.variant(parseMolecularSequenceVariant("variant", variantArray.get(i), i));
            }
        }
        builder.observedSeq(parseString("observedSeq", getJsonNode(jsonNode, "observedSeq", TextNode.class), jsonNode.get("_observedSeq"), -1));
        ArrayNode qualityArray = getArrayNode(jsonNode, "quality");
        if (qualityArray != null) {
            for (int i = 0; i < qualityArray.size(); i++) {
                if (qualityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + qualityArray.get(i).getNodeType() + " for element: quality");
                }
                builder.quality(parseMolecularSequenceQuality("quality", qualityArray.get(i), i));
            }
        }
        builder.readCoverage(parseInteger("readCoverage", getJsonNode(jsonNode, "readCoverage", NumericNode.class), jsonNode.get("_readCoverage"), -1));
        ArrayNode repositoryArray = getArrayNode(jsonNode, "repository");
        if (repositoryArray != null) {
            for (int i = 0; i < repositoryArray.size(); i++) {
                if (repositoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + repositoryArray.get(i).getNodeType() + " for element: repository");
                }
                builder.repository(parseMolecularSequenceRepository("repository", repositoryArray.get(i), i));
            }
        }
        ArrayNode pointerArray = getArrayNode(jsonNode, "pointer");
        if (pointerArray != null) {
            for (int i = 0; i < pointerArray.size(); i++) {
                if (pointerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + pointerArray.get(i).getNodeType() + " for element: pointer");
                }
                builder.pointer(parseReference("pointer", pointerArray.get(i), i));
            }
        }
        ArrayNode structureVariantArray = getArrayNode(jsonNode, "structureVariant");
        if (structureVariantArray != null) {
            for (int i = 0; i < structureVariantArray.size(); i++) {
                if (structureVariantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + structureVariantArray.get(i).getNodeType() + " for element: structureVariant");
                }
                builder.structureVariant(parseMolecularSequenceStructureVariant("structureVariant", structureVariantArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MolecularSequence.Quality parseMolecularSequenceQuality(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.Quality.class, jsonNode);
        }
        MolecularSequence.Quality.Builder builder = MolecularSequence.Quality.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((QualityType) parseString(QualityType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.standardSequence(parseCodeableConcept("standardSequence", getJsonNode(jsonNode, "standardSequence", JsonNode.class), -1));
        builder.start(parseInteger("start", getJsonNode(jsonNode, "start", NumericNode.class), jsonNode.get("_start"), -1));
        builder.end(parseInteger("end", getJsonNode(jsonNode, "end", NumericNode.class), jsonNode.get("_end"), -1));
        builder.score(parseQuantity("score", getJsonNode(jsonNode, "score", JsonNode.class), -1));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        builder.truthTP(parseDecimal("truthTP", getJsonNode(jsonNode, "truthTP", NumericNode.class), jsonNode.get("_truthTP"), -1));
        builder.queryTP(parseDecimal("queryTP", getJsonNode(jsonNode, "queryTP", NumericNode.class), jsonNode.get("_queryTP"), -1));
        builder.truthFN(parseDecimal("truthFN", getJsonNode(jsonNode, "truthFN", NumericNode.class), jsonNode.get("_truthFN"), -1));
        builder.queryFP(parseDecimal("queryFP", getJsonNode(jsonNode, "queryFP", NumericNode.class), jsonNode.get("_queryFP"), -1));
        builder.gtFP(parseDecimal("gtFP", getJsonNode(jsonNode, "gtFP", NumericNode.class), jsonNode.get("_gtFP"), -1));
        builder.precision(parseDecimal("precision", getJsonNode(jsonNode, "precision", NumericNode.class), jsonNode.get("_precision"), -1));
        builder.recall(parseDecimal("recall", getJsonNode(jsonNode, "recall", NumericNode.class), jsonNode.get("_recall"), -1));
        builder.fScore(parseDecimal("fScore", getJsonNode(jsonNode, "fScore", NumericNode.class), jsonNode.get("_fScore"), -1));
        builder.roc(parseMolecularSequenceQualityRoc("roc", getJsonNode(jsonNode, "roc", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.Quality.Roc parseMolecularSequenceQualityRoc(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.Quality.Roc.class, jsonNode);
        }
        MolecularSequence.Quality.Roc.Builder builder = MolecularSequence.Quality.Roc.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode scoreArray = getArrayNode(jsonNode, "score", true);
        if (scoreArray != null) {
            ArrayNode _scoreArray = getArrayNode(jsonNode, "_score");
            for (int i = 0; i < scoreArray.size(); i++) {
                builder.score(parseInteger("score", scoreArray.get(i), getJsonNode(_scoreArray, i), i));
            }
        }
        ArrayNode numTPArray = getArrayNode(jsonNode, "numTP", true);
        if (numTPArray != null) {
            ArrayNode _numTPArray = getArrayNode(jsonNode, "_numTP");
            for (int i = 0; i < numTPArray.size(); i++) {
                builder.numTP(parseInteger("numTP", numTPArray.get(i), getJsonNode(_numTPArray, i), i));
            }
        }
        ArrayNode numFPArray = getArrayNode(jsonNode, "numFP", true);
        if (numFPArray != null) {
            ArrayNode _numFPArray = getArrayNode(jsonNode, "_numFP");
            for (int i = 0; i < numFPArray.size(); i++) {
                builder.numFP(parseInteger("numFP", numFPArray.get(i), getJsonNode(_numFPArray, i), i));
            }
        }
        ArrayNode numFNArray = getArrayNode(jsonNode, "numFN", true);
        if (numFNArray != null) {
            ArrayNode _numFNArray = getArrayNode(jsonNode, "_numFN");
            for (int i = 0; i < numFNArray.size(); i++) {
                builder.numFN(parseInteger("numFN", numFNArray.get(i), getJsonNode(_numFNArray, i), i));
            }
        }
        ArrayNode precisionArray = getArrayNode(jsonNode, "precision", true);
        if (precisionArray != null) {
            ArrayNode _precisionArray = getArrayNode(jsonNode, "_precision");
            for (int i = 0; i < precisionArray.size(); i++) {
                builder.precision(parseDecimal("precision", precisionArray.get(i), getJsonNode(_precisionArray, i), i));
            }
        }
        ArrayNode sensitivityArray = getArrayNode(jsonNode, "sensitivity", true);
        if (sensitivityArray != null) {
            ArrayNode _sensitivityArray = getArrayNode(jsonNode, "_sensitivity");
            for (int i = 0; i < sensitivityArray.size(); i++) {
                builder.sensitivity(parseDecimal("sensitivity", sensitivityArray.get(i), getJsonNode(_sensitivityArray, i), i));
            }
        }
        ArrayNode fMeasureArray = getArrayNode(jsonNode, "fMeasure", true);
        if (fMeasureArray != null) {
            ArrayNode _fMeasureArray = getArrayNode(jsonNode, "_fMeasure");
            for (int i = 0; i < fMeasureArray.size(); i++) {
                builder.fMeasure(parseDecimal("fMeasure", fMeasureArray.get(i), getJsonNode(_fMeasureArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MolecularSequence.ReferenceSeq parseMolecularSequenceReferenceSeq(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.ReferenceSeq.class, jsonNode);
        }
        MolecularSequence.ReferenceSeq.Builder builder = MolecularSequence.ReferenceSeq.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.chromosome(parseCodeableConcept("chromosome", getJsonNode(jsonNode, "chromosome", JsonNode.class), -1));
        builder.genomeBuild(parseString("genomeBuild", getJsonNode(jsonNode, "genomeBuild", TextNode.class), jsonNode.get("_genomeBuild"), -1));
        builder.orientation((OrientationType) parseString(OrientationType.builder(), "orientation", getJsonNode(jsonNode, "orientation", TextNode.class), jsonNode.get("_orientation"), -1));
        builder.referenceSeqId(parseCodeableConcept("referenceSeqId", getJsonNode(jsonNode, "referenceSeqId", JsonNode.class), -1));
        builder.referenceSeqPointer(parseReference("referenceSeqPointer", getJsonNode(jsonNode, "referenceSeqPointer", JsonNode.class), -1));
        builder.referenceSeqString(parseString("referenceSeqString", getJsonNode(jsonNode, "referenceSeqString", TextNode.class), jsonNode.get("_referenceSeqString"), -1));
        builder.strand((StrandType) parseString(StrandType.builder(), "strand", getJsonNode(jsonNode, "strand", TextNode.class), jsonNode.get("_strand"), -1));
        builder.windowStart(parseInteger("windowStart", getJsonNode(jsonNode, "windowStart", NumericNode.class), jsonNode.get("_windowStart"), -1));
        builder.windowEnd(parseInteger("windowEnd", getJsonNode(jsonNode, "windowEnd", NumericNode.class), jsonNode.get("_windowEnd"), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.Repository parseMolecularSequenceRepository(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.Repository.class, jsonNode);
        }
        MolecularSequence.Repository.Builder builder = MolecularSequence.Repository.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((RepositoryType) parseString(RepositoryType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.datasetId(parseString("datasetId", getJsonNode(jsonNode, "datasetId", TextNode.class), jsonNode.get("_datasetId"), -1));
        builder.variantsetId(parseString("variantsetId", getJsonNode(jsonNode, "variantsetId", TextNode.class), jsonNode.get("_variantsetId"), -1));
        builder.readsetId(parseString("readsetId", getJsonNode(jsonNode, "readsetId", TextNode.class), jsonNode.get("_readsetId"), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.StructureVariant parseMolecularSequenceStructureVariant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.StructureVariant.class, jsonNode);
        }
        MolecularSequence.StructureVariant.Builder builder = MolecularSequence.StructureVariant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.variantType(parseCodeableConcept("variantType", getJsonNode(jsonNode, "variantType", JsonNode.class), -1));
        builder.exact(parseBoolean("exact", getJsonNode(jsonNode, "exact", JsonNode.class), jsonNode.get("_exact"), -1));
        builder.length(parseInteger("length", getJsonNode(jsonNode, "length", NumericNode.class), jsonNode.get("_length"), -1));
        builder.outer(parseMolecularSequenceStructureVariantOuter("outer", getJsonNode(jsonNode, "outer", JsonNode.class), -1));
        builder.inner(parseMolecularSequenceStructureVariantInner("inner", getJsonNode(jsonNode, "inner", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.StructureVariant.Inner parseMolecularSequenceStructureVariantInner(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.StructureVariant.Inner.class, jsonNode);
        }
        MolecularSequence.StructureVariant.Inner.Builder builder = MolecularSequence.StructureVariant.Inner.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.start(parseInteger("start", getJsonNode(jsonNode, "start", NumericNode.class), jsonNode.get("_start"), -1));
        builder.end(parseInteger("end", getJsonNode(jsonNode, "end", NumericNode.class), jsonNode.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.StructureVariant.Outer parseMolecularSequenceStructureVariantOuter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.StructureVariant.Outer.class, jsonNode);
        }
        MolecularSequence.StructureVariant.Outer.Builder builder = MolecularSequence.StructureVariant.Outer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.start(parseInteger("start", getJsonNode(jsonNode, "start", NumericNode.class), jsonNode.get("_start"), -1));
        builder.end(parseInteger("end", getJsonNode(jsonNode, "end", NumericNode.class), jsonNode.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.Variant parseMolecularSequenceVariant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(MolecularSequence.Variant.class, jsonNode);
        }
        MolecularSequence.Variant.Builder builder = MolecularSequence.Variant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.start(parseInteger("start", getJsonNode(jsonNode, "start", NumericNode.class), jsonNode.get("_start"), -1));
        builder.end(parseInteger("end", getJsonNode(jsonNode, "end", NumericNode.class), jsonNode.get("_end"), -1));
        builder.observedAllele(parseString("observedAllele", getJsonNode(jsonNode, "observedAllele", TextNode.class), jsonNode.get("_observedAllele"), -1));
        builder.referenceAllele(parseString("referenceAllele", getJsonNode(jsonNode, "referenceAllele", TextNode.class), jsonNode.get("_referenceAllele"), -1));
        builder.cigar(parseString("cigar", getJsonNode(jsonNode, "cigar", TextNode.class), jsonNode.get("_cigar"), -1));
        builder.variantPointer(parseReference("variantPointer", getJsonNode(jsonNode, "variantPointer", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Money parseMoney(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Money.class, jsonNode);
        }
        Money.Builder builder = Money.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.value(parseDecimal("value", getJsonNode(jsonNode, "value", NumericNode.class), jsonNode.get("_value"), -1));
        builder.currency((Code) parseString(Code.builder(), "currency", getJsonNode(jsonNode, "currency", TextNode.class), jsonNode.get("_currency"), -1));
        stackPop();
        return builder.build();
    }

    private NamingSystem parseNamingSystem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NamingSystem.class, jsonNode);
        }
        NamingSystem.Builder builder = NamingSystem.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.kind((NamingSystemType) parseString(NamingSystemType.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.responsible(parseString("responsible", getJsonNode(jsonNode, "responsible", TextNode.class), jsonNode.get("_responsible"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.usage(parseString("usage", getJsonNode(jsonNode, "usage", TextNode.class), jsonNode.get("_usage"), -1));
        ArrayNode uniqueIdArray = getArrayNode(jsonNode, "uniqueId");
        if (uniqueIdArray != null) {
            for (int i = 0; i < uniqueIdArray.size(); i++) {
                if (uniqueIdArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + uniqueIdArray.get(i).getNodeType() + " for element: uniqueId");
                }
                builder.uniqueId(parseNamingSystemUniqueId("uniqueId", uniqueIdArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private NamingSystem.UniqueId parseNamingSystemUniqueId(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NamingSystem.UniqueId.class, jsonNode);
        }
        NamingSystem.UniqueId.Builder builder = NamingSystem.UniqueId.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((NamingSystemIdentifierType) parseString(NamingSystemIdentifierType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        builder.preferred(parseBoolean("preferred", getJsonNode(jsonNode, "preferred", JsonNode.class), jsonNode.get("_preferred"), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Narrative parseNarrative(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Narrative.class, jsonNode);
        }
        Narrative.Builder builder = Narrative.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.status((NarrativeStatus) parseString(NarrativeStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.div(parseXhtml("div", getJsonNode(jsonNode, "div", TextNode.class), jsonNode.get("_div"), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder parseNutritionOrder(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionOrder.class, jsonNode);
        }
        NutritionOrder.Builder builder = NutritionOrder.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        ArrayNode instantiatesArray = getArrayNode(jsonNode, "instantiates", true);
        if (instantiatesArray != null) {
            ArrayNode _instantiatesArray = getArrayNode(jsonNode, "_instantiates");
            for (int i = 0; i < instantiatesArray.size(); i++) {
                builder.instantiates(parseUri("instantiates", instantiatesArray.get(i), getJsonNode(_instantiatesArray, i), i));
            }
        }
        builder.status((NutritionOrderStatus) parseString(NutritionOrderStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.intent((NutritionOrderIntent) parseString(NutritionOrderIntent.builder(), "intent", getJsonNode(jsonNode, "intent", TextNode.class), jsonNode.get("_intent"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.dateTime(parseDateTime("dateTime", getJsonNode(jsonNode, "dateTime", TextNode.class), jsonNode.get("_dateTime"), -1));
        builder.orderer(parseReference("orderer", getJsonNode(jsonNode, "orderer", JsonNode.class), -1));
        ArrayNode allergyIntoleranceArray = getArrayNode(jsonNode, "allergyIntolerance");
        if (allergyIntoleranceArray != null) {
            for (int i = 0; i < allergyIntoleranceArray.size(); i++) {
                if (allergyIntoleranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + allergyIntoleranceArray.get(i).getNodeType() + " for element: allergyIntolerance");
                }
                builder.allergyIntolerance(parseReference("allergyIntolerance", allergyIntoleranceArray.get(i), i));
            }
        }
        ArrayNode foodPreferenceModifierArray = getArrayNode(jsonNode, "foodPreferenceModifier");
        if (foodPreferenceModifierArray != null) {
            for (int i = 0; i < foodPreferenceModifierArray.size(); i++) {
                if (foodPreferenceModifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + foodPreferenceModifierArray.get(i).getNodeType() + " for element: foodPreferenceModifier");
                }
                builder.foodPreferenceModifier(parseCodeableConcept("foodPreferenceModifier", foodPreferenceModifierArray.get(i), i));
            }
        }
        ArrayNode excludeFoodModifierArray = getArrayNode(jsonNode, "excludeFoodModifier");
        if (excludeFoodModifierArray != null) {
            for (int i = 0; i < excludeFoodModifierArray.size(); i++) {
                if (excludeFoodModifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + excludeFoodModifierArray.get(i).getNodeType() + " for element: excludeFoodModifier");
                }
                builder.excludeFoodModifier(parseCodeableConcept("excludeFoodModifier", excludeFoodModifierArray.get(i), i));
            }
        }
        builder.oralDiet(parseNutritionOrderOralDiet("oralDiet", getJsonNode(jsonNode, "oralDiet", JsonNode.class), -1));
        ArrayNode supplementArray = getArrayNode(jsonNode, "supplement");
        if (supplementArray != null) {
            for (int i = 0; i < supplementArray.size(); i++) {
                if (supplementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supplementArray.get(i).getNodeType() + " for element: supplement");
                }
                builder.supplement(parseNutritionOrderSupplement("supplement", supplementArray.get(i), i));
            }
        }
        builder.enteralFormula(parseNutritionOrderEnteralFormula("enteralFormula", getJsonNode(jsonNode, "enteralFormula", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private NutritionOrder.EnteralFormula parseNutritionOrderEnteralFormula(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionOrder.EnteralFormula.class, jsonNode);
        }
        NutritionOrder.EnteralFormula.Builder builder = NutritionOrder.EnteralFormula.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.baseFormulaType(parseCodeableConcept("baseFormulaType", getJsonNode(jsonNode, "baseFormulaType", JsonNode.class), -1));
        builder.baseFormulaProductName(parseString("baseFormulaProductName", getJsonNode(jsonNode, "baseFormulaProductName", TextNode.class), jsonNode.get("_baseFormulaProductName"), -1));
        builder.additiveType(parseCodeableConcept("additiveType", getJsonNode(jsonNode, "additiveType", JsonNode.class), -1));
        builder.additiveProductName(parseString("additiveProductName", getJsonNode(jsonNode, "additiveProductName", TextNode.class), jsonNode.get("_additiveProductName"), -1));
        builder.caloricDensity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "caloricDensity", getJsonNode(jsonNode, "caloricDensity", JsonNode.class), -1));
        builder.routeofAdministration(parseCodeableConcept("routeofAdministration", getJsonNode(jsonNode, "routeofAdministration", JsonNode.class), -1));
        ArrayNode administrationArray = getArrayNode(jsonNode, "administration");
        if (administrationArray != null) {
            for (int i = 0; i < administrationArray.size(); i++) {
                if (administrationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + administrationArray.get(i).getNodeType() + " for element: administration");
                }
                builder.administration(parseNutritionOrderEnteralFormulaAdministration("administration", administrationArray.get(i), i));
            }
        }
        builder.maxVolumeToDeliver((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxVolumeToDeliver", getJsonNode(jsonNode, "maxVolumeToDeliver", JsonNode.class), -1));
        builder.administrationInstruction(parseString("administrationInstruction", getJsonNode(jsonNode, "administrationInstruction", TextNode.class), jsonNode.get("_administrationInstruction"), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.EnteralFormula.Administration parseNutritionOrderEnteralFormulaAdministration(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionOrder.EnteralFormula.Administration.class, jsonNode);
        }
        NutritionOrder.EnteralFormula.Administration.Builder builder = NutritionOrder.EnteralFormula.Administration.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.schedule(parseTiming("schedule", getJsonNode(jsonNode, "schedule", JsonNode.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.rate(parseChoiceElement("rate", jsonNode, SimpleQuantity.class, Ratio.class));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.OralDiet parseNutritionOrderOralDiet(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionOrder.OralDiet.class, jsonNode);
        }
        NutritionOrder.OralDiet.Builder builder = NutritionOrder.OralDiet.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        ArrayNode scheduleArray = getArrayNode(jsonNode, "schedule");
        if (scheduleArray != null) {
            for (int i = 0; i < scheduleArray.size(); i++) {
                if (scheduleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + scheduleArray.get(i).getNodeType() + " for element: schedule");
                }
                builder.schedule(parseTiming("schedule", scheduleArray.get(i), i));
            }
        }
        ArrayNode nutrientArray = getArrayNode(jsonNode, "nutrient");
        if (nutrientArray != null) {
            for (int i = 0; i < nutrientArray.size(); i++) {
                if (nutrientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + nutrientArray.get(i).getNodeType() + " for element: nutrient");
                }
                builder.nutrient(parseNutritionOrderOralDietNutrient("nutrient", nutrientArray.get(i), i));
            }
        }
        ArrayNode textureArray = getArrayNode(jsonNode, "texture");
        if (textureArray != null) {
            for (int i = 0; i < textureArray.size(); i++) {
                if (textureArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + textureArray.get(i).getNodeType() + " for element: texture");
                }
                builder.texture(parseNutritionOrderOralDietTexture("texture", textureArray.get(i), i));
            }
        }
        ArrayNode fluidConsistencyTypeArray = getArrayNode(jsonNode, "fluidConsistencyType");
        if (fluidConsistencyTypeArray != null) {
            for (int i = 0; i < fluidConsistencyTypeArray.size(); i++) {
                if (fluidConsistencyTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + fluidConsistencyTypeArray.get(i).getNodeType() + " for element: fluidConsistencyType");
                }
                builder.fluidConsistencyType(parseCodeableConcept("fluidConsistencyType", fluidConsistencyTypeArray.get(i), i));
            }
        }
        builder.instruction(parseString("instruction", getJsonNode(jsonNode, "instruction", TextNode.class), jsonNode.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.OralDiet.Nutrient parseNutritionOrderOralDietNutrient(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionOrder.OralDiet.Nutrient.class, jsonNode);
        }
        NutritionOrder.OralDiet.Nutrient.Builder builder = NutritionOrder.OralDiet.Nutrient.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.modifier(parseCodeableConcept("modifier", getJsonNode(jsonNode, "modifier", JsonNode.class), -1));
        builder.amount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.OralDiet.Texture parseNutritionOrderOralDietTexture(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionOrder.OralDiet.Texture.class, jsonNode);
        }
        NutritionOrder.OralDiet.Texture.Builder builder = NutritionOrder.OralDiet.Texture.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.modifier(parseCodeableConcept("modifier", getJsonNode(jsonNode, "modifier", JsonNode.class), -1));
        builder.foodType(parseCodeableConcept("foodType", getJsonNode(jsonNode, "foodType", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.Supplement parseNutritionOrderSupplement(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionOrder.Supplement.class, jsonNode);
        }
        NutritionOrder.Supplement.Builder builder = NutritionOrder.Supplement.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.productName(parseString("productName", getJsonNode(jsonNode, "productName", TextNode.class), jsonNode.get("_productName"), -1));
        ArrayNode scheduleArray = getArrayNode(jsonNode, "schedule");
        if (scheduleArray != null) {
            for (int i = 0; i < scheduleArray.size(); i++) {
                if (scheduleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + scheduleArray.get(i).getNodeType() + " for element: schedule");
                }
                builder.schedule(parseTiming("schedule", scheduleArray.get(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.instruction(parseString("instruction", getJsonNode(jsonNode, "instruction", TextNode.class), jsonNode.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    private NutritionProduct parseNutritionProduct(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionProduct.class, jsonNode);
        }
        NutritionProduct.Builder builder = NutritionProduct.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.status((NutritionProductStatus) parseString(NutritionProductStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode manufacturerArray = getArrayNode(jsonNode, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                if (manufacturerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + manufacturerArray.get(i).getNodeType() + " for element: manufacturer");
                }
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.get(i), i));
            }
        }
        ArrayNode nutrientArray = getArrayNode(jsonNode, "nutrient");
        if (nutrientArray != null) {
            for (int i = 0; i < nutrientArray.size(); i++) {
                if (nutrientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + nutrientArray.get(i).getNodeType() + " for element: nutrient");
                }
                builder.nutrient(parseNutritionProductNutrient("nutrient", nutrientArray.get(i), i));
            }
        }
        ArrayNode ingredientArray = getArrayNode(jsonNode, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                if (ingredientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ingredientArray.get(i).getNodeType() + " for element: ingredient");
                }
                builder.ingredient(parseNutritionProductIngredient("ingredient", ingredientArray.get(i), i));
            }
        }
        ArrayNode knownAllergenArray = getArrayNode(jsonNode, "knownAllergen");
        if (knownAllergenArray != null) {
            for (int i = 0; i < knownAllergenArray.size(); i++) {
                if (knownAllergenArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + knownAllergenArray.get(i).getNodeType() + " for element: knownAllergen");
                }
                builder.knownAllergen(parseCodeableReference("knownAllergen", knownAllergenArray.get(i), i));
            }
        }
        ArrayNode productCharacteristicArray = getArrayNode(jsonNode, "productCharacteristic");
        if (productCharacteristicArray != null) {
            for (int i = 0; i < productCharacteristicArray.size(); i++) {
                if (productCharacteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + productCharacteristicArray.get(i).getNodeType() + " for element: productCharacteristic");
                }
                builder.productCharacteristic(parseNutritionProductProductCharacteristic("productCharacteristic", productCharacteristicArray.get(i), i));
            }
        }
        builder.instance(parseNutritionProductInstance("instance", getJsonNode(jsonNode, "instance", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private NutritionProduct.Ingredient parseNutritionProductIngredient(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionProduct.Ingredient.class, jsonNode);
        }
        NutritionProduct.Ingredient.Builder builder = NutritionProduct.Ingredient.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.item(parseCodeableReference("item", getJsonNode(jsonNode, "item", JsonNode.class), -1));
        ArrayNode amountArray = getArrayNode(jsonNode, "amount");
        if (amountArray != null) {
            for (int i = 0; i < amountArray.size(); i++) {
                if (amountArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + amountArray.get(i).getNodeType() + " for element: amount");
                }
                builder.amount(parseRatio("amount", amountArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private NutritionProduct.Instance parseNutritionProductInstance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionProduct.Instance.class, jsonNode);
        }
        NutritionProduct.Instance.Builder builder = NutritionProduct.Instance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.lotNumber(parseString("lotNumber", getJsonNode(jsonNode, "lotNumber", TextNode.class), jsonNode.get("_lotNumber"), -1));
        builder.expiry(parseDateTime("expiry", getJsonNode(jsonNode, "expiry", TextNode.class), jsonNode.get("_expiry"), -1));
        builder.useBy(parseDateTime("useBy", getJsonNode(jsonNode, "useBy", TextNode.class), jsonNode.get("_useBy"), -1));
        stackPop();
        return builder.build();
    }

    private NutritionProduct.Nutrient parseNutritionProductNutrient(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionProduct.Nutrient.class, jsonNode);
        }
        NutritionProduct.Nutrient.Builder builder = NutritionProduct.Nutrient.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.item(parseCodeableReference("item", getJsonNode(jsonNode, "item", JsonNode.class), -1));
        ArrayNode amountArray = getArrayNode(jsonNode, "amount");
        if (amountArray != null) {
            for (int i = 0; i < amountArray.size(); i++) {
                if (amountArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + amountArray.get(i).getNodeType() + " for element: amount");
                }
                builder.amount(parseRatio("amount", amountArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private NutritionProduct.ProductCharacteristic parseNutritionProductProductCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(NutritionProduct.ProductCharacteristic.class, jsonNode);
        }
        NutritionProduct.ProductCharacteristic.Builder builder = NutritionProduct.ProductCharacteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, String.class, SimpleQuantity.class, Base64Binary.class, Attachment.class, Boolean.class));
        stackPop();
        return builder.build();
    }

    private Observation parseObservation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Observation.class, jsonNode);
        }
        Observation.Builder builder = Observation.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((ObservationStatus) parseString(ObservationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        ArrayNode focusArray = getArrayNode(jsonNode, "focus");
        if (focusArray != null) {
            for (int i = 0; i < focusArray.size(); i++) {
                if (focusArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + focusArray.get(i).getNodeType() + " for element: focus");
                }
                builder.focus(parseReference("focus", focusArray.get(i), i));
            }
        }
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.effective(parseChoiceElement("effective", jsonNode, DateTime.class, Period.class, Timing.class, Instant.class));
        builder.issued(parseInstant("issued", getJsonNode(jsonNode, "issued", TextNode.class), jsonNode.get("_issued"), -1));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseReference("performer", performerArray.get(i), i));
            }
        }
        builder.value(parseChoiceElement("value", jsonNode, Quantity.class, CodeableConcept.class, String.class, Boolean.class, Integer.class, Range.class, Ratio.class, SampledData.class, Time.class, DateTime.class, Period.class));
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", getJsonNode(jsonNode, "dataAbsentReason", JsonNode.class), -1));
        ArrayNode interpretationArray = getArrayNode(jsonNode, "interpretation");
        if (interpretationArray != null) {
            for (int i = 0; i < interpretationArray.size(); i++) {
                if (interpretationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + interpretationArray.get(i).getNodeType() + " for element: interpretation");
                }
                builder.interpretation(parseCodeableConcept("interpretation", interpretationArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        builder.specimen(parseReference("specimen", getJsonNode(jsonNode, "specimen", JsonNode.class), -1));
        builder.device(parseReference("device", getJsonNode(jsonNode, "device", JsonNode.class), -1));
        ArrayNode referenceRangeArray = getArrayNode(jsonNode, "referenceRange");
        if (referenceRangeArray != null) {
            for (int i = 0; i < referenceRangeArray.size(); i++) {
                if (referenceRangeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referenceRangeArray.get(i).getNodeType() + " for element: referenceRange");
                }
                builder.referenceRange(parseObservationReferenceRange("referenceRange", referenceRangeArray.get(i), i));
            }
        }
        ArrayNode hasMemberArray = getArrayNode(jsonNode, "hasMember");
        if (hasMemberArray != null) {
            for (int i = 0; i < hasMemberArray.size(); i++) {
                if (hasMemberArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + hasMemberArray.get(i).getNodeType() + " for element: hasMember");
                }
                builder.hasMember(parseReference("hasMember", hasMemberArray.get(i), i));
            }
        }
        ArrayNode derivedFromArray = getArrayNode(jsonNode, "derivedFrom");
        if (derivedFromArray != null) {
            for (int i = 0; i < derivedFromArray.size(); i++) {
                if (derivedFromArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + derivedFromArray.get(i).getNodeType() + " for element: derivedFrom");
                }
                builder.derivedFrom(parseReference("derivedFrom", derivedFromArray.get(i), i));
            }
        }
        ArrayNode componentArray = getArrayNode(jsonNode, "component");
        if (componentArray != null) {
            for (int i = 0; i < componentArray.size(); i++) {
                if (componentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + componentArray.get(i).getNodeType() + " for element: component");
                }
                builder.component(parseObservationComponent("component", componentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Observation.Component parseObservationComponent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Observation.Component.class, jsonNode);
        }
        Observation.Component.Builder builder = Observation.Component.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, Quantity.class, CodeableConcept.class, String.class, Boolean.class, Integer.class, Range.class, Ratio.class, SampledData.class, Time.class, DateTime.class, Period.class));
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", getJsonNode(jsonNode, "dataAbsentReason", JsonNode.class), -1));
        ArrayNode interpretationArray = getArrayNode(jsonNode, "interpretation");
        if (interpretationArray != null) {
            for (int i = 0; i < interpretationArray.size(); i++) {
                if (interpretationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + interpretationArray.get(i).getNodeType() + " for element: interpretation");
                }
                builder.interpretation(parseCodeableConcept("interpretation", interpretationArray.get(i), i));
            }
        }
        ArrayNode referenceRangeArray = getArrayNode(jsonNode, "referenceRange");
        if (referenceRangeArray != null) {
            for (int i = 0; i < referenceRangeArray.size(); i++) {
                if (referenceRangeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referenceRangeArray.get(i).getNodeType() + " for element: referenceRange");
                }
                builder.referenceRange(parseObservationReferenceRange("referenceRange", referenceRangeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Observation.ReferenceRange parseObservationReferenceRange(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Observation.ReferenceRange.class, jsonNode);
        }
        Observation.ReferenceRange.Builder builder = Observation.ReferenceRange.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.low((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "low", getJsonNode(jsonNode, "low", JsonNode.class), -1));
        builder.high((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "high", getJsonNode(jsonNode, "high", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode appliesToArray = getArrayNode(jsonNode, "appliesTo");
        if (appliesToArray != null) {
            for (int i = 0; i < appliesToArray.size(); i++) {
                if (appliesToArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + appliesToArray.get(i).getNodeType() + " for element: appliesTo");
                }
                builder.appliesTo(parseCodeableConcept("appliesTo", appliesToArray.get(i), i));
            }
        }
        builder.age(parseRange("age", getJsonNode(jsonNode, "age", JsonNode.class), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private ObservationDefinition parseObservationDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ObservationDefinition.class, jsonNode);
        }
        ObservationDefinition.Builder builder = ObservationDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode permittedDataTypeArray = getArrayNode(jsonNode, "permittedDataType", true);
        if (permittedDataTypeArray != null) {
            ArrayNode _permittedDataTypeArray = getArrayNode(jsonNode, "_permittedDataType");
            for (int i = 0; i < permittedDataTypeArray.size(); i++) {
                builder.permittedDataType((ObservationDataType) parseString(ObservationDataType.builder(), "permittedDataType", permittedDataTypeArray.get(i), getJsonNode(_permittedDataTypeArray, i), i));
            }
        }
        builder.multipleResultsAllowed(parseBoolean("multipleResultsAllowed", getJsonNode(jsonNode, "multipleResultsAllowed", JsonNode.class), jsonNode.get("_multipleResultsAllowed"), -1));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        builder.preferredReportName(parseString("preferredReportName", getJsonNode(jsonNode, "preferredReportName", TextNode.class), jsonNode.get("_preferredReportName"), -1));
        builder.quantitativeDetails(parseObservationDefinitionQuantitativeDetails("quantitativeDetails", getJsonNode(jsonNode, "quantitativeDetails", JsonNode.class), -1));
        ArrayNode qualifiedIntervalArray = getArrayNode(jsonNode, "qualifiedInterval");
        if (qualifiedIntervalArray != null) {
            for (int i = 0; i < qualifiedIntervalArray.size(); i++) {
                if (qualifiedIntervalArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + qualifiedIntervalArray.get(i).getNodeType() + " for element: qualifiedInterval");
                }
                builder.qualifiedInterval(parseObservationDefinitionQualifiedInterval("qualifiedInterval", qualifiedIntervalArray.get(i), i));
            }
        }
        builder.validCodedValueSet(parseReference("validCodedValueSet", getJsonNode(jsonNode, "validCodedValueSet", JsonNode.class), -1));
        builder.normalCodedValueSet(parseReference("normalCodedValueSet", getJsonNode(jsonNode, "normalCodedValueSet", JsonNode.class), -1));
        builder.abnormalCodedValueSet(parseReference("abnormalCodedValueSet", getJsonNode(jsonNode, "abnormalCodedValueSet", JsonNode.class), -1));
        builder.criticalCodedValueSet(parseReference("criticalCodedValueSet", getJsonNode(jsonNode, "criticalCodedValueSet", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ObservationDefinition.QualifiedInterval parseObservationDefinitionQualifiedInterval(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ObservationDefinition.QualifiedInterval.class, jsonNode);
        }
        ObservationDefinition.QualifiedInterval.Builder builder = ObservationDefinition.QualifiedInterval.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category((ObservationRangeCategory) parseString(ObservationRangeCategory.builder(), "category", getJsonNode(jsonNode, "category", TextNode.class), jsonNode.get("_category"), -1));
        builder.range(parseRange("range", getJsonNode(jsonNode, "range", JsonNode.class), -1));
        builder.context(parseCodeableConcept("context", getJsonNode(jsonNode, "context", JsonNode.class), -1));
        ArrayNode appliesToArray = getArrayNode(jsonNode, "appliesTo");
        if (appliesToArray != null) {
            for (int i = 0; i < appliesToArray.size(); i++) {
                if (appliesToArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + appliesToArray.get(i).getNodeType() + " for element: appliesTo");
                }
                builder.appliesTo(parseCodeableConcept("appliesTo", appliesToArray.get(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonNode(jsonNode, "gender", TextNode.class), jsonNode.get("_gender"), -1));
        builder.age(parseRange("age", getJsonNode(jsonNode, "age", JsonNode.class), -1));
        builder.gestationalAge(parseRange("gestationalAge", getJsonNode(jsonNode, "gestationalAge", JsonNode.class), -1));
        builder.condition(parseString("condition", getJsonNode(jsonNode, "condition", TextNode.class), jsonNode.get("_condition"), -1));
        stackPop();
        return builder.build();
    }

    private ObservationDefinition.QuantitativeDetails parseObservationDefinitionQuantitativeDetails(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ObservationDefinition.QuantitativeDetails.class, jsonNode);
        }
        ObservationDefinition.QuantitativeDetails.Builder builder = ObservationDefinition.QuantitativeDetails.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.customaryUnit(parseCodeableConcept("customaryUnit", getJsonNode(jsonNode, "customaryUnit", JsonNode.class), -1));
        builder.unit(parseCodeableConcept("unit", getJsonNode(jsonNode, "unit", JsonNode.class), -1));
        builder.conversionFactor(parseDecimal("conversionFactor", getJsonNode(jsonNode, "conversionFactor", NumericNode.class), jsonNode.get("_conversionFactor"), -1));
        builder.decimalPrecision(parseInteger("decimalPrecision", getJsonNode(jsonNode, "decimalPrecision", NumericNode.class), jsonNode.get("_decimalPrecision"), -1));
        stackPop();
        return builder.build();
    }

    private OperationDefinition parseOperationDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(OperationDefinition.class, jsonNode);
        }
        OperationDefinition.Builder builder = OperationDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.kind((OperationKind) parseString(OperationKind.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.affectsState(parseBoolean("affectsState", getJsonNode(jsonNode, "affectsState", JsonNode.class), jsonNode.get("_affectsState"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        builder.base((Canonical) parseUri(Canonical.builder(), "base", getJsonNode(jsonNode, "base", TextNode.class), jsonNode.get("_base"), -1));
        ArrayNode resourceArray = getArrayNode(jsonNode, "resource", true);
        if (resourceArray != null) {
            ArrayNode _resourceArray = getArrayNode(jsonNode, "_resource");
            for (int i = 0; i < resourceArray.size(); i++) {
                builder.resource((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "resource", resourceArray.get(i), getJsonNode(_resourceArray, i), i));
            }
        }
        builder.system(parseBoolean("system", getJsonNode(jsonNode, "system", JsonNode.class), jsonNode.get("_system"), -1));
        builder.type(parseBoolean("type", getJsonNode(jsonNode, "type", JsonNode.class), jsonNode.get("_type"), -1));
        builder.instance(parseBoolean("instance", getJsonNode(jsonNode, "instance", JsonNode.class), jsonNode.get("_instance"), -1));
        builder.inputProfile((Canonical) parseUri(Canonical.builder(), "inputProfile", getJsonNode(jsonNode, "inputProfile", TextNode.class), jsonNode.get("_inputProfile"), -1));
        builder.outputProfile((Canonical) parseUri(Canonical.builder(), "outputProfile", getJsonNode(jsonNode, "outputProfile", TextNode.class), jsonNode.get("_outputProfile"), -1));
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseOperationDefinitionParameter("parameter", parameterArray.get(i), i));
            }
        }
        ArrayNode overloadArray = getArrayNode(jsonNode, "overload");
        if (overloadArray != null) {
            for (int i = 0; i < overloadArray.size(); i++) {
                if (overloadArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + overloadArray.get(i).getNodeType() + " for element: overload");
                }
                builder.overload(parseOperationDefinitionOverload("overload", overloadArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private OperationDefinition.Overload parseOperationDefinitionOverload(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(OperationDefinition.Overload.class, jsonNode);
        }
        OperationDefinition.Overload.Builder builder = OperationDefinition.Overload.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode parameterNameArray = getArrayNode(jsonNode, "parameterName", true);
        if (parameterNameArray != null) {
            ArrayNode _parameterNameArray = getArrayNode(jsonNode, "_parameterName");
            for (int i = 0; i < parameterNameArray.size(); i++) {
                builder.parameterName(parseString("parameterName", parameterNameArray.get(i), getJsonNode(_parameterNameArray, i), i));
            }
        }
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private OperationDefinition.Parameter parseOperationDefinitionParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(OperationDefinition.Parameter.class, jsonNode);
        }
        OperationDefinition.Parameter.Builder builder = OperationDefinition.Parameter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name((Code) parseString(Code.builder(), "name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.use((OperationParameterUse) parseString(OperationParameterUse.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.min(parseInteger("min", getJsonNode(jsonNode, "min", NumericNode.class), jsonNode.get("_min"), -1));
        builder.max(parseString("max", getJsonNode(jsonNode, "max", TextNode.class), jsonNode.get("_max"), -1));
        builder.documentation(parseString("documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        ArrayNode targetProfileArray = getArrayNode(jsonNode, "targetProfile", true);
        if (targetProfileArray != null) {
            ArrayNode _targetProfileArray = getArrayNode(jsonNode, "_targetProfile");
            for (int i = 0; i < targetProfileArray.size(); i++) {
                builder.targetProfile((Canonical) parseUri(Canonical.builder(), "targetProfile", targetProfileArray.get(i), getJsonNode(_targetProfileArray, i), i));
            }
        }
        builder.searchType((SearchParamType) parseString(SearchParamType.builder(), "searchType", getJsonNode(jsonNode, "searchType", TextNode.class), jsonNode.get("_searchType"), -1));
        builder.binding(parseOperationDefinitionParameterBinding("binding", getJsonNode(jsonNode, "binding", JsonNode.class), -1));
        ArrayNode referencedFromArray = getArrayNode(jsonNode, "referencedFrom");
        if (referencedFromArray != null) {
            for (int i = 0; i < referencedFromArray.size(); i++) {
                if (referencedFromArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + referencedFromArray.get(i).getNodeType() + " for element: referencedFrom");
                }
                builder.referencedFrom(parseOperationDefinitionParameterReferencedFrom("referencedFrom", referencedFromArray.get(i), i));
            }
        }
        ArrayNode partArray = getArrayNode(jsonNode, "part");
        if (partArray != null) {
            for (int i = 0; i < partArray.size(); i++) {
                if (partArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partArray.get(i).getNodeType() + " for element: part");
                }
                builder.part(parseOperationDefinitionParameter("part", partArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private OperationDefinition.Parameter.Binding parseOperationDefinitionParameterBinding(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(OperationDefinition.Parameter.Binding.class, jsonNode);
        }
        OperationDefinition.Parameter.Binding.Builder builder = OperationDefinition.Parameter.Binding.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.strength((BindingStrength) parseString(BindingStrength.builder(), "strength", getJsonNode(jsonNode, "strength", TextNode.class), jsonNode.get("_strength"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", getJsonNode(jsonNode, "valueSet", TextNode.class), jsonNode.get("_valueSet"), -1));
        stackPop();
        return builder.build();
    }

    private OperationDefinition.Parameter.ReferencedFrom parseOperationDefinitionParameterReferencedFrom(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(OperationDefinition.Parameter.ReferencedFrom.class, jsonNode);
        }
        OperationDefinition.Parameter.ReferencedFrom.Builder builder = OperationDefinition.Parameter.ReferencedFrom.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.source(parseString("source", getJsonNode(jsonNode, "source", TextNode.class), jsonNode.get("_source"), -1));
        builder.sourceId(parseString("sourceId", getJsonNode(jsonNode, "sourceId", TextNode.class), jsonNode.get("_sourceId"), -1));
        stackPop();
        return builder.build();
    }

    private OperationOutcome parseOperationOutcome(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(OperationOutcome.class, jsonNode);
        }
        OperationOutcome.Builder builder = OperationOutcome.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode issueArray = getArrayNode(jsonNode, "issue");
        if (issueArray != null) {
            for (int i = 0; i < issueArray.size(); i++) {
                if (issueArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + issueArray.get(i).getNodeType() + " for element: issue");
                }
                builder.issue(parseOperationOutcomeIssue("issue", issueArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private OperationOutcome.Issue parseOperationOutcomeIssue(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(OperationOutcome.Issue.class, jsonNode);
        }
        OperationOutcome.Issue.Builder builder = OperationOutcome.Issue.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.severity((IssueSeverity) parseString(IssueSeverity.builder(), "severity", getJsonNode(jsonNode, "severity", TextNode.class), jsonNode.get("_severity"), -1));
        builder.code((IssueType) parseString(IssueType.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.details(parseCodeableConcept("details", getJsonNode(jsonNode, "details", JsonNode.class), -1));
        builder.diagnostics(parseString("diagnostics", getJsonNode(jsonNode, "diagnostics", TextNode.class), jsonNode.get("_diagnostics"), -1));
        ArrayNode locationArray = getArrayNode(jsonNode, "location", true);
        if (locationArray != null) {
            ArrayNode _locationArray = getArrayNode(jsonNode, "_location");
            for (int i = 0; i < locationArray.size(); i++) {
                builder.location(parseString("location", locationArray.get(i), getJsonNode(_locationArray, i), i));
            }
        }
        ArrayNode expressionArray = getArrayNode(jsonNode, "expression", true);
        if (expressionArray != null) {
            ArrayNode _expressionArray = getArrayNode(jsonNode, "_expression");
            for (int i = 0; i < expressionArray.size(); i++) {
                builder.expression(parseString("expression", expressionArray.get(i), getJsonNode(_expressionArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Organization parseOrganization(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Organization.class, jsonNode);
        }
        Organization.Builder builder = Organization.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        ArrayNode aliasArray = getArrayNode(jsonNode, "alias", true);
        if (aliasArray != null) {
            ArrayNode _aliasArray = getArrayNode(jsonNode, "_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonNode(_aliasArray, i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        ArrayNode addressArray = getArrayNode(jsonNode, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                if (addressArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressArray.get(i).getNodeType() + " for element: address");
                }
                builder.address(parseAddress("address", addressArray.get(i), i));
            }
        }
        builder.partOf(parseReference("partOf", getJsonNode(jsonNode, "partOf", JsonNode.class), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseOrganizationContact("contact", contactArray.get(i), i));
            }
        }
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseReference("endpoint", endpointArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Organization.Contact parseOrganizationContact(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Organization.Contact.class, jsonNode);
        }
        Organization.Contact.Builder builder = Organization.Contact.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.purpose(parseCodeableConcept("purpose", getJsonNode(jsonNode, "purpose", JsonNode.class), -1));
        builder.name(parseHumanName("name", getJsonNode(jsonNode, "name", JsonNode.class), -1));
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        builder.address(parseAddress("address", getJsonNode(jsonNode, "address", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private OrganizationAffiliation parseOrganizationAffiliation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(OrganizationAffiliation.class, jsonNode);
        }
        OrganizationAffiliation.Builder builder = OrganizationAffiliation.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.organization(parseReference("organization", getJsonNode(jsonNode, "organization", JsonNode.class), -1));
        builder.participatingOrganization(parseReference("participatingOrganization", getJsonNode(jsonNode, "participatingOrganization", JsonNode.class), -1));
        ArrayNode networkArray = getArrayNode(jsonNode, "network");
        if (networkArray != null) {
            for (int i = 0; i < networkArray.size(); i++) {
                if (networkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + networkArray.get(i).getNodeType() + " for element: network");
                }
                builder.network(parseReference("network", networkArray.get(i), i));
            }
        }
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        ArrayNode specialtyArray = getArrayNode(jsonNode, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                if (specialtyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialtyArray.get(i).getNodeType() + " for element: specialty");
                }
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.get(i), i));
            }
        }
        ArrayNode locationArray = getArrayNode(jsonNode, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                if (locationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + locationArray.get(i).getNodeType() + " for element: location");
                }
                builder.location(parseReference("location", locationArray.get(i), i));
            }
        }
        ArrayNode healthcareServiceArray = getArrayNode(jsonNode, "healthcareService");
        if (healthcareServiceArray != null) {
            for (int i = 0; i < healthcareServiceArray.size(); i++) {
                if (healthcareServiceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + healthcareServiceArray.get(i).getNodeType() + " for element: healthcareService");
                }
                builder.healthcareService(parseReference("healthcareService", healthcareServiceArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseReference("endpoint", endpointArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PackagedProductDefinition parsePackagedProductDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PackagedProductDefinition.class, jsonNode);
        }
        PackagedProductDefinition.Builder builder = PackagedProductDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode packageForArray = getArrayNode(jsonNode, "packageFor");
        if (packageForArray != null) {
            for (int i = 0; i < packageForArray.size(); i++) {
                if (packageForArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + packageForArray.get(i).getNodeType() + " for element: packageFor");
                }
                builder.packageFor(parseReference("packageFor", packageForArray.get(i), i));
            }
        }
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.statusDate(parseDateTime("statusDate", getJsonNode(jsonNode, "statusDate", TextNode.class), jsonNode.get("_statusDate"), -1));
        ArrayNode containedItemQuantityArray = getArrayNode(jsonNode, "containedItemQuantity");
        if (containedItemQuantityArray != null) {
            for (int i = 0; i < containedItemQuantityArray.size(); i++) {
                if (containedItemQuantityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + containedItemQuantityArray.get(i).getNodeType() + " for element: containedItemQuantity");
                }
                builder.containedItemQuantity(parseQuantity("containedItemQuantity", containedItemQuantityArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode legalStatusOfSupplyArray = getArrayNode(jsonNode, "legalStatusOfSupply");
        if (legalStatusOfSupplyArray != null) {
            for (int i = 0; i < legalStatusOfSupplyArray.size(); i++) {
                if (legalStatusOfSupplyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + legalStatusOfSupplyArray.get(i).getNodeType() + " for element: legalStatusOfSupply");
                }
                builder.legalStatusOfSupply(parsePackagedProductDefinitionLegalStatusOfSupply("legalStatusOfSupply", legalStatusOfSupplyArray.get(i), i));
            }
        }
        ArrayNode marketingStatusArray = getArrayNode(jsonNode, "marketingStatus");
        if (marketingStatusArray != null) {
            for (int i = 0; i < marketingStatusArray.size(); i++) {
                if (marketingStatusArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + marketingStatusArray.get(i).getNodeType() + " for element: marketingStatus");
                }
                builder.marketingStatus(parseMarketingStatus("marketingStatus", marketingStatusArray.get(i), i));
            }
        }
        ArrayNode characteristicArray = getArrayNode(jsonNode, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                if (characteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + characteristicArray.get(i).getNodeType() + " for element: characteristic");
                }
                builder.characteristic(parseCodeableConcept("characteristic", characteristicArray.get(i), i));
            }
        }
        builder.copackagedIndicator(parseBoolean("copackagedIndicator", getJsonNode(jsonNode, "copackagedIndicator", JsonNode.class), jsonNode.get("_copackagedIndicator"), -1));
        ArrayNode manufacturerArray = getArrayNode(jsonNode, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                if (manufacturerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + manufacturerArray.get(i).getNodeType() + " for element: manufacturer");
                }
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.get(i), i));
            }
        }
        builder._package(parsePackagedProductDefinitionPackage("package", getJsonNode(jsonNode, "package", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PackagedProductDefinition.LegalStatusOfSupply parsePackagedProductDefinitionLegalStatusOfSupply(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PackagedProductDefinition.LegalStatusOfSupply.class, jsonNode);
        }
        PackagedProductDefinition.LegalStatusOfSupply.Builder builder = PackagedProductDefinition.LegalStatusOfSupply.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.jurisdiction(parseCodeableConcept("jurisdiction", getJsonNode(jsonNode, "jurisdiction", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PackagedProductDefinition.Package parsePackagedProductDefinitionPackage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PackagedProductDefinition.Package.class, jsonNode);
        }
        PackagedProductDefinition.Package.Builder builder = PackagedProductDefinition.Package.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.quantity(parseInteger("quantity", getJsonNode(jsonNode, "quantity", NumericNode.class), jsonNode.get("_quantity"), -1));
        ArrayNode materialArray = getArrayNode(jsonNode, "material");
        if (materialArray != null) {
            for (int i = 0; i < materialArray.size(); i++) {
                if (materialArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + materialArray.get(i).getNodeType() + " for element: material");
                }
                builder.material(parseCodeableConcept("material", materialArray.get(i), i));
            }
        }
        ArrayNode alternateMaterialArray = getArrayNode(jsonNode, "alternateMaterial");
        if (alternateMaterialArray != null) {
            for (int i = 0; i < alternateMaterialArray.size(); i++) {
                if (alternateMaterialArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + alternateMaterialArray.get(i).getNodeType() + " for element: alternateMaterial");
                }
                builder.alternateMaterial(parseCodeableConcept("alternateMaterial", alternateMaterialArray.get(i), i));
            }
        }
        ArrayNode shelfLifeStorageArray = getArrayNode(jsonNode, "shelfLifeStorage");
        if (shelfLifeStorageArray != null) {
            for (int i = 0; i < shelfLifeStorageArray.size(); i++) {
                if (shelfLifeStorageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + shelfLifeStorageArray.get(i).getNodeType() + " for element: shelfLifeStorage");
                }
                builder.shelfLifeStorage(parsePackagedProductDefinitionPackageShelfLifeStorage("shelfLifeStorage", shelfLifeStorageArray.get(i), i));
            }
        }
        ArrayNode manufacturerArray = getArrayNode(jsonNode, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                if (manufacturerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + manufacturerArray.get(i).getNodeType() + " for element: manufacturer");
                }
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.get(i), i));
            }
        }
        ArrayNode propertyArray = getArrayNode(jsonNode, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                if (propertyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyArray.get(i).getNodeType() + " for element: property");
                }
                builder.property(parsePackagedProductDefinitionPackageProperty("property", propertyArray.get(i), i));
            }
        }
        ArrayNode containedItemArray = getArrayNode(jsonNode, "containedItem");
        if (containedItemArray != null) {
            for (int i = 0; i < containedItemArray.size(); i++) {
                if (containedItemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + containedItemArray.get(i).getNodeType() + " for element: containedItem");
                }
                builder.containedItem(parsePackagedProductDefinitionPackageContainedItem("containedItem", containedItemArray.get(i), i));
            }
        }
        ArrayNode packageArray = getArrayNode(jsonNode, "package");
        if (packageArray != null) {
            for (int i = 0; i < packageArray.size(); i++) {
                if (packageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + packageArray.get(i).getNodeType() + " for element: package");
                }
                builder._package(parsePackagedProductDefinitionPackage("package", packageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PackagedProductDefinition.Package.ContainedItem parsePackagedProductDefinitionPackageContainedItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PackagedProductDefinition.Package.ContainedItem.class, jsonNode);
        }
        PackagedProductDefinition.Package.ContainedItem.Builder builder = PackagedProductDefinition.Package.ContainedItem.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.item(parseCodeableReference("item", getJsonNode(jsonNode, "item", JsonNode.class), -1));
        builder.amount(parseQuantity("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PackagedProductDefinition.Package.Property parsePackagedProductDefinitionPackageProperty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PackagedProductDefinition.Package.Property.class, jsonNode);
        }
        PackagedProductDefinition.Package.Property.Builder builder = PackagedProductDefinition.Package.Property.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Date.class, Boolean.class, Attachment.class));
        stackPop();
        return builder.build();
    }

    private PackagedProductDefinition.Package.ShelfLifeStorage parsePackagedProductDefinitionPackageShelfLifeStorage(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PackagedProductDefinition.Package.ShelfLifeStorage.class, jsonNode);
        }
        PackagedProductDefinition.Package.ShelfLifeStorage.Builder builder = PackagedProductDefinition.Package.ShelfLifeStorage.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.period(parseChoiceElement("period", jsonNode, Duration.class, String.class));
        ArrayNode specialPrecautionsForStorageArray = getArrayNode(jsonNode, "specialPrecautionsForStorage");
        if (specialPrecautionsForStorageArray != null) {
            for (int i = 0; i < specialPrecautionsForStorageArray.size(); i++) {
                if (specialPrecautionsForStorageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialPrecautionsForStorageArray.get(i).getNodeType() + " for element: specialPrecautionsForStorage");
                }
                builder.specialPrecautionsForStorage(parseCodeableConcept("specialPrecautionsForStorage", specialPrecautionsForStorageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ParameterDefinition parseParameterDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ParameterDefinition.class, jsonNode);
        }
        ParameterDefinition.Builder builder = ParameterDefinition.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.name((Code) parseString(Code.builder(), "name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.use((ParameterUse) parseString(ParameterUse.builder(), "use", getJsonNode(jsonNode, "use", TextNode.class), jsonNode.get("_use"), -1));
        builder.min(parseInteger("min", getJsonNode(jsonNode, "min", NumericNode.class), jsonNode.get("_min"), -1));
        builder.max(parseString("max", getJsonNode(jsonNode, "max", TextNode.class), jsonNode.get("_max"), -1));
        builder.documentation(parseString("documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonNode(jsonNode, "profile", TextNode.class), jsonNode.get("_profile"), -1));
        stackPop();
        return builder.build();
    }

    private Parameters parseParameters(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Parameters.class, jsonNode);
        }
        Parameters.Builder builder = Parameters.builder();
        builder.setValidating(validating);
        parseResource(builder, jsonNode);
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseParametersParameter("parameter", parameterArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Parameters.Parameter parseParametersParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Parameters.Parameter.class, jsonNode);
        }
        Parameters.Parameter.Builder builder = Parameters.Parameter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.value(parseChoiceElement("value", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        builder.resource(parseResource("resource", getJsonNode(jsonNode, "resource", JsonNode.class), -1));
        ArrayNode partArray = getArrayNode(jsonNode, "part");
        if (partArray != null) {
            for (int i = 0; i < partArray.size(); i++) {
                if (partArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partArray.get(i).getNodeType() + " for element: part");
                }
                builder.part(parseParametersParameter("part", partArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Patient parsePatient(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Patient.class, jsonNode);
        }
        Patient.Builder builder = Patient.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        ArrayNode nameArray = getArrayNode(jsonNode, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                if (nameArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + nameArray.get(i).getNodeType() + " for element: name");
                }
                builder.name(parseHumanName("name", nameArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonNode(jsonNode, "gender", TextNode.class), jsonNode.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", getJsonNode(jsonNode, "birthDate", TextNode.class), jsonNode.get("_birthDate"), -1));
        builder.deceased(parseChoiceElement("deceased", jsonNode, Boolean.class, DateTime.class));
        ArrayNode addressArray = getArrayNode(jsonNode, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                if (addressArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressArray.get(i).getNodeType() + " for element: address");
                }
                builder.address(parseAddress("address", addressArray.get(i), i));
            }
        }
        builder.maritalStatus(parseCodeableConcept("maritalStatus", getJsonNode(jsonNode, "maritalStatus", JsonNode.class), -1));
        builder.multipleBirth(parseChoiceElement("multipleBirth", jsonNode, Boolean.class, Integer.class));
        ArrayNode photoArray = getArrayNode(jsonNode, "photo");
        if (photoArray != null) {
            for (int i = 0; i < photoArray.size(); i++) {
                if (photoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + photoArray.get(i).getNodeType() + " for element: photo");
                }
                builder.photo(parseAttachment("photo", photoArray.get(i), i));
            }
        }
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parsePatientContact("contact", contactArray.get(i), i));
            }
        }
        ArrayNode communicationArray = getArrayNode(jsonNode, "communication");
        if (communicationArray != null) {
            for (int i = 0; i < communicationArray.size(); i++) {
                if (communicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + communicationArray.get(i).getNodeType() + " for element: communication");
                }
                builder.communication(parsePatientCommunication("communication", communicationArray.get(i), i));
            }
        }
        ArrayNode generalPractitionerArray = getArrayNode(jsonNode, "generalPractitioner");
        if (generalPractitionerArray != null) {
            for (int i = 0; i < generalPractitionerArray.size(); i++) {
                if (generalPractitionerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + generalPractitionerArray.get(i).getNodeType() + " for element: generalPractitioner");
                }
                builder.generalPractitioner(parseReference("generalPractitioner", generalPractitionerArray.get(i), i));
            }
        }
        builder.managingOrganization(parseReference("managingOrganization", getJsonNode(jsonNode, "managingOrganization", JsonNode.class), -1));
        ArrayNode linkArray = getArrayNode(jsonNode, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                if (linkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + linkArray.get(i).getNodeType() + " for element: link");
                }
                builder.link(parsePatientLink("link", linkArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Patient.Communication parsePatientCommunication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Patient.Communication.class, jsonNode);
        }
        Patient.Communication.Builder builder = Patient.Communication.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.language(parseCodeableConcept("language", getJsonNode(jsonNode, "language", JsonNode.class), -1));
        builder.preferred(parseBoolean("preferred", getJsonNode(jsonNode, "preferred", JsonNode.class), jsonNode.get("_preferred"), -1));
        stackPop();
        return builder.build();
    }

    private Patient.Contact parsePatientContact(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Patient.Contact.class, jsonNode);
        }
        Patient.Contact.Builder builder = Patient.Contact.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode relationshipArray = getArrayNode(jsonNode, "relationship");
        if (relationshipArray != null) {
            for (int i = 0; i < relationshipArray.size(); i++) {
                if (relationshipArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relationshipArray.get(i).getNodeType() + " for element: relationship");
                }
                builder.relationship(parseCodeableConcept("relationship", relationshipArray.get(i), i));
            }
        }
        builder.name(parseHumanName("name", getJsonNode(jsonNode, "name", JsonNode.class), -1));
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        builder.address(parseAddress("address", getJsonNode(jsonNode, "address", JsonNode.class), -1));
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonNode(jsonNode, "gender", TextNode.class), jsonNode.get("_gender"), -1));
        builder.organization(parseReference("organization", getJsonNode(jsonNode, "organization", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Patient.Link parsePatientLink(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Patient.Link.class, jsonNode);
        }
        Patient.Link.Builder builder = Patient.Link.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.other(parseReference("other", getJsonNode(jsonNode, "other", JsonNode.class), -1));
        builder.type((LinkType) parseString(LinkType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private PaymentNotice parsePaymentNotice(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PaymentNotice.class, jsonNode);
        }
        PaymentNotice.Builder builder = PaymentNotice.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((PaymentNoticeStatus) parseString(PaymentNoticeStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.request(parseReference("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        builder.response(parseReference("response", getJsonNode(jsonNode, "response", JsonNode.class), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.provider(parseReference("provider", getJsonNode(jsonNode, "provider", JsonNode.class), -1));
        builder.payment(parseReference("payment", getJsonNode(jsonNode, "payment", JsonNode.class), -1));
        builder.paymentDate(parseDate("paymentDate", getJsonNode(jsonNode, "paymentDate", TextNode.class), jsonNode.get("_paymentDate"), -1));
        builder.payee(parseReference("payee", getJsonNode(jsonNode, "payee", JsonNode.class), -1));
        builder.recipient(parseReference("recipient", getJsonNode(jsonNode, "recipient", JsonNode.class), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        builder.paymentStatus(parseCodeableConcept("paymentStatus", getJsonNode(jsonNode, "paymentStatus", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PaymentReconciliation parsePaymentReconciliation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PaymentReconciliation.class, jsonNode);
        }
        PaymentReconciliation.Builder builder = PaymentReconciliation.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((PaymentReconciliationStatus) parseString(PaymentReconciliationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.paymentIssuer(parseReference("paymentIssuer", getJsonNode(jsonNode, "paymentIssuer", JsonNode.class), -1));
        builder.request(parseReference("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        builder.requestor(parseReference("requestor", getJsonNode(jsonNode, "requestor", JsonNode.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonNode(jsonNode, "outcome", TextNode.class), jsonNode.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonNode(jsonNode, "disposition", TextNode.class), jsonNode.get("_disposition"), -1));
        builder.paymentDate(parseDate("paymentDate", getJsonNode(jsonNode, "paymentDate", TextNode.class), jsonNode.get("_paymentDate"), -1));
        builder.paymentAmount(parseMoney("paymentAmount", getJsonNode(jsonNode, "paymentAmount", JsonNode.class), -1));
        builder.paymentIdentifier(parseIdentifier("paymentIdentifier", getJsonNode(jsonNode, "paymentIdentifier", JsonNode.class), -1));
        ArrayNode detailArray = getArrayNode(jsonNode, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                if (detailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + detailArray.get(i).getNodeType() + " for element: detail");
                }
                builder.detail(parsePaymentReconciliationDetail("detail", detailArray.get(i), i));
            }
        }
        builder.formCode(parseCodeableConcept("formCode", getJsonNode(jsonNode, "formCode", JsonNode.class), -1));
        ArrayNode processNoteArray = getArrayNode(jsonNode, "processNote");
        if (processNoteArray != null) {
            for (int i = 0; i < processNoteArray.size(); i++) {
                if (processNoteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + processNoteArray.get(i).getNodeType() + " for element: processNote");
                }
                builder.processNote(parsePaymentReconciliationProcessNote("processNote", processNoteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PaymentReconciliation.Detail parsePaymentReconciliationDetail(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PaymentReconciliation.Detail.class, jsonNode);
        }
        PaymentReconciliation.Detail.Builder builder = PaymentReconciliation.Detail.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.predecessor(parseIdentifier("predecessor", getJsonNode(jsonNode, "predecessor", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.request(parseReference("request", getJsonNode(jsonNode, "request", JsonNode.class), -1));
        builder.submitter(parseReference("submitter", getJsonNode(jsonNode, "submitter", JsonNode.class), -1));
        builder.response(parseReference("response", getJsonNode(jsonNode, "response", JsonNode.class), -1));
        builder.date(parseDate("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.responsible(parseReference("responsible", getJsonNode(jsonNode, "responsible", JsonNode.class), -1));
        builder.payee(parseReference("payee", getJsonNode(jsonNode, "payee", JsonNode.class), -1));
        builder.amount(parseMoney("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PaymentReconciliation.ProcessNote parsePaymentReconciliationProcessNote(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PaymentReconciliation.ProcessNote.class, jsonNode);
        }
        PaymentReconciliation.ProcessNote.Builder builder = PaymentReconciliation.ProcessNote.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((NoteType) parseString(NoteType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Period parsePeriod(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Period.class, jsonNode);
        }
        Period.Builder builder = Period.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.start(parseDateTime("start", getJsonNode(jsonNode, "start", TextNode.class), jsonNode.get("_start"), -1));
        builder.end(parseDateTime("end", getJsonNode(jsonNode, "end", TextNode.class), jsonNode.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    private Person parsePerson(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Person.class, jsonNode);
        }
        Person.Builder builder = Person.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode nameArray = getArrayNode(jsonNode, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                if (nameArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + nameArray.get(i).getNodeType() + " for element: name");
                }
                builder.name(parseHumanName("name", nameArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonNode(jsonNode, "gender", TextNode.class), jsonNode.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", getJsonNode(jsonNode, "birthDate", TextNode.class), jsonNode.get("_birthDate"), -1));
        ArrayNode addressArray = getArrayNode(jsonNode, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                if (addressArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressArray.get(i).getNodeType() + " for element: address");
                }
                builder.address(parseAddress("address", addressArray.get(i), i));
            }
        }
        builder.photo(parseAttachment("photo", getJsonNode(jsonNode, "photo", JsonNode.class), -1));
        builder.managingOrganization(parseReference("managingOrganization", getJsonNode(jsonNode, "managingOrganization", JsonNode.class), -1));
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        ArrayNode linkArray = getArrayNode(jsonNode, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                if (linkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + linkArray.get(i).getNodeType() + " for element: link");
                }
                builder.link(parsePersonLink("link", linkArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Person.Link parsePersonLink(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Person.Link.class, jsonNode);
        }
        Person.Link.Builder builder = Person.Link.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.target(parseReference("target", getJsonNode(jsonNode, "target", JsonNode.class), -1));
        builder.assurance((IdentityAssuranceLevel) parseString(IdentityAssuranceLevel.builder(), "assurance", getJsonNode(jsonNode, "assurance", TextNode.class), jsonNode.get("_assurance"), -1));
        stackPop();
        return builder.build();
    }

    private PlanDefinition parsePlanDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PlanDefinition.class, jsonNode);
        }
        PlanDefinition.Builder builder = PlanDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class, Canonical.class));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonNode(jsonNode, "usage", TextNode.class), jsonNode.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode topicArray = getArrayNode(jsonNode, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                if (topicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + topicArray.get(i).getNodeType() + " for element: topic");
                }
                builder.topic(parseCodeableConcept("topic", topicArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        ArrayNode libraryArray = getArrayNode(jsonNode, "library", true);
        if (libraryArray != null) {
            ArrayNode _libraryArray = getArrayNode(jsonNode, "_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonNode(_libraryArray, i), i));
            }
        }
        ArrayNode goalArray = getArrayNode(jsonNode, "goal");
        if (goalArray != null) {
            for (int i = 0; i < goalArray.size(); i++) {
                if (goalArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + goalArray.get(i).getNodeType() + " for element: goal");
                }
                builder.goal(parsePlanDefinitionGoal("goal", goalArray.get(i), i));
            }
        }
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parsePlanDefinitionAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action parsePlanDefinitionAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PlanDefinition.Action.class, jsonNode);
        }
        PlanDefinition.Action.Builder builder = PlanDefinition.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.prefix(parseString("prefix", getJsonNode(jsonNode, "prefix", TextNode.class), jsonNode.get("_prefix"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.textEquivalent(parseString("textEquivalent", getJsonNode(jsonNode, "textEquivalent", TextNode.class), jsonNode.get("_textEquivalent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        ArrayNode reasonArray = getArrayNode(jsonNode, "reason");
        if (reasonArray != null) {
            for (int i = 0; i < reasonArray.size(); i++) {
                if (reasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonArray.get(i).getNodeType() + " for element: reason");
                }
                builder.reason(parseCodeableConcept("reason", reasonArray.get(i), i));
            }
        }
        ArrayNode documentationArray = getArrayNode(jsonNode, "documentation");
        if (documentationArray != null) {
            for (int i = 0; i < documentationArray.size(); i++) {
                if (documentationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + documentationArray.get(i).getNodeType() + " for element: documentation");
                }
                builder.documentation(parseRelatedArtifact("documentation", documentationArray.get(i), i));
            }
        }
        ArrayNode goalIdArray = getArrayNode(jsonNode, "goalId", true);
        if (goalIdArray != null) {
            ArrayNode _goalIdArray = getArrayNode(jsonNode, "_goalId");
            for (int i = 0; i < goalIdArray.size(); i++) {
                builder.goalId((Id) parseString(Id.builder(), "goalId", goalIdArray.get(i), getJsonNode(_goalIdArray, i), i));
            }
        }
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class, Canonical.class));
        ArrayNode triggerArray = getArrayNode(jsonNode, "trigger");
        if (triggerArray != null) {
            for (int i = 0; i < triggerArray.size(); i++) {
                if (triggerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + triggerArray.get(i).getNodeType() + " for element: trigger");
                }
                builder.trigger(parseTriggerDefinition("trigger", triggerArray.get(i), i));
            }
        }
        ArrayNode conditionArray = getArrayNode(jsonNode, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                if (conditionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conditionArray.get(i).getNodeType() + " for element: condition");
                }
                builder.condition(parsePlanDefinitionActionCondition("condition", conditionArray.get(i), i));
            }
        }
        ArrayNode inputArray = getArrayNode(jsonNode, "input");
        if (inputArray != null) {
            for (int i = 0; i < inputArray.size(); i++) {
                if (inputArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + inputArray.get(i).getNodeType() + " for element: input");
                }
                builder.input(parseDataRequirement("input", inputArray.get(i), i));
            }
        }
        ArrayNode outputArray = getArrayNode(jsonNode, "output");
        if (outputArray != null) {
            for (int i = 0; i < outputArray.size(); i++) {
                if (outputArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + outputArray.get(i).getNodeType() + " for element: output");
                }
                builder.output(parseDataRequirement("output", outputArray.get(i), i));
            }
        }
        ArrayNode relatedActionArray = getArrayNode(jsonNode, "relatedAction");
        if (relatedActionArray != null) {
            for (int i = 0; i < relatedActionArray.size(); i++) {
                if (relatedActionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedActionArray.get(i).getNodeType() + " for element: relatedAction");
                }
                builder.relatedAction(parsePlanDefinitionActionRelatedAction("relatedAction", relatedActionArray.get(i), i));
            }
        }
        builder.timing(parseChoiceElement("timing", jsonNode, DateTime.class, Age.class, Period.class, Duration.class, Range.class, Timing.class));
        ArrayNode participantArray = getArrayNode(jsonNode, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                if (participantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantArray.get(i).getNodeType() + " for element: participant");
                }
                builder.participant(parsePlanDefinitionActionParticipant("participant", participantArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.groupingBehavior((ActionGroupingBehavior) parseString(ActionGroupingBehavior.builder(), "groupingBehavior", getJsonNode(jsonNode, "groupingBehavior", TextNode.class), jsonNode.get("_groupingBehavior"), -1));
        builder.selectionBehavior((ActionSelectionBehavior) parseString(ActionSelectionBehavior.builder(), "selectionBehavior", getJsonNode(jsonNode, "selectionBehavior", TextNode.class), jsonNode.get("_selectionBehavior"), -1));
        builder.requiredBehavior((ActionRequiredBehavior) parseString(ActionRequiredBehavior.builder(), "requiredBehavior", getJsonNode(jsonNode, "requiredBehavior", TextNode.class), jsonNode.get("_requiredBehavior"), -1));
        builder.precheckBehavior((ActionPrecheckBehavior) parseString(ActionPrecheckBehavior.builder(), "precheckBehavior", getJsonNode(jsonNode, "precheckBehavior", TextNode.class), jsonNode.get("_precheckBehavior"), -1));
        builder.cardinalityBehavior((ActionCardinalityBehavior) parseString(ActionCardinalityBehavior.builder(), "cardinalityBehavior", getJsonNode(jsonNode, "cardinalityBehavior", TextNode.class), jsonNode.get("_cardinalityBehavior"), -1));
        builder.definition(parseChoiceElement("definition", jsonNode, Canonical.class, Uri.class));
        builder.transform((Canonical) parseUri(Canonical.builder(), "transform", getJsonNode(jsonNode, "transform", TextNode.class), jsonNode.get("_transform"), -1));
        ArrayNode dynamicValueArray = getArrayNode(jsonNode, "dynamicValue");
        if (dynamicValueArray != null) {
            for (int i = 0; i < dynamicValueArray.size(); i++) {
                if (dynamicValueArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dynamicValueArray.get(i).getNodeType() + " for element: dynamicValue");
                }
                builder.dynamicValue(parsePlanDefinitionActionDynamicValue("dynamicValue", dynamicValueArray.get(i), i));
            }
        }
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parsePlanDefinitionAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action.Condition parsePlanDefinitionActionCondition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PlanDefinition.Action.Condition.class, jsonNode);
        }
        PlanDefinition.Action.Condition.Builder builder = PlanDefinition.Action.Condition.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.kind((ActionConditionKind) parseString(ActionConditionKind.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        builder.expression(parseExpression("expression", getJsonNode(jsonNode, "expression", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action.DynamicValue parsePlanDefinitionActionDynamicValue(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PlanDefinition.Action.DynamicValue.class, jsonNode);
        }
        PlanDefinition.Action.DynamicValue.Builder builder = PlanDefinition.Action.DynamicValue.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.expression(parseExpression("expression", getJsonNode(jsonNode, "expression", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action.Participant parsePlanDefinitionActionParticipant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PlanDefinition.Action.Participant.class, jsonNode);
        }
        PlanDefinition.Action.Participant.Builder builder = PlanDefinition.Action.Participant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((ActionParticipantType) parseString(ActionParticipantType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action.RelatedAction parsePlanDefinitionActionRelatedAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PlanDefinition.Action.RelatedAction.class, jsonNode);
        }
        PlanDefinition.Action.RelatedAction.Builder builder = PlanDefinition.Action.RelatedAction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.actionId((Id) parseString(Id.builder(), "actionId", getJsonNode(jsonNode, "actionId", TextNode.class), jsonNode.get("_actionId"), -1));
        builder.relationship((ActionRelationshipType) parseString(ActionRelationshipType.builder(), "relationship", getJsonNode(jsonNode, "relationship", TextNode.class), jsonNode.get("_relationship"), -1));
        builder.offset(parseChoiceElement("offset", jsonNode, Duration.class, Range.class));
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Goal parsePlanDefinitionGoal(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PlanDefinition.Goal.class, jsonNode);
        }
        PlanDefinition.Goal.Builder builder = PlanDefinition.Goal.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.description(parseCodeableConcept("description", getJsonNode(jsonNode, "description", JsonNode.class), -1));
        builder.priority(parseCodeableConcept("priority", getJsonNode(jsonNode, "priority", JsonNode.class), -1));
        builder.start(parseCodeableConcept("start", getJsonNode(jsonNode, "start", JsonNode.class), -1));
        ArrayNode addressesArray = getArrayNode(jsonNode, "addresses");
        if (addressesArray != null) {
            for (int i = 0; i < addressesArray.size(); i++) {
                if (addressesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressesArray.get(i).getNodeType() + " for element: addresses");
                }
                builder.addresses(parseCodeableConcept("addresses", addressesArray.get(i), i));
            }
        }
        ArrayNode documentationArray = getArrayNode(jsonNode, "documentation");
        if (documentationArray != null) {
            for (int i = 0; i < documentationArray.size(); i++) {
                if (documentationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + documentationArray.get(i).getNodeType() + " for element: documentation");
                }
                builder.documentation(parseRelatedArtifact("documentation", documentationArray.get(i), i));
            }
        }
        ArrayNode targetArray = getArrayNode(jsonNode, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                if (targetArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetArray.get(i).getNodeType() + " for element: target");
                }
                builder.target(parsePlanDefinitionGoalTarget("target", targetArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Goal.Target parsePlanDefinitionGoalTarget(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PlanDefinition.Goal.Target.class, jsonNode);
        }
        PlanDefinition.Goal.Target.Builder builder = PlanDefinition.Goal.Target.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.measure(parseCodeableConcept("measure", getJsonNode(jsonNode, "measure", JsonNode.class), -1));
        builder.detail(parseChoiceElement("detail", jsonNode, Quantity.class, Range.class, CodeableConcept.class));
        builder.due((Duration) parseQuantity(Duration.builder(), "due", getJsonNode(jsonNode, "due", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Population parsePopulation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Population.class, jsonNode);
        }
        Population.Builder builder = Population.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.age(parseChoiceElement("age", jsonNode, Range.class, CodeableConcept.class));
        builder.gender(parseCodeableConcept("gender", getJsonNode(jsonNode, "gender", JsonNode.class), -1));
        builder.race(parseCodeableConcept("race", getJsonNode(jsonNode, "race", JsonNode.class), -1));
        builder.physiologicalCondition(parseCodeableConcept("physiologicalCondition", getJsonNode(jsonNode, "physiologicalCondition", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Practitioner parsePractitioner(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Practitioner.class, jsonNode);
        }
        Practitioner.Builder builder = Practitioner.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        ArrayNode nameArray = getArrayNode(jsonNode, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                if (nameArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + nameArray.get(i).getNodeType() + " for element: name");
                }
                builder.name(parseHumanName("name", nameArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        ArrayNode addressArray = getArrayNode(jsonNode, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                if (addressArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressArray.get(i).getNodeType() + " for element: address");
                }
                builder.address(parseAddress("address", addressArray.get(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonNode(jsonNode, "gender", TextNode.class), jsonNode.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", getJsonNode(jsonNode, "birthDate", TextNode.class), jsonNode.get("_birthDate"), -1));
        ArrayNode photoArray = getArrayNode(jsonNode, "photo");
        if (photoArray != null) {
            for (int i = 0; i < photoArray.size(); i++) {
                if (photoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + photoArray.get(i).getNodeType() + " for element: photo");
                }
                builder.photo(parseAttachment("photo", photoArray.get(i), i));
            }
        }
        ArrayNode qualificationArray = getArrayNode(jsonNode, "qualification");
        if (qualificationArray != null) {
            for (int i = 0; i < qualificationArray.size(); i++) {
                if (qualificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + qualificationArray.get(i).getNodeType() + " for element: qualification");
                }
                builder.qualification(parsePractitionerQualification("qualification", qualificationArray.get(i), i));
            }
        }
        ArrayNode communicationArray = getArrayNode(jsonNode, "communication");
        if (communicationArray != null) {
            for (int i = 0; i < communicationArray.size(); i++) {
                if (communicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + communicationArray.get(i).getNodeType() + " for element: communication");
                }
                builder.communication(parseCodeableConcept("communication", communicationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Practitioner.Qualification parsePractitionerQualification(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Practitioner.Qualification.class, jsonNode);
        }
        Practitioner.Qualification.Builder builder = Practitioner.Qualification.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.issuer(parseReference("issuer", getJsonNode(jsonNode, "issuer", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private PractitionerRole parsePractitionerRole(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PractitionerRole.class, jsonNode);
        }
        PractitionerRole.Builder builder = PractitionerRole.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.practitioner(parseReference("practitioner", getJsonNode(jsonNode, "practitioner", JsonNode.class), -1));
        builder.organization(parseReference("organization", getJsonNode(jsonNode, "organization", JsonNode.class), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        ArrayNode specialtyArray = getArrayNode(jsonNode, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                if (specialtyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialtyArray.get(i).getNodeType() + " for element: specialty");
                }
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.get(i), i));
            }
        }
        ArrayNode locationArray = getArrayNode(jsonNode, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                if (locationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + locationArray.get(i).getNodeType() + " for element: location");
                }
                builder.location(parseReference("location", locationArray.get(i), i));
            }
        }
        ArrayNode healthcareServiceArray = getArrayNode(jsonNode, "healthcareService");
        if (healthcareServiceArray != null) {
            for (int i = 0; i < healthcareServiceArray.size(); i++) {
                if (healthcareServiceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + healthcareServiceArray.get(i).getNodeType() + " for element: healthcareService");
                }
                builder.healthcareService(parseReference("healthcareService", healthcareServiceArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        ArrayNode availableTimeArray = getArrayNode(jsonNode, "availableTime");
        if (availableTimeArray != null) {
            for (int i = 0; i < availableTimeArray.size(); i++) {
                if (availableTimeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + availableTimeArray.get(i).getNodeType() + " for element: availableTime");
                }
                builder.availableTime(parsePractitionerRoleAvailableTime("availableTime", availableTimeArray.get(i), i));
            }
        }
        ArrayNode notAvailableArray = getArrayNode(jsonNode, "notAvailable");
        if (notAvailableArray != null) {
            for (int i = 0; i < notAvailableArray.size(); i++) {
                if (notAvailableArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + notAvailableArray.get(i).getNodeType() + " for element: notAvailable");
                }
                builder.notAvailable(parsePractitionerRoleNotAvailable("notAvailable", notAvailableArray.get(i), i));
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", getJsonNode(jsonNode, "availabilityExceptions", TextNode.class), jsonNode.get("_availabilityExceptions"), -1));
        ArrayNode endpointArray = getArrayNode(jsonNode, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                if (endpointArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endpointArray.get(i).getNodeType() + " for element: endpoint");
                }
                builder.endpoint(parseReference("endpoint", endpointArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PractitionerRole.AvailableTime parsePractitionerRoleAvailableTime(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PractitionerRole.AvailableTime.class, jsonNode);
        }
        PractitionerRole.AvailableTime.Builder builder = PractitionerRole.AvailableTime.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode daysOfWeekArray = getArrayNode(jsonNode, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            ArrayNode _daysOfWeekArray = getArrayNode(jsonNode, "_daysOfWeek");
            for (int i = 0; i < daysOfWeekArray.size(); i++) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", daysOfWeekArray.get(i), getJsonNode(_daysOfWeekArray, i), i));
            }
        }
        builder.allDay(parseBoolean("allDay", getJsonNode(jsonNode, "allDay", JsonNode.class), jsonNode.get("_allDay"), -1));
        builder.availableStartTime(parseTime("availableStartTime", getJsonNode(jsonNode, "availableStartTime", TextNode.class), jsonNode.get("_availableStartTime"), -1));
        builder.availableEndTime(parseTime("availableEndTime", getJsonNode(jsonNode, "availableEndTime", TextNode.class), jsonNode.get("_availableEndTime"), -1));
        stackPop();
        return builder.build();
    }

    private PractitionerRole.NotAvailable parsePractitionerRoleNotAvailable(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(PractitionerRole.NotAvailable.class, jsonNode);
        }
        PractitionerRole.NotAvailable.Builder builder = PractitionerRole.NotAvailable.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.during(parsePeriod("during", getJsonNode(jsonNode, "during", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Procedure parseProcedure(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Procedure.class, jsonNode);
        }
        Procedure.Builder builder = Procedure.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((ProcedureStatus) parseString(ProcedureStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonNode(jsonNode, "statusReason", JsonNode.class), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.performed(parseChoiceElement("performed", jsonNode, DateTime.class, Period.class, String.class, Age.class, Range.class));
        builder.recorder(parseReference("recorder", getJsonNode(jsonNode, "recorder", JsonNode.class), -1));
        builder.asserter(parseReference("asserter", getJsonNode(jsonNode, "asserter", JsonNode.class), -1));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseProcedurePerformer("performer", performerArray.get(i), i));
            }
        }
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode bodySiteArray = getArrayNode(jsonNode, "bodySite");
        if (bodySiteArray != null) {
            for (int i = 0; i < bodySiteArray.size(); i++) {
                if (bodySiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + bodySiteArray.get(i).getNodeType() + " for element: bodySite");
                }
                builder.bodySite(parseCodeableConcept("bodySite", bodySiteArray.get(i), i));
            }
        }
        builder.outcome(parseCodeableConcept("outcome", getJsonNode(jsonNode, "outcome", JsonNode.class), -1));
        ArrayNode reportArray = getArrayNode(jsonNode, "report");
        if (reportArray != null) {
            for (int i = 0; i < reportArray.size(); i++) {
                if (reportArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reportArray.get(i).getNodeType() + " for element: report");
                }
                builder.report(parseReference("report", reportArray.get(i), i));
            }
        }
        ArrayNode complicationArray = getArrayNode(jsonNode, "complication");
        if (complicationArray != null) {
            for (int i = 0; i < complicationArray.size(); i++) {
                if (complicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + complicationArray.get(i).getNodeType() + " for element: complication");
                }
                builder.complication(parseCodeableConcept("complication", complicationArray.get(i), i));
            }
        }
        ArrayNode complicationDetailArray = getArrayNode(jsonNode, "complicationDetail");
        if (complicationDetailArray != null) {
            for (int i = 0; i < complicationDetailArray.size(); i++) {
                if (complicationDetailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + complicationDetailArray.get(i).getNodeType() + " for element: complicationDetail");
                }
                builder.complicationDetail(parseReference("complicationDetail", complicationDetailArray.get(i), i));
            }
        }
        ArrayNode followUpArray = getArrayNode(jsonNode, "followUp");
        if (followUpArray != null) {
            for (int i = 0; i < followUpArray.size(); i++) {
                if (followUpArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + followUpArray.get(i).getNodeType() + " for element: followUp");
                }
                builder.followUp(parseCodeableConcept("followUp", followUpArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode focalDeviceArray = getArrayNode(jsonNode, "focalDevice");
        if (focalDeviceArray != null) {
            for (int i = 0; i < focalDeviceArray.size(); i++) {
                if (focalDeviceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + focalDeviceArray.get(i).getNodeType() + " for element: focalDevice");
                }
                builder.focalDevice(parseProcedureFocalDevice("focalDevice", focalDeviceArray.get(i), i));
            }
        }
        ArrayNode usedReferenceArray = getArrayNode(jsonNode, "usedReference");
        if (usedReferenceArray != null) {
            for (int i = 0; i < usedReferenceArray.size(); i++) {
                if (usedReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + usedReferenceArray.get(i).getNodeType() + " for element: usedReference");
                }
                builder.usedReference(parseReference("usedReference", usedReferenceArray.get(i), i));
            }
        }
        ArrayNode usedCodeArray = getArrayNode(jsonNode, "usedCode");
        if (usedCodeArray != null) {
            for (int i = 0; i < usedCodeArray.size(); i++) {
                if (usedCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + usedCodeArray.get(i).getNodeType() + " for element: usedCode");
                }
                builder.usedCode(parseCodeableConcept("usedCode", usedCodeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Procedure.FocalDevice parseProcedureFocalDevice(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Procedure.FocalDevice.class, jsonNode);
        }
        Procedure.FocalDevice.Builder builder = Procedure.FocalDevice.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.action(parseCodeableConcept("action", getJsonNode(jsonNode, "action", JsonNode.class), -1));
        builder.manipulated(parseReference("manipulated", getJsonNode(jsonNode, "manipulated", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Procedure.Performer parseProcedurePerformer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Procedure.Performer.class, jsonNode);
        }
        Procedure.Performer.Builder builder = Procedure.Performer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.function(parseCodeableConcept("function", getJsonNode(jsonNode, "function", JsonNode.class), -1));
        builder.actor(parseReference("actor", getJsonNode(jsonNode, "actor", JsonNode.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonNode(jsonNode, "onBehalfOf", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ProdCharacteristic parseProdCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ProdCharacteristic.class, jsonNode);
        }
        ProdCharacteristic.Builder builder = ProdCharacteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.height(parseQuantity("height", getJsonNode(jsonNode, "height", JsonNode.class), -1));
        builder.width(parseQuantity("width", getJsonNode(jsonNode, "width", JsonNode.class), -1));
        builder.depth(parseQuantity("depth", getJsonNode(jsonNode, "depth", JsonNode.class), -1));
        builder.weight(parseQuantity("weight", getJsonNode(jsonNode, "weight", JsonNode.class), -1));
        builder.nominalVolume(parseQuantity("nominalVolume", getJsonNode(jsonNode, "nominalVolume", JsonNode.class), -1));
        builder.externalDiameter(parseQuantity("externalDiameter", getJsonNode(jsonNode, "externalDiameter", JsonNode.class), -1));
        builder.shape(parseString("shape", getJsonNode(jsonNode, "shape", TextNode.class), jsonNode.get("_shape"), -1));
        ArrayNode colorArray = getArrayNode(jsonNode, "color", true);
        if (colorArray != null) {
            ArrayNode _colorArray = getArrayNode(jsonNode, "_color");
            for (int i = 0; i < colorArray.size(); i++) {
                builder.color(parseString("color", colorArray.get(i), getJsonNode(_colorArray, i), i));
            }
        }
        ArrayNode imprintArray = getArrayNode(jsonNode, "imprint", true);
        if (imprintArray != null) {
            ArrayNode _imprintArray = getArrayNode(jsonNode, "_imprint");
            for (int i = 0; i < imprintArray.size(); i++) {
                builder.imprint(parseString("imprint", imprintArray.get(i), getJsonNode(_imprintArray, i), i));
            }
        }
        ArrayNode imageArray = getArrayNode(jsonNode, "image");
        if (imageArray != null) {
            for (int i = 0; i < imageArray.size(); i++) {
                if (imageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + imageArray.get(i).getNodeType() + " for element: image");
                }
                builder.image(parseAttachment("image", imageArray.get(i), i));
            }
        }
        builder.scoring(parseCodeableConcept("scoring", getJsonNode(jsonNode, "scoring", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ProductShelfLife parseProductShelfLife(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ProductShelfLife.class, jsonNode);
        }
        ProductShelfLife.Builder builder = ProductShelfLife.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.period(parseQuantity("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode specialPrecautionsForStorageArray = getArrayNode(jsonNode, "specialPrecautionsForStorage");
        if (specialPrecautionsForStorageArray != null) {
            for (int i = 0; i < specialPrecautionsForStorageArray.size(); i++) {
                if (specialPrecautionsForStorageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialPrecautionsForStorageArray.get(i).getNodeType() + " for element: specialPrecautionsForStorage");
                }
                builder.specialPrecautionsForStorage(parseCodeableConcept("specialPrecautionsForStorage", specialPrecautionsForStorageArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Provenance parseProvenance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Provenance.class, jsonNode);
        }
        Provenance.Builder builder = Provenance.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode targetArray = getArrayNode(jsonNode, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                if (targetArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetArray.get(i).getNodeType() + " for element: target");
                }
                builder.target(parseReference("target", targetArray.get(i), i));
            }
        }
        builder.occurred(parseChoiceElement("occurred", jsonNode, Period.class, DateTime.class));
        builder.recorded(parseInstant("recorded", getJsonNode(jsonNode, "recorded", TextNode.class), jsonNode.get("_recorded"), -1));
        ArrayNode policyArray = getArrayNode(jsonNode, "policy", true);
        if (policyArray != null) {
            ArrayNode _policyArray = getArrayNode(jsonNode, "_policy");
            for (int i = 0; i < policyArray.size(); i++) {
                builder.policy(parseUri("policy", policyArray.get(i), getJsonNode(_policyArray, i), i));
            }
        }
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        ArrayNode reasonArray = getArrayNode(jsonNode, "reason");
        if (reasonArray != null) {
            for (int i = 0; i < reasonArray.size(); i++) {
                if (reasonArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonArray.get(i).getNodeType() + " for element: reason");
                }
                builder.reason(parseCodeableConcept("reason", reasonArray.get(i), i));
            }
        }
        builder.activity(parseCodeableConcept("activity", getJsonNode(jsonNode, "activity", JsonNode.class), -1));
        ArrayNode agentArray = getArrayNode(jsonNode, "agent");
        if (agentArray != null) {
            for (int i = 0; i < agentArray.size(); i++) {
                if (agentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + agentArray.get(i).getNodeType() + " for element: agent");
                }
                builder.agent(parseProvenanceAgent("agent", agentArray.get(i), i));
            }
        }
        ArrayNode entityArray = getArrayNode(jsonNode, "entity");
        if (entityArray != null) {
            for (int i = 0; i < entityArray.size(); i++) {
                if (entityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + entityArray.get(i).getNodeType() + " for element: entity");
                }
                builder.entity(parseProvenanceEntity("entity", entityArray.get(i), i));
            }
        }
        ArrayNode signatureArray = getArrayNode(jsonNode, "signature");
        if (signatureArray != null) {
            for (int i = 0; i < signatureArray.size(); i++) {
                if (signatureArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + signatureArray.get(i).getNodeType() + " for element: signature");
                }
                builder.signature(parseSignature("signature", signatureArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Provenance.Agent parseProvenanceAgent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Provenance.Agent.class, jsonNode);
        }
        Provenance.Agent.Builder builder = Provenance.Agent.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        ArrayNode roleArray = getArrayNode(jsonNode, "role");
        if (roleArray != null) {
            for (int i = 0; i < roleArray.size(); i++) {
                if (roleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + roleArray.get(i).getNodeType() + " for element: role");
                }
                builder.role(parseCodeableConcept("role", roleArray.get(i), i));
            }
        }
        builder.who(parseReference("who", getJsonNode(jsonNode, "who", JsonNode.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonNode(jsonNode, "onBehalfOf", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Provenance.Entity parseProvenanceEntity(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Provenance.Entity.class, jsonNode);
        }
        Provenance.Entity.Builder builder = Provenance.Entity.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.role((ProvenanceEntityRole) parseString(ProvenanceEntityRole.builder(), "role", getJsonNode(jsonNode, "role", TextNode.class), jsonNode.get("_role"), -1));
        builder.what(parseReference("what", getJsonNode(jsonNode, "what", JsonNode.class), -1));
        ArrayNode agentArray = getArrayNode(jsonNode, "agent");
        if (agentArray != null) {
            for (int i = 0; i < agentArray.size(); i++) {
                if (agentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + agentArray.get(i).getNodeType() + " for element: agent");
                }
                builder.agent(parseProvenanceAgent("agent", agentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Quantity parseQuantity(Quantity.Builder builder, java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Quantity.class, jsonNode);
        }
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.value(parseDecimal("value", getJsonNode(jsonNode, "value", NumericNode.class), jsonNode.get("_value"), -1));
        builder.comparator((QuantityComparator) parseString(QuantityComparator.builder(), "comparator", getJsonNode(jsonNode, "comparator", TextNode.class), jsonNode.get("_comparator"), -1));
        builder.unit(parseString("unit", getJsonNode(jsonNode, "unit", TextNode.class), jsonNode.get("_unit"), -1));
        builder.system(parseUri("system", getJsonNode(jsonNode, "system", TextNode.class), jsonNode.get("_system"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        stackPop();
        return builder.build();
    }

    private Quantity parseQuantity(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        return parseQuantity(Quantity.builder(), elementName, jsonNode, elementIndex);
    }

    private Questionnaire parseQuestionnaire(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Questionnaire.class, jsonNode);
        }
        Questionnaire.Builder builder = Questionnaire.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        ArrayNode derivedFromArray = getArrayNode(jsonNode, "derivedFrom", true);
        if (derivedFromArray != null) {
            ArrayNode _derivedFromArray = getArrayNode(jsonNode, "_derivedFrom");
            for (int i = 0; i < derivedFromArray.size(); i++) {
                builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", derivedFromArray.get(i), getJsonNode(_derivedFromArray, i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        ArrayNode subjectTypeArray = getArrayNode(jsonNode, "subjectType", true);
        if (subjectTypeArray != null) {
            ArrayNode _subjectTypeArray = getArrayNode(jsonNode, "_subjectType");
            for (int i = 0; i < subjectTypeArray.size(); i++) {
                builder.subjectType((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "subjectType", subjectTypeArray.get(i), getJsonNode(_subjectTypeArray, i), i));
            }
        }
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCoding("code", codeArray.get(i), i));
            }
        }
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseQuestionnaireItem("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Questionnaire.Item parseQuestionnaireItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Questionnaire.Item.class, jsonNode);
        }
        Questionnaire.Item.Builder builder = Questionnaire.Item.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.linkId(parseString("linkId", getJsonNode(jsonNode, "linkId", TextNode.class), jsonNode.get("_linkId"), -1));
        builder.definition(parseUri("definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCoding("code", codeArray.get(i), i));
            }
        }
        builder.prefix(parseString("prefix", getJsonNode(jsonNode, "prefix", TextNode.class), jsonNode.get("_prefix"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        builder.type((QuestionnaireItemType) parseString(QuestionnaireItemType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        ArrayNode enableWhenArray = getArrayNode(jsonNode, "enableWhen");
        if (enableWhenArray != null) {
            for (int i = 0; i < enableWhenArray.size(); i++) {
                if (enableWhenArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + enableWhenArray.get(i).getNodeType() + " for element: enableWhen");
                }
                builder.enableWhen(parseQuestionnaireItemEnableWhen("enableWhen", enableWhenArray.get(i), i));
            }
        }
        builder.enableBehavior((EnableWhenBehavior) parseString(EnableWhenBehavior.builder(), "enableBehavior", getJsonNode(jsonNode, "enableBehavior", TextNode.class), jsonNode.get("_enableBehavior"), -1));
        builder.required(parseBoolean("required", getJsonNode(jsonNode, "required", JsonNode.class), jsonNode.get("_required"), -1));
        builder.repeats(parseBoolean("repeats", getJsonNode(jsonNode, "repeats", JsonNode.class), jsonNode.get("_repeats"), -1));
        builder.readOnly(parseBoolean("readOnly", getJsonNode(jsonNode, "readOnly", JsonNode.class), jsonNode.get("_readOnly"), -1));
        builder.maxLength(parseInteger("maxLength", getJsonNode(jsonNode, "maxLength", NumericNode.class), jsonNode.get("_maxLength"), -1));
        builder.answerValueSet((Canonical) parseUri(Canonical.builder(), "answerValueSet", getJsonNode(jsonNode, "answerValueSet", TextNode.class), jsonNode.get("_answerValueSet"), -1));
        ArrayNode answerOptionArray = getArrayNode(jsonNode, "answerOption");
        if (answerOptionArray != null) {
            for (int i = 0; i < answerOptionArray.size(); i++) {
                if (answerOptionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + answerOptionArray.get(i).getNodeType() + " for element: answerOption");
                }
                builder.answerOption(parseQuestionnaireItemAnswerOption("answerOption", answerOptionArray.get(i), i));
            }
        }
        ArrayNode initialArray = getArrayNode(jsonNode, "initial");
        if (initialArray != null) {
            for (int i = 0; i < initialArray.size(); i++) {
                if (initialArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + initialArray.get(i).getNodeType() + " for element: initial");
                }
                builder.initial(parseQuestionnaireItemInitial("initial", initialArray.get(i), i));
            }
        }
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseQuestionnaireItem("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Questionnaire.Item.AnswerOption parseQuestionnaireItemAnswerOption(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Questionnaire.Item.AnswerOption.class, jsonNode);
        }
        Questionnaire.Item.AnswerOption.Builder builder = Questionnaire.Item.AnswerOption.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.value(parseChoiceElement("value", jsonNode, Integer.class, Date.class, Time.class, String.class, Coding.class, Reference.class));
        builder.initialSelected(parseBoolean("initialSelected", getJsonNode(jsonNode, "initialSelected", JsonNode.class), jsonNode.get("_initialSelected"), -1));
        stackPop();
        return builder.build();
    }

    private Questionnaire.Item.EnableWhen parseQuestionnaireItemEnableWhen(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Questionnaire.Item.EnableWhen.class, jsonNode);
        }
        Questionnaire.Item.EnableWhen.Builder builder = Questionnaire.Item.EnableWhen.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.question(parseString("question", getJsonNode(jsonNode, "question", TextNode.class), jsonNode.get("_question"), -1));
        builder.operator((QuestionnaireItemOperator) parseString(QuestionnaireItemOperator.builder(), "operator", getJsonNode(jsonNode, "operator", TextNode.class), jsonNode.get("_operator"), -1));
        builder.answer(parseChoiceElement("answer", jsonNode, Boolean.class, Decimal.class, Integer.class, Date.class, DateTime.class, Time.class, String.class, Coding.class, Quantity.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Questionnaire.Item.Initial parseQuestionnaireItemInitial(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Questionnaire.Item.Initial.class, jsonNode);
        }
        Questionnaire.Item.Initial.Builder builder = Questionnaire.Item.Initial.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.value(parseChoiceElement("value", jsonNode, Boolean.class, Decimal.class, Integer.class, Date.class, DateTime.class, Time.class, String.class, Uri.class, Attachment.class, Coding.class, Quantity.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private QuestionnaireResponse parseQuestionnaireResponse(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(QuestionnaireResponse.class, jsonNode);
        }
        QuestionnaireResponse.Builder builder = QuestionnaireResponse.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.questionnaire((Canonical) parseUri(Canonical.builder(), "questionnaire", getJsonNode(jsonNode, "questionnaire", TextNode.class), jsonNode.get("_questionnaire"), -1));
        builder.status((QuestionnaireResponseStatus) parseString(QuestionnaireResponseStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.authored(parseDateTime("authored", getJsonNode(jsonNode, "authored", TextNode.class), jsonNode.get("_authored"), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        builder.source(parseReference("source", getJsonNode(jsonNode, "source", JsonNode.class), -1));
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseQuestionnaireResponseItem("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private QuestionnaireResponse.Item parseQuestionnaireResponseItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(QuestionnaireResponse.Item.class, jsonNode);
        }
        QuestionnaireResponse.Item.Builder builder = QuestionnaireResponse.Item.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.linkId(parseString("linkId", getJsonNode(jsonNode, "linkId", TextNode.class), jsonNode.get("_linkId"), -1));
        builder.definition(parseUri("definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        builder.text(parseString("text", getJsonNode(jsonNode, "text", TextNode.class), jsonNode.get("_text"), -1));
        ArrayNode answerArray = getArrayNode(jsonNode, "answer");
        if (answerArray != null) {
            for (int i = 0; i < answerArray.size(); i++) {
                if (answerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + answerArray.get(i).getNodeType() + " for element: answer");
                }
                builder.answer(parseQuestionnaireResponseItemAnswer("answer", answerArray.get(i), i));
            }
        }
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseQuestionnaireResponseItem("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private QuestionnaireResponse.Item.Answer parseQuestionnaireResponseItemAnswer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(QuestionnaireResponse.Item.Answer.class, jsonNode);
        }
        QuestionnaireResponse.Item.Answer.Builder builder = QuestionnaireResponse.Item.Answer.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.value(parseChoiceElement("value", jsonNode, Boolean.class, Decimal.class, Integer.class, Date.class, DateTime.class, Time.class, String.class, Uri.class, Attachment.class, Coding.class, Quantity.class, Reference.class));
        ArrayNode itemArray = getArrayNode(jsonNode, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                if (itemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + itemArray.get(i).getNodeType() + " for element: item");
                }
                builder.item(parseQuestionnaireResponseItem("item", itemArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Range parseRange(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Range.class, jsonNode);
        }
        Range.Builder builder = Range.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.low((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "low", getJsonNode(jsonNode, "low", JsonNode.class), -1));
        builder.high((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "high", getJsonNode(jsonNode, "high", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Ratio parseRatio(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Ratio.class, jsonNode);
        }
        Ratio.Builder builder = Ratio.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.numerator(parseQuantity("numerator", getJsonNode(jsonNode, "numerator", JsonNode.class), -1));
        builder.denominator(parseQuantity("denominator", getJsonNode(jsonNode, "denominator", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private RatioRange parseRatioRange(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RatioRange.class, jsonNode);
        }
        RatioRange.Builder builder = RatioRange.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.lowNumerator((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "lowNumerator", getJsonNode(jsonNode, "lowNumerator", JsonNode.class), -1));
        builder.highNumerator((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "highNumerator", getJsonNode(jsonNode, "highNumerator", JsonNode.class), -1));
        builder.denominator((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "denominator", getJsonNode(jsonNode, "denominator", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Reference parseReference(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Reference.class, jsonNode);
        }
        Reference.Builder builder = Reference.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.reference(parseString("reference", getJsonNode(jsonNode, "reference", TextNode.class), jsonNode.get("_reference"), -1));
        builder.type(parseUri("type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    private RegulatedAuthorization parseRegulatedAuthorization(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RegulatedAuthorization.class, jsonNode);
        }
        RegulatedAuthorization.Builder builder = RegulatedAuthorization.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode subjectArray = getArrayNode(jsonNode, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                if (subjectArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + subjectArray.get(i).getNodeType() + " for element: subject");
                }
                builder.subject(parseReference("subject", subjectArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode regionArray = getArrayNode(jsonNode, "region");
        if (regionArray != null) {
            for (int i = 0; i < regionArray.size(); i++) {
                if (regionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + regionArray.get(i).getNodeType() + " for element: region");
                }
                builder.region(parseCodeableConcept("region", regionArray.get(i), i));
            }
        }
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.statusDate(parseDateTime("statusDate", getJsonNode(jsonNode, "statusDate", TextNode.class), jsonNode.get("_statusDate"), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", getJsonNode(jsonNode, "validityPeriod", JsonNode.class), -1));
        builder.indication(parseCodeableReference("indication", getJsonNode(jsonNode, "indication", JsonNode.class), -1));
        builder.intendedUse(parseCodeableConcept("intendedUse", getJsonNode(jsonNode, "intendedUse", JsonNode.class), -1));
        ArrayNode basisArray = getArrayNode(jsonNode, "basis");
        if (basisArray != null) {
            for (int i = 0; i < basisArray.size(); i++) {
                if (basisArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basisArray.get(i).getNodeType() + " for element: basis");
                }
                builder.basis(parseCodeableConcept("basis", basisArray.get(i), i));
            }
        }
        builder.holder(parseReference("holder", getJsonNode(jsonNode, "holder", JsonNode.class), -1));
        builder.regulator(parseReference("regulator", getJsonNode(jsonNode, "regulator", JsonNode.class), -1));
        builder._case(parseRegulatedAuthorizationCase("case", getJsonNode(jsonNode, "case", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private RegulatedAuthorization.Case parseRegulatedAuthorizationCase(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RegulatedAuthorization.Case.class, jsonNode);
        }
        RegulatedAuthorization.Case.Builder builder = RegulatedAuthorization.Case.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.date(parseChoiceElement("date", jsonNode, Period.class, DateTime.class));
        ArrayNode applicationArray = getArrayNode(jsonNode, "application");
        if (applicationArray != null) {
            for (int i = 0; i < applicationArray.size(); i++) {
                if (applicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + applicationArray.get(i).getNodeType() + " for element: application");
                }
                builder.application(parseRegulatedAuthorizationCase("application", applicationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RelatedArtifact parseRelatedArtifact(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RelatedArtifact.class, jsonNode);
        }
        RelatedArtifact.Builder builder = RelatedArtifact.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.type((RelatedArtifactType) parseString(RelatedArtifactType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.label(parseString("label", getJsonNode(jsonNode, "label", TextNode.class), jsonNode.get("_label"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        builder.citation((Markdown) parseString(Markdown.builder(), "citation", getJsonNode(jsonNode, "citation", TextNode.class), jsonNode.get("_citation"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.document(parseAttachment("document", getJsonNode(jsonNode, "document", JsonNode.class), -1));
        builder.resource((Canonical) parseUri(Canonical.builder(), "resource", getJsonNode(jsonNode, "resource", TextNode.class), jsonNode.get("_resource"), -1));
        stackPop();
        return builder.build();
    }

    private RelatedPerson parseRelatedPerson(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RelatedPerson.class, jsonNode);
        }
        RelatedPerson.Builder builder = RelatedPerson.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        ArrayNode relationshipArray = getArrayNode(jsonNode, "relationship");
        if (relationshipArray != null) {
            for (int i = 0; i < relationshipArray.size(); i++) {
                if (relationshipArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relationshipArray.get(i).getNodeType() + " for element: relationship");
                }
                builder.relationship(parseCodeableConcept("relationship", relationshipArray.get(i), i));
            }
        }
        ArrayNode nameArray = getArrayNode(jsonNode, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                if (nameArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + nameArray.get(i).getNodeType() + " for element: name");
                }
                builder.name(parseHumanName("name", nameArray.get(i), i));
            }
        }
        ArrayNode telecomArray = getArrayNode(jsonNode, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                if (telecomArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + telecomArray.get(i).getNodeType() + " for element: telecom");
                }
                builder.telecom(parseContactPoint("telecom", telecomArray.get(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonNode(jsonNode, "gender", TextNode.class), jsonNode.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", getJsonNode(jsonNode, "birthDate", TextNode.class), jsonNode.get("_birthDate"), -1));
        ArrayNode addressArray = getArrayNode(jsonNode, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                if (addressArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + addressArray.get(i).getNodeType() + " for element: address");
                }
                builder.address(parseAddress("address", addressArray.get(i), i));
            }
        }
        ArrayNode photoArray = getArrayNode(jsonNode, "photo");
        if (photoArray != null) {
            for (int i = 0; i < photoArray.size(); i++) {
                if (photoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + photoArray.get(i).getNodeType() + " for element: photo");
                }
                builder.photo(parseAttachment("photo", photoArray.get(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode communicationArray = getArrayNode(jsonNode, "communication");
        if (communicationArray != null) {
            for (int i = 0; i < communicationArray.size(); i++) {
                if (communicationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + communicationArray.get(i).getNodeType() + " for element: communication");
                }
                builder.communication(parseRelatedPersonCommunication("communication", communicationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RelatedPerson.Communication parseRelatedPersonCommunication(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RelatedPerson.Communication.class, jsonNode);
        }
        RelatedPerson.Communication.Builder builder = RelatedPerson.Communication.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.language(parseCodeableConcept("language", getJsonNode(jsonNode, "language", JsonNode.class), -1));
        builder.preferred(parseBoolean("preferred", getJsonNode(jsonNode, "preferred", JsonNode.class), jsonNode.get("_preferred"), -1));
        stackPop();
        return builder.build();
    }

    private RequestGroup parseRequestGroup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RequestGroup.class, jsonNode);
        }
        RequestGroup.Builder builder = RequestGroup.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode replacesArray = getArrayNode(jsonNode, "replaces");
        if (replacesArray != null) {
            for (int i = 0; i < replacesArray.size(); i++) {
                if (replacesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + replacesArray.get(i).getNodeType() + " for element: replaces");
                }
                builder.replaces(parseReference("replaces", replacesArray.get(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonNode(jsonNode, "groupIdentifier", JsonNode.class), -1));
        builder.status((RequestStatus) parseString(RequestStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", getJsonNode(jsonNode, "intent", TextNode.class), jsonNode.get("_intent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.authoredOn(parseDateTime("authoredOn", getJsonNode(jsonNode, "authoredOn", TextNode.class), jsonNode.get("_authoredOn"), -1));
        builder.author(parseReference("author", getJsonNode(jsonNode, "author", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseRequestGroupAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RequestGroup.Action parseRequestGroupAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RequestGroup.Action.class, jsonNode);
        }
        RequestGroup.Action.Builder builder = RequestGroup.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.prefix(parseString("prefix", getJsonNode(jsonNode, "prefix", TextNode.class), jsonNode.get("_prefix"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.textEquivalent(parseString("textEquivalent", getJsonNode(jsonNode, "textEquivalent", TextNode.class), jsonNode.get("_textEquivalent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseCodeableConcept("code", codeArray.get(i), i));
            }
        }
        ArrayNode documentationArray = getArrayNode(jsonNode, "documentation");
        if (documentationArray != null) {
            for (int i = 0; i < documentationArray.size(); i++) {
                if (documentationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + documentationArray.get(i).getNodeType() + " for element: documentation");
                }
                builder.documentation(parseRelatedArtifact("documentation", documentationArray.get(i), i));
            }
        }
        ArrayNode conditionArray = getArrayNode(jsonNode, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                if (conditionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conditionArray.get(i).getNodeType() + " for element: condition");
                }
                builder.condition(parseRequestGroupActionCondition("condition", conditionArray.get(i), i));
            }
        }
        ArrayNode relatedActionArray = getArrayNode(jsonNode, "relatedAction");
        if (relatedActionArray != null) {
            for (int i = 0; i < relatedActionArray.size(); i++) {
                if (relatedActionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedActionArray.get(i).getNodeType() + " for element: relatedAction");
                }
                builder.relatedAction(parseRequestGroupActionRelatedAction("relatedAction", relatedActionArray.get(i), i));
            }
        }
        builder.timing(parseChoiceElement("timing", jsonNode, DateTime.class, Age.class, Period.class, Duration.class, Range.class, Timing.class));
        ArrayNode participantArray = getArrayNode(jsonNode, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                if (participantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantArray.get(i).getNodeType() + " for element: participant");
                }
                builder.participant(parseReference("participant", participantArray.get(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.groupingBehavior((ActionGroupingBehavior) parseString(ActionGroupingBehavior.builder(), "groupingBehavior", getJsonNode(jsonNode, "groupingBehavior", TextNode.class), jsonNode.get("_groupingBehavior"), -1));
        builder.selectionBehavior((ActionSelectionBehavior) parseString(ActionSelectionBehavior.builder(), "selectionBehavior", getJsonNode(jsonNode, "selectionBehavior", TextNode.class), jsonNode.get("_selectionBehavior"), -1));
        builder.requiredBehavior((ActionRequiredBehavior) parseString(ActionRequiredBehavior.builder(), "requiredBehavior", getJsonNode(jsonNode, "requiredBehavior", TextNode.class), jsonNode.get("_requiredBehavior"), -1));
        builder.precheckBehavior((ActionPrecheckBehavior) parseString(ActionPrecheckBehavior.builder(), "precheckBehavior", getJsonNode(jsonNode, "precheckBehavior", TextNode.class), jsonNode.get("_precheckBehavior"), -1));
        builder.cardinalityBehavior((ActionCardinalityBehavior) parseString(ActionCardinalityBehavior.builder(), "cardinalityBehavior", getJsonNode(jsonNode, "cardinalityBehavior", TextNode.class), jsonNode.get("_cardinalityBehavior"), -1));
        builder.resource(parseReference("resource", getJsonNode(jsonNode, "resource", JsonNode.class), -1));
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseRequestGroupAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RequestGroup.Action.Condition parseRequestGroupActionCondition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RequestGroup.Action.Condition.class, jsonNode);
        }
        RequestGroup.Action.Condition.Builder builder = RequestGroup.Action.Condition.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.kind((ActionConditionKind) parseString(ActionConditionKind.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        builder.expression(parseExpression("expression", getJsonNode(jsonNode, "expression", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private RequestGroup.Action.RelatedAction parseRequestGroupActionRelatedAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RequestGroup.Action.RelatedAction.class, jsonNode);
        }
        RequestGroup.Action.RelatedAction.Builder builder = RequestGroup.Action.RelatedAction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.actionId((Id) parseString(Id.builder(), "actionId", getJsonNode(jsonNode, "actionId", TextNode.class), jsonNode.get("_actionId"), -1));
        builder.relationship((ActionRelationshipType) parseString(ActionRelationshipType.builder(), "relationship", getJsonNode(jsonNode, "relationship", TextNode.class), jsonNode.get("_relationship"), -1));
        builder.offset(parseChoiceElement("offset", jsonNode, Duration.class, Range.class));
        stackPop();
        return builder.build();
    }

    private ResearchDefinition parseResearchDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ResearchDefinition.class, jsonNode);
        }
        ResearchDefinition.Builder builder = ResearchDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", getJsonNode(jsonNode, "shortTitle", TextNode.class), jsonNode.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode commentArray = getArrayNode(jsonNode, "comment", true);
        if (commentArray != null) {
            ArrayNode _commentArray = getArrayNode(jsonNode, "_comment");
            for (int i = 0; i < commentArray.size(); i++) {
                builder.comment(parseString("comment", commentArray.get(i), getJsonNode(_commentArray, i), i));
            }
        }
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonNode(jsonNode, "usage", TextNode.class), jsonNode.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode topicArray = getArrayNode(jsonNode, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                if (topicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + topicArray.get(i).getNodeType() + " for element: topic");
                }
                builder.topic(parseCodeableConcept("topic", topicArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        ArrayNode libraryArray = getArrayNode(jsonNode, "library", true);
        if (libraryArray != null) {
            ArrayNode _libraryArray = getArrayNode(jsonNode, "_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonNode(_libraryArray, i), i));
            }
        }
        builder.population(parseReference("population", getJsonNode(jsonNode, "population", JsonNode.class), -1));
        builder.exposure(parseReference("exposure", getJsonNode(jsonNode, "exposure", JsonNode.class), -1));
        builder.exposureAlternative(parseReference("exposureAlternative", getJsonNode(jsonNode, "exposureAlternative", JsonNode.class), -1));
        builder.outcome(parseReference("outcome", getJsonNode(jsonNode, "outcome", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ResearchElementDefinition parseResearchElementDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ResearchElementDefinition.class, jsonNode);
        }
        ResearchElementDefinition.Builder builder = ResearchElementDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", getJsonNode(jsonNode, "shortTitle", TextNode.class), jsonNode.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", getJsonNode(jsonNode, "subtitle", TextNode.class), jsonNode.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonNode, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode commentArray = getArrayNode(jsonNode, "comment", true);
        if (commentArray != null) {
            ArrayNode _commentArray = getArrayNode(jsonNode, "_comment");
            for (int i = 0; i < commentArray.size(); i++) {
                builder.comment(parseString("comment", commentArray.get(i), getJsonNode(_commentArray, i), i));
            }
        }
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonNode(jsonNode, "usage", TextNode.class), jsonNode.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode topicArray = getArrayNode(jsonNode, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                if (topicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + topicArray.get(i).getNodeType() + " for element: topic");
                }
                builder.topic(parseCodeableConcept("topic", topicArray.get(i), i));
            }
        }
        ArrayNode authorArray = getArrayNode(jsonNode, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                if (authorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + authorArray.get(i).getNodeType() + " for element: author");
                }
                builder.author(parseContactDetail("author", authorArray.get(i), i));
            }
        }
        ArrayNode editorArray = getArrayNode(jsonNode, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                if (editorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + editorArray.get(i).getNodeType() + " for element: editor");
                }
                builder.editor(parseContactDetail("editor", editorArray.get(i), i));
            }
        }
        ArrayNode reviewerArray = getArrayNode(jsonNode, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                if (reviewerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reviewerArray.get(i).getNodeType() + " for element: reviewer");
                }
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.get(i), i));
            }
        }
        ArrayNode endorserArray = getArrayNode(jsonNode, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                if (endorserArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + endorserArray.get(i).getNodeType() + " for element: endorser");
                }
                builder.endorser(parseContactDetail("endorser", endorserArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        ArrayNode libraryArray = getArrayNode(jsonNode, "library", true);
        if (libraryArray != null) {
            ArrayNode _libraryArray = getArrayNode(jsonNode, "_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonNode(_libraryArray, i), i));
            }
        }
        builder.type((ResearchElementType) parseString(ResearchElementType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.variableType((VariableType) parseString(VariableType.builder(), "variableType", getJsonNode(jsonNode, "variableType", TextNode.class), jsonNode.get("_variableType"), -1));
        ArrayNode characteristicArray = getArrayNode(jsonNode, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                if (characteristicArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + characteristicArray.get(i).getNodeType() + " for element: characteristic");
                }
                builder.characteristic(parseResearchElementDefinitionCharacteristic("characteristic", characteristicArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ResearchElementDefinition.Characteristic parseResearchElementDefinitionCharacteristic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ResearchElementDefinition.Characteristic.class, jsonNode);
        }
        ResearchElementDefinition.Characteristic.Builder builder = ResearchElementDefinition.Characteristic.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.definition(parseChoiceElement("definition", jsonNode, CodeableConcept.class, Canonical.class, Expression.class, DataRequirement.class));
        ArrayNode usageContextArray = getArrayNode(jsonNode, "usageContext");
        if (usageContextArray != null) {
            for (int i = 0; i < usageContextArray.size(); i++) {
                if (usageContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + usageContextArray.get(i).getNodeType() + " for element: usageContext");
                }
                builder.usageContext(parseUsageContext("usageContext", usageContextArray.get(i), i));
            }
        }
        builder.exclude(parseBoolean("exclude", getJsonNode(jsonNode, "exclude", JsonNode.class), jsonNode.get("_exclude"), -1));
        builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", getJsonNode(jsonNode, "unitOfMeasure", JsonNode.class), -1));
        builder.studyEffectiveDescription(parseString("studyEffectiveDescription", getJsonNode(jsonNode, "studyEffectiveDescription", TextNode.class), jsonNode.get("_studyEffectiveDescription"), -1));
        builder.studyEffective(parseChoiceElement("studyEffective", jsonNode, DateTime.class, Period.class, Duration.class, Timing.class));
        builder.studyEffectiveTimeFromStart((Duration) parseQuantity(Duration.builder(), "studyEffectiveTimeFromStart", getJsonNode(jsonNode, "studyEffectiveTimeFromStart", JsonNode.class), -1));
        builder.studyEffectiveGroupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "studyEffectiveGroupMeasure", getJsonNode(jsonNode, "studyEffectiveGroupMeasure", TextNode.class), jsonNode.get("_studyEffectiveGroupMeasure"), -1));
        builder.participantEffectiveDescription(parseString("participantEffectiveDescription", getJsonNode(jsonNode, "participantEffectiveDescription", TextNode.class), jsonNode.get("_participantEffectiveDescription"), -1));
        builder.participantEffective(parseChoiceElement("participantEffective", jsonNode, DateTime.class, Period.class, Duration.class, Timing.class));
        builder.participantEffectiveTimeFromStart((Duration) parseQuantity(Duration.builder(), "participantEffectiveTimeFromStart", getJsonNode(jsonNode, "participantEffectiveTimeFromStart", JsonNode.class), -1));
        builder.participantEffectiveGroupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "participantEffectiveGroupMeasure", getJsonNode(jsonNode, "participantEffectiveGroupMeasure", TextNode.class), jsonNode.get("_participantEffectiveGroupMeasure"), -1));
        stackPop();
        return builder.build();
    }

    private ResearchStudy parseResearchStudy(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ResearchStudy.class, jsonNode);
        }
        ResearchStudy.Builder builder = ResearchStudy.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        ArrayNode protocolArray = getArrayNode(jsonNode, "protocol");
        if (protocolArray != null) {
            for (int i = 0; i < protocolArray.size(); i++) {
                if (protocolArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + protocolArray.get(i).getNodeType() + " for element: protocol");
                }
                builder.protocol(parseReference("protocol", protocolArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((ResearchStudyStatus) parseString(ResearchStudyStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.primaryPurposeType(parseCodeableConcept("primaryPurposeType", getJsonNode(jsonNode, "primaryPurposeType", JsonNode.class), -1));
        builder.phase(parseCodeableConcept("phase", getJsonNode(jsonNode, "phase", JsonNode.class), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        ArrayNode focusArray = getArrayNode(jsonNode, "focus");
        if (focusArray != null) {
            for (int i = 0; i < focusArray.size(); i++) {
                if (focusArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + focusArray.get(i).getNodeType() + " for element: focus");
                }
                builder.focus(parseCodeableConcept("focus", focusArray.get(i), i));
            }
        }
        ArrayNode conditionArray = getArrayNode(jsonNode, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                if (conditionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conditionArray.get(i).getNodeType() + " for element: condition");
                }
                builder.condition(parseCodeableConcept("condition", conditionArray.get(i), i));
            }
        }
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        ArrayNode relatedArtifactArray = getArrayNode(jsonNode, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                if (relatedArtifactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relatedArtifactArray.get(i).getNodeType() + " for element: relatedArtifact");
                }
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.get(i), i));
            }
        }
        ArrayNode keywordArray = getArrayNode(jsonNode, "keyword");
        if (keywordArray != null) {
            for (int i = 0; i < keywordArray.size(); i++) {
                if (keywordArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + keywordArray.get(i).getNodeType() + " for element: keyword");
                }
                builder.keyword(parseCodeableConcept("keyword", keywordArray.get(i), i));
            }
        }
        ArrayNode locationArray = getArrayNode(jsonNode, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                if (locationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + locationArray.get(i).getNodeType() + " for element: location");
                }
                builder.location(parseCodeableConcept("location", locationArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode enrollmentArray = getArrayNode(jsonNode, "enrollment");
        if (enrollmentArray != null) {
            for (int i = 0; i < enrollmentArray.size(); i++) {
                if (enrollmentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + enrollmentArray.get(i).getNodeType() + " for element: enrollment");
                }
                builder.enrollment(parseReference("enrollment", enrollmentArray.get(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.sponsor(parseReference("sponsor", getJsonNode(jsonNode, "sponsor", JsonNode.class), -1));
        builder.principalInvestigator(parseReference("principalInvestigator", getJsonNode(jsonNode, "principalInvestigator", JsonNode.class), -1));
        ArrayNode siteArray = getArrayNode(jsonNode, "site");
        if (siteArray != null) {
            for (int i = 0; i < siteArray.size(); i++) {
                if (siteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + siteArray.get(i).getNodeType() + " for element: site");
                }
                builder.site(parseReference("site", siteArray.get(i), i));
            }
        }
        builder.reasonStopped(parseCodeableConcept("reasonStopped", getJsonNode(jsonNode, "reasonStopped", JsonNode.class), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode armArray = getArrayNode(jsonNode, "arm");
        if (armArray != null) {
            for (int i = 0; i < armArray.size(); i++) {
                if (armArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + armArray.get(i).getNodeType() + " for element: arm");
                }
                builder.arm(parseResearchStudyArm("arm", armArray.get(i), i));
            }
        }
        ArrayNode objectiveArray = getArrayNode(jsonNode, "objective");
        if (objectiveArray != null) {
            for (int i = 0; i < objectiveArray.size(); i++) {
                if (objectiveArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + objectiveArray.get(i).getNodeType() + " for element: objective");
                }
                builder.objective(parseResearchStudyObjective("objective", objectiveArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ResearchStudy.Arm parseResearchStudyArm(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ResearchStudy.Arm.class, jsonNode);
        }
        ResearchStudy.Arm.Builder builder = ResearchStudy.Arm.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private ResearchStudy.Objective parseResearchStudyObjective(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ResearchStudy.Objective.class, jsonNode);
        }
        ResearchStudy.Objective.Builder builder = ResearchStudy.Objective.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ResearchSubject parseResearchSubject(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ResearchSubject.class, jsonNode);
        }
        ResearchSubject.Builder builder = ResearchSubject.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((ResearchSubjectStatus) parseString(ResearchSubjectStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        builder.study(parseReference("study", getJsonNode(jsonNode, "study", JsonNode.class), -1));
        builder.individual(parseReference("individual", getJsonNode(jsonNode, "individual", JsonNode.class), -1));
        builder.assignedArm(parseString("assignedArm", getJsonNode(jsonNode, "assignedArm", TextNode.class), jsonNode.get("_assignedArm"), -1));
        builder.actualArm(parseString("actualArm", getJsonNode(jsonNode, "actualArm", TextNode.class), jsonNode.get("_actualArm"), -1));
        builder.consent(parseReference("consent", getJsonNode(jsonNode, "consent", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private void parseResource(Resource.Builder builder, JsonNode jsonNode) {
        builder.setValidating(validating);
        builder.id(parseJavaString("id", getJsonNode(jsonNode, "id", TextNode.class), -1));
        builder.meta(parseMeta("meta", getJsonNode(jsonNode, "meta", JsonNode.class), -1));
        builder.implicitRules(parseUri("implicitRules", getJsonNode(jsonNode, "implicitRules", TextNode.class), jsonNode.get("_implicitRules"), -1));
        builder.language((Code) parseString(Code.builder(), "language", getJsonNode(jsonNode, "language", TextNode.class), jsonNode.get("_language"), -1));
    }

    private RiskAssessment parseRiskAssessment(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RiskAssessment.class, jsonNode);
        }
        RiskAssessment.Builder builder = RiskAssessment.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.basedOn(parseReference("basedOn", getJsonNode(jsonNode, "basedOn", JsonNode.class), -1));
        builder.parent(parseReference("parent", getJsonNode(jsonNode, "parent", JsonNode.class), -1));
        builder.status((RiskAssessmentStatus) parseString(RiskAssessmentStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, Period.class));
        builder.condition(parseReference("condition", getJsonNode(jsonNode, "condition", JsonNode.class), -1));
        builder.performer(parseReference("performer", getJsonNode(jsonNode, "performer", JsonNode.class), -1));
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode basisArray = getArrayNode(jsonNode, "basis");
        if (basisArray != null) {
            for (int i = 0; i < basisArray.size(); i++) {
                if (basisArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basisArray.get(i).getNodeType() + " for element: basis");
                }
                builder.basis(parseReference("basis", basisArray.get(i), i));
            }
        }
        ArrayNode predictionArray = getArrayNode(jsonNode, "prediction");
        if (predictionArray != null) {
            for (int i = 0; i < predictionArray.size(); i++) {
                if (predictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + predictionArray.get(i).getNodeType() + " for element: prediction");
                }
                builder.prediction(parseRiskAssessmentPrediction("prediction", predictionArray.get(i), i));
            }
        }
        builder.mitigation(parseString("mitigation", getJsonNode(jsonNode, "mitigation", TextNode.class), jsonNode.get("_mitigation"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RiskAssessment.Prediction parseRiskAssessmentPrediction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(RiskAssessment.Prediction.class, jsonNode);
        }
        RiskAssessment.Prediction.Builder builder = RiskAssessment.Prediction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.outcome(parseCodeableConcept("outcome", getJsonNode(jsonNode, "outcome", JsonNode.class), -1));
        builder.probability(parseChoiceElement("probability", jsonNode, Decimal.class, Range.class));
        builder.qualitativeRisk(parseCodeableConcept("qualitativeRisk", getJsonNode(jsonNode, "qualitativeRisk", JsonNode.class), -1));
        builder.relativeRisk(parseDecimal("relativeRisk", getJsonNode(jsonNode, "relativeRisk", NumericNode.class), jsonNode.get("_relativeRisk"), -1));
        builder.when(parseChoiceElement("when", jsonNode, Period.class, Range.class));
        builder.rationale(parseString("rationale", getJsonNode(jsonNode, "rationale", TextNode.class), jsonNode.get("_rationale"), -1));
        stackPop();
        return builder.build();
    }

    private SampledData parseSampledData(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SampledData.class, jsonNode);
        }
        SampledData.Builder builder = SampledData.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.origin((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "origin", getJsonNode(jsonNode, "origin", JsonNode.class), -1));
        builder.period(parseDecimal("period", getJsonNode(jsonNode, "period", NumericNode.class), jsonNode.get("_period"), -1));
        builder.factor(parseDecimal("factor", getJsonNode(jsonNode, "factor", NumericNode.class), jsonNode.get("_factor"), -1));
        builder.lowerLimit(parseDecimal("lowerLimit", getJsonNode(jsonNode, "lowerLimit", NumericNode.class), jsonNode.get("_lowerLimit"), -1));
        builder.upperLimit(parseDecimal("upperLimit", getJsonNode(jsonNode, "upperLimit", NumericNode.class), jsonNode.get("_upperLimit"), -1));
        builder.dimensions((PositiveInt) parseInteger(PositiveInt.builder(), "dimensions", getJsonNode(jsonNode, "dimensions", NumericNode.class), jsonNode.get("_dimensions"), -1));
        builder.data(parseString("data", getJsonNode(jsonNode, "data", TextNode.class), jsonNode.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    private Schedule parseSchedule(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Schedule.class, jsonNode);
        }
        Schedule.Builder builder = Schedule.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonNode(jsonNode, "active", JsonNode.class), jsonNode.get("_active"), -1));
        ArrayNode serviceCategoryArray = getArrayNode(jsonNode, "serviceCategory");
        if (serviceCategoryArray != null) {
            for (int i = 0; i < serviceCategoryArray.size(); i++) {
                if (serviceCategoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceCategoryArray.get(i).getNodeType() + " for element: serviceCategory");
                }
                builder.serviceCategory(parseCodeableConcept("serviceCategory", serviceCategoryArray.get(i), i));
            }
        }
        ArrayNode serviceTypeArray = getArrayNode(jsonNode, "serviceType");
        if (serviceTypeArray != null) {
            for (int i = 0; i < serviceTypeArray.size(); i++) {
                if (serviceTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceTypeArray.get(i).getNodeType() + " for element: serviceType");
                }
                builder.serviceType(parseCodeableConcept("serviceType", serviceTypeArray.get(i), i));
            }
        }
        ArrayNode specialtyArray = getArrayNode(jsonNode, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                if (specialtyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialtyArray.get(i).getNodeType() + " for element: specialty");
                }
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.get(i), i));
            }
        }
        ArrayNode actorArray = getArrayNode(jsonNode, "actor");
        if (actorArray != null) {
            for (int i = 0; i < actorArray.size(); i++) {
                if (actorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actorArray.get(i).getNodeType() + " for element: actor");
                }
                builder.actor(parseReference("actor", actorArray.get(i), i));
            }
        }
        builder.planningHorizon(parsePeriod("planningHorizon", getJsonNode(jsonNode, "planningHorizon", JsonNode.class), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private SearchParameter parseSearchParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SearchParameter.class, jsonNode);
        }
        SearchParameter.Builder builder = SearchParameter.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", getJsonNode(jsonNode, "derivedFrom", TextNode.class), jsonNode.get("_derivedFrom"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        ArrayNode baseArray = getArrayNode(jsonNode, "base", true);
        if (baseArray != null) {
            ArrayNode _baseArray = getArrayNode(jsonNode, "_base");
            for (int i = 0; i < baseArray.size(); i++) {
                builder.base((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "base", baseArray.get(i), getJsonNode(_baseArray, i), i));
            }
        }
        builder.type((SearchParamType) parseString(SearchParamType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        builder.xpath(parseString("xpath", getJsonNode(jsonNode, "xpath", TextNode.class), jsonNode.get("_xpath"), -1));
        builder.xpathUsage((XPathUsageType) parseString(XPathUsageType.builder(), "xpathUsage", getJsonNode(jsonNode, "xpathUsage", TextNode.class), jsonNode.get("_xpathUsage"), -1));
        ArrayNode targetArray = getArrayNode(jsonNode, "target", true);
        if (targetArray != null) {
            ArrayNode _targetArray = getArrayNode(jsonNode, "_target");
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target((ResourceTypeCode) parseString(ResourceTypeCode.builder(), "target", targetArray.get(i), getJsonNode(_targetArray, i), i));
            }
        }
        builder.multipleOr(parseBoolean("multipleOr", getJsonNode(jsonNode, "multipleOr", JsonNode.class), jsonNode.get("_multipleOr"), -1));
        builder.multipleAnd(parseBoolean("multipleAnd", getJsonNode(jsonNode, "multipleAnd", JsonNode.class), jsonNode.get("_multipleAnd"), -1));
        ArrayNode comparatorArray = getArrayNode(jsonNode, "comparator", true);
        if (comparatorArray != null) {
            ArrayNode _comparatorArray = getArrayNode(jsonNode, "_comparator");
            for (int i = 0; i < comparatorArray.size(); i++) {
                builder.comparator((SearchComparator) parseString(SearchComparator.builder(), "comparator", comparatorArray.get(i), getJsonNode(_comparatorArray, i), i));
            }
        }
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier", true);
        if (modifierArray != null) {
            ArrayNode _modifierArray = getArrayNode(jsonNode, "_modifier");
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier((SearchModifierCode) parseString(SearchModifierCode.builder(), "modifier", modifierArray.get(i), getJsonNode(_modifierArray, i), i));
            }
        }
        ArrayNode chainArray = getArrayNode(jsonNode, "chain", true);
        if (chainArray != null) {
            ArrayNode _chainArray = getArrayNode(jsonNode, "_chain");
            for (int i = 0; i < chainArray.size(); i++) {
                builder.chain(parseString("chain", chainArray.get(i), getJsonNode(_chainArray, i), i));
            }
        }
        ArrayNode componentArray = getArrayNode(jsonNode, "component");
        if (componentArray != null) {
            for (int i = 0; i < componentArray.size(); i++) {
                if (componentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + componentArray.get(i).getNodeType() + " for element: component");
                }
                builder.component(parseSearchParameterComponent("component", componentArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SearchParameter.Component parseSearchParameterComponent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SearchParameter.Component.class, jsonNode);
        }
        SearchParameter.Component.Builder builder = SearchParameter.Component.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonNode(jsonNode, "definition", TextNode.class), jsonNode.get("_definition"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        stackPop();
        return builder.build();
    }

    private ServiceRequest parseServiceRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ServiceRequest.class, jsonNode);
        }
        ServiceRequest.Builder builder = ServiceRequest.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode instantiatesCanonicalArray = getArrayNode(jsonNode, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            ArrayNode _instantiatesCanonicalArray = getArrayNode(jsonNode, "_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonNode(_instantiatesCanonicalArray, i), i));
            }
        }
        ArrayNode instantiatesUriArray = getArrayNode(jsonNode, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            ArrayNode _instantiatesUriArray = getArrayNode(jsonNode, "_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonNode(_instantiatesUriArray, i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode replacesArray = getArrayNode(jsonNode, "replaces");
        if (replacesArray != null) {
            for (int i = 0; i < replacesArray.size(); i++) {
                if (replacesArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + replacesArray.get(i).getNodeType() + " for element: replaces");
                }
                builder.replaces(parseReference("replaces", replacesArray.get(i), i));
            }
        }
        builder.requisition(parseIdentifier("requisition", getJsonNode(jsonNode, "requisition", JsonNode.class), -1));
        builder.status((ServiceRequestStatus) parseString(ServiceRequestStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.intent((ServiceRequestIntent) parseString(ServiceRequestIntent.builder(), "intent", getJsonNode(jsonNode, "intent", TextNode.class), jsonNode.get("_intent"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.priority((ServiceRequestPriority) parseString(ServiceRequestPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonNode(jsonNode, "doNotPerform", JsonNode.class), jsonNode.get("_doNotPerform"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        ArrayNode orderDetailArray = getArrayNode(jsonNode, "orderDetail");
        if (orderDetailArray != null) {
            for (int i = 0; i < orderDetailArray.size(); i++) {
                if (orderDetailArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + orderDetailArray.get(i).getNodeType() + " for element: orderDetail");
                }
                builder.orderDetail(parseCodeableConcept("orderDetail", orderDetailArray.get(i), i));
            }
        }
        builder.quantity(parseChoiceElement("quantity", jsonNode, Quantity.class, Ratio.class, Range.class));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, Period.class, Timing.class));
        builder.asNeeded(parseChoiceElement("asNeeded", jsonNode, Boolean.class, CodeableConcept.class));
        builder.authoredOn(parseDateTime("authoredOn", getJsonNode(jsonNode, "authoredOn", TextNode.class), jsonNode.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonNode(jsonNode, "requester", JsonNode.class), -1));
        builder.performerType(parseCodeableConcept("performerType", getJsonNode(jsonNode, "performerType", JsonNode.class), -1));
        ArrayNode performerArray = getArrayNode(jsonNode, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                if (performerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerArray.get(i).getNodeType() + " for element: performer");
                }
                builder.performer(parseReference("performer", performerArray.get(i), i));
            }
        }
        ArrayNode locationCodeArray = getArrayNode(jsonNode, "locationCode");
        if (locationCodeArray != null) {
            for (int i = 0; i < locationCodeArray.size(); i++) {
                if (locationCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + locationCodeArray.get(i).getNodeType() + " for element: locationCode");
                }
                builder.locationCode(parseCodeableConcept("locationCode", locationCodeArray.get(i), i));
            }
        }
        ArrayNode locationReferenceArray = getArrayNode(jsonNode, "locationReference");
        if (locationReferenceArray != null) {
            for (int i = 0; i < locationReferenceArray.size(); i++) {
                if (locationReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + locationReferenceArray.get(i).getNodeType() + " for element: locationReference");
                }
                builder.locationReference(parseReference("locationReference", locationReferenceArray.get(i), i));
            }
        }
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseReference("insurance", insuranceArray.get(i), i));
            }
        }
        ArrayNode supportingInfoArray = getArrayNode(jsonNode, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                if (supportingInfoArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supportingInfoArray.get(i).getNodeType() + " for element: supportingInfo");
                }
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.get(i), i));
            }
        }
        ArrayNode specimenArray = getArrayNode(jsonNode, "specimen");
        if (specimenArray != null) {
            for (int i = 0; i < specimenArray.size(); i++) {
                if (specimenArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specimenArray.get(i).getNodeType() + " for element: specimen");
                }
                builder.specimen(parseReference("specimen", specimenArray.get(i), i));
            }
        }
        ArrayNode bodySiteArray = getArrayNode(jsonNode, "bodySite");
        if (bodySiteArray != null) {
            for (int i = 0; i < bodySiteArray.size(); i++) {
                if (bodySiteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + bodySiteArray.get(i).getNodeType() + " for element: bodySite");
                }
                builder.bodySite(parseCodeableConcept("bodySite", bodySiteArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        builder.patientInstruction(parseString("patientInstruction", getJsonNode(jsonNode, "patientInstruction", TextNode.class), jsonNode.get("_patientInstruction"), -1));
        ArrayNode relevantHistoryArray = getArrayNode(jsonNode, "relevantHistory");
        if (relevantHistoryArray != null) {
            for (int i = 0; i < relevantHistoryArray.size(); i++) {
                if (relevantHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relevantHistoryArray.get(i).getNodeType() + " for element: relevantHistory");
                }
                builder.relevantHistory(parseReference("relevantHistory", relevantHistoryArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Signature parseSignature(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Signature.class, jsonNode);
        }
        Signature.Builder builder = Signature.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCoding("type", typeArray.get(i), i));
            }
        }
        builder.when(parseInstant("when", getJsonNode(jsonNode, "when", TextNode.class), jsonNode.get("_when"), -1));
        builder.who(parseReference("who", getJsonNode(jsonNode, "who", JsonNode.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonNode(jsonNode, "onBehalfOf", JsonNode.class), -1));
        builder.targetFormat((Code) parseString(Code.builder(), "targetFormat", getJsonNode(jsonNode, "targetFormat", TextNode.class), jsonNode.get("_targetFormat"), -1));
        builder.sigFormat((Code) parseString(Code.builder(), "sigFormat", getJsonNode(jsonNode, "sigFormat", TextNode.class), jsonNode.get("_sigFormat"), -1));
        builder.data(parseBase64Binary("data", getJsonNode(jsonNode, "data", TextNode.class), jsonNode.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    private Slot parseSlot(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Slot.class, jsonNode);
        }
        Slot.Builder builder = Slot.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode serviceCategoryArray = getArrayNode(jsonNode, "serviceCategory");
        if (serviceCategoryArray != null) {
            for (int i = 0; i < serviceCategoryArray.size(); i++) {
                if (serviceCategoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceCategoryArray.get(i).getNodeType() + " for element: serviceCategory");
                }
                builder.serviceCategory(parseCodeableConcept("serviceCategory", serviceCategoryArray.get(i), i));
            }
        }
        ArrayNode serviceTypeArray = getArrayNode(jsonNode, "serviceType");
        if (serviceTypeArray != null) {
            for (int i = 0; i < serviceTypeArray.size(); i++) {
                if (serviceTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + serviceTypeArray.get(i).getNodeType() + " for element: serviceType");
                }
                builder.serviceType(parseCodeableConcept("serviceType", serviceTypeArray.get(i), i));
            }
        }
        ArrayNode specialtyArray = getArrayNode(jsonNode, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                if (specialtyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + specialtyArray.get(i).getNodeType() + " for element: specialty");
                }
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.get(i), i));
            }
        }
        builder.appointmentType(parseCodeableConcept("appointmentType", getJsonNode(jsonNode, "appointmentType", JsonNode.class), -1));
        builder.schedule(parseReference("schedule", getJsonNode(jsonNode, "schedule", JsonNode.class), -1));
        builder.status((SlotStatus) parseString(SlotStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.start(parseInstant("start", getJsonNode(jsonNode, "start", TextNode.class), jsonNode.get("_start"), -1));
        builder.end(parseInstant("end", getJsonNode(jsonNode, "end", TextNode.class), jsonNode.get("_end"), -1));
        builder.overbooked(parseBoolean("overbooked", getJsonNode(jsonNode, "overbooked", JsonNode.class), jsonNode.get("_overbooked"), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private Specimen parseSpecimen(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Specimen.class, jsonNode);
        }
        Specimen.Builder builder = Specimen.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.accessionIdentifier(parseIdentifier("accessionIdentifier", getJsonNode(jsonNode, "accessionIdentifier", JsonNode.class), -1));
        builder.status((SpecimenStatus) parseString(SpecimenStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.subject(parseReference("subject", getJsonNode(jsonNode, "subject", JsonNode.class), -1));
        builder.receivedTime(parseDateTime("receivedTime", getJsonNode(jsonNode, "receivedTime", TextNode.class), jsonNode.get("_receivedTime"), -1));
        ArrayNode parentArray = getArrayNode(jsonNode, "parent");
        if (parentArray != null) {
            for (int i = 0; i < parentArray.size(); i++) {
                if (parentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parentArray.get(i).getNodeType() + " for element: parent");
                }
                builder.parent(parseReference("parent", parentArray.get(i), i));
            }
        }
        ArrayNode requestArray = getArrayNode(jsonNode, "request");
        if (requestArray != null) {
            for (int i = 0; i < requestArray.size(); i++) {
                if (requestArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + requestArray.get(i).getNodeType() + " for element: request");
                }
                builder.request(parseReference("request", requestArray.get(i), i));
            }
        }
        builder.collection(parseSpecimenCollection("collection", getJsonNode(jsonNode, "collection", JsonNode.class), -1));
        ArrayNode processingArray = getArrayNode(jsonNode, "processing");
        if (processingArray != null) {
            for (int i = 0; i < processingArray.size(); i++) {
                if (processingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + processingArray.get(i).getNodeType() + " for element: processing");
                }
                builder.processing(parseSpecimenProcessing("processing", processingArray.get(i), i));
            }
        }
        ArrayNode containerArray = getArrayNode(jsonNode, "container");
        if (containerArray != null) {
            for (int i = 0; i < containerArray.size(); i++) {
                if (containerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + containerArray.get(i).getNodeType() + " for element: container");
                }
                builder.container(parseSpecimenContainer("container", containerArray.get(i), i));
            }
        }
        ArrayNode conditionArray = getArrayNode(jsonNode, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                if (conditionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conditionArray.get(i).getNodeType() + " for element: condition");
                }
                builder.condition(parseCodeableConcept("condition", conditionArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Specimen.Collection parseSpecimenCollection(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Specimen.Collection.class, jsonNode);
        }
        Specimen.Collection.Builder builder = Specimen.Collection.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.collector(parseReference("collector", getJsonNode(jsonNode, "collector", JsonNode.class), -1));
        builder.collected(parseChoiceElement("collected", jsonNode, DateTime.class, Period.class));
        builder.duration((Duration) parseQuantity(Duration.builder(), "duration", getJsonNode(jsonNode, "duration", JsonNode.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", getJsonNode(jsonNode, "bodySite", JsonNode.class), -1));
        builder.fastingStatus(parseChoiceElement("fastingStatus", jsonNode, CodeableConcept.class, Duration.class));
        stackPop();
        return builder.build();
    }

    private Specimen.Container parseSpecimenContainer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Specimen.Container.class, jsonNode);
        }
        Specimen.Container.Builder builder = Specimen.Container.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.capacity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "capacity", getJsonNode(jsonNode, "capacity", JsonNode.class), -1));
        builder.specimenQuantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "specimenQuantity", getJsonNode(jsonNode, "specimenQuantity", JsonNode.class), -1));
        builder.additive(parseChoiceElement("additive", jsonNode, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Specimen.Processing parseSpecimenProcessing(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Specimen.Processing.class, jsonNode);
        }
        Specimen.Processing.Builder builder = Specimen.Processing.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.procedure(parseCodeableConcept("procedure", getJsonNode(jsonNode, "procedure", JsonNode.class), -1));
        ArrayNode additiveArray = getArrayNode(jsonNode, "additive");
        if (additiveArray != null) {
            for (int i = 0; i < additiveArray.size(); i++) {
                if (additiveArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + additiveArray.get(i).getNodeType() + " for element: additive");
                }
                builder.additive(parseReference("additive", additiveArray.get(i), i));
            }
        }
        builder.time(parseChoiceElement("time", jsonNode, DateTime.class, Period.class));
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition parseSpecimenDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SpecimenDefinition.class, jsonNode);
        }
        SpecimenDefinition.Builder builder = SpecimenDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.typeCollected(parseCodeableConcept("typeCollected", getJsonNode(jsonNode, "typeCollected", JsonNode.class), -1));
        ArrayNode patientPreparationArray = getArrayNode(jsonNode, "patientPreparation");
        if (patientPreparationArray != null) {
            for (int i = 0; i < patientPreparationArray.size(); i++) {
                if (patientPreparationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + patientPreparationArray.get(i).getNodeType() + " for element: patientPreparation");
                }
                builder.patientPreparation(parseCodeableConcept("patientPreparation", patientPreparationArray.get(i), i));
            }
        }
        builder.timeAspect(parseString("timeAspect", getJsonNode(jsonNode, "timeAspect", TextNode.class), jsonNode.get("_timeAspect"), -1));
        ArrayNode collectionArray = getArrayNode(jsonNode, "collection");
        if (collectionArray != null) {
            for (int i = 0; i < collectionArray.size(); i++) {
                if (collectionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + collectionArray.get(i).getNodeType() + " for element: collection");
                }
                builder.collection(parseCodeableConcept("collection", collectionArray.get(i), i));
            }
        }
        ArrayNode typeTestedArray = getArrayNode(jsonNode, "typeTested");
        if (typeTestedArray != null) {
            for (int i = 0; i < typeTestedArray.size(); i++) {
                if (typeTestedArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeTestedArray.get(i).getNodeType() + " for element: typeTested");
                }
                builder.typeTested(parseSpecimenDefinitionTypeTested("typeTested", typeTestedArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition.TypeTested parseSpecimenDefinitionTypeTested(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SpecimenDefinition.TypeTested.class, jsonNode);
        }
        SpecimenDefinition.TypeTested.Builder builder = SpecimenDefinition.TypeTested.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.isDerived(parseBoolean("isDerived", getJsonNode(jsonNode, "isDerived", JsonNode.class), jsonNode.get("_isDerived"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.preference((SpecimenContainedPreference) parseString(SpecimenContainedPreference.builder(), "preference", getJsonNode(jsonNode, "preference", TextNode.class), jsonNode.get("_preference"), -1));
        builder.container(parseSpecimenDefinitionTypeTestedContainer("container", getJsonNode(jsonNode, "container", JsonNode.class), -1));
        builder.requirement(parseString("requirement", getJsonNode(jsonNode, "requirement", TextNode.class), jsonNode.get("_requirement"), -1));
        builder.retentionTime((Duration) parseQuantity(Duration.builder(), "retentionTime", getJsonNode(jsonNode, "retentionTime", JsonNode.class), -1));
        ArrayNode rejectionCriterionArray = getArrayNode(jsonNode, "rejectionCriterion");
        if (rejectionCriterionArray != null) {
            for (int i = 0; i < rejectionCriterionArray.size(); i++) {
                if (rejectionCriterionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + rejectionCriterionArray.get(i).getNodeType() + " for element: rejectionCriterion");
                }
                builder.rejectionCriterion(parseCodeableConcept("rejectionCriterion", rejectionCriterionArray.get(i), i));
            }
        }
        ArrayNode handlingArray = getArrayNode(jsonNode, "handling");
        if (handlingArray != null) {
            for (int i = 0; i < handlingArray.size(); i++) {
                if (handlingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + handlingArray.get(i).getNodeType() + " for element: handling");
                }
                builder.handling(parseSpecimenDefinitionTypeTestedHandling("handling", handlingArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition.TypeTested.Container parseSpecimenDefinitionTypeTestedContainer(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SpecimenDefinition.TypeTested.Container.class, jsonNode);
        }
        SpecimenDefinition.TypeTested.Container.Builder builder = SpecimenDefinition.TypeTested.Container.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.material(parseCodeableConcept("material", getJsonNode(jsonNode, "material", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.cap(parseCodeableConcept("cap", getJsonNode(jsonNode, "cap", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.capacity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "capacity", getJsonNode(jsonNode, "capacity", JsonNode.class), -1));
        builder.minimumVolume(parseChoiceElement("minimumVolume", jsonNode, SimpleQuantity.class, String.class));
        ArrayNode additiveArray = getArrayNode(jsonNode, "additive");
        if (additiveArray != null) {
            for (int i = 0; i < additiveArray.size(); i++) {
                if (additiveArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + additiveArray.get(i).getNodeType() + " for element: additive");
                }
                builder.additive(parseSpecimenDefinitionTypeTestedContainerAdditive("additive", additiveArray.get(i), i));
            }
        }
        builder.preparation(parseString("preparation", getJsonNode(jsonNode, "preparation", TextNode.class), jsonNode.get("_preparation"), -1));
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition.TypeTested.Container.Additive parseSpecimenDefinitionTypeTestedContainerAdditive(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SpecimenDefinition.TypeTested.Container.Additive.class, jsonNode);
        }
        SpecimenDefinition.TypeTested.Container.Additive.Builder builder = SpecimenDefinition.TypeTested.Container.Additive.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.additive(parseChoiceElement("additive", jsonNode, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition.TypeTested.Handling parseSpecimenDefinitionTypeTestedHandling(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SpecimenDefinition.TypeTested.Handling.class, jsonNode);
        }
        SpecimenDefinition.TypeTested.Handling.Builder builder = SpecimenDefinition.TypeTested.Handling.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.temperatureQualifier(parseCodeableConcept("temperatureQualifier", getJsonNode(jsonNode, "temperatureQualifier", JsonNode.class), -1));
        builder.temperatureRange(parseRange("temperatureRange", getJsonNode(jsonNode, "temperatureRange", JsonNode.class), -1));
        builder.maxDuration((Duration) parseQuantity(Duration.builder(), "maxDuration", getJsonNode(jsonNode, "maxDuration", JsonNode.class), -1));
        builder.instruction(parseString("instruction", getJsonNode(jsonNode, "instruction", TextNode.class), jsonNode.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    private String parseString(String.Builder builder, java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.STRING) {
            TextNode jsonString = (TextNode) jsonValue;
            builder.value(jsonString.textValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private String parseString(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        return parseString(String.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    private StructureDefinition parseStructureDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureDefinition.class, jsonNode);
        }
        StructureDefinition.Builder builder = StructureDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        ArrayNode keywordArray = getArrayNode(jsonNode, "keyword");
        if (keywordArray != null) {
            for (int i = 0; i < keywordArray.size(); i++) {
                if (keywordArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + keywordArray.get(i).getNodeType() + " for element: keyword");
                }
                builder.keyword(parseCoding("keyword", keywordArray.get(i), i));
            }
        }
        builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", getJsonNode(jsonNode, "fhirVersion", TextNode.class), jsonNode.get("_fhirVersion"), -1));
        ArrayNode mappingArray = getArrayNode(jsonNode, "mapping");
        if (mappingArray != null) {
            for (int i = 0; i < mappingArray.size(); i++) {
                if (mappingArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + mappingArray.get(i).getNodeType() + " for element: mapping");
                }
                builder.mapping(parseStructureDefinitionMapping("mapping", mappingArray.get(i), i));
            }
        }
        builder.kind((StructureDefinitionKind) parseString(StructureDefinitionKind.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        builder._abstract(parseBoolean("abstract", getJsonNode(jsonNode, "abstract", JsonNode.class), jsonNode.get("_abstract"), -1));
        ArrayNode contextArray = getArrayNode(jsonNode, "context");
        if (contextArray != null) {
            for (int i = 0; i < contextArray.size(); i++) {
                if (contextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contextArray.get(i).getNodeType() + " for element: context");
                }
                builder.context(parseStructureDefinitionContext("context", contextArray.get(i), i));
            }
        }
        ArrayNode contextInvariantArray = getArrayNode(jsonNode, "contextInvariant", true);
        if (contextInvariantArray != null) {
            ArrayNode _contextInvariantArray = getArrayNode(jsonNode, "_contextInvariant");
            for (int i = 0; i < contextInvariantArray.size(); i++) {
                builder.contextInvariant(parseString("contextInvariant", contextInvariantArray.get(i), getJsonNode(_contextInvariantArray, i), i));
            }
        }
        builder.type(parseUri("type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.baseDefinition((Canonical) parseUri(Canonical.builder(), "baseDefinition", getJsonNode(jsonNode, "baseDefinition", TextNode.class), jsonNode.get("_baseDefinition"), -1));
        builder.derivation((TypeDerivationRule) parseString(TypeDerivationRule.builder(), "derivation", getJsonNode(jsonNode, "derivation", TextNode.class), jsonNode.get("_derivation"), -1));
        builder.snapshot(parseStructureDefinitionSnapshot("snapshot", getJsonNode(jsonNode, "snapshot", JsonNode.class), -1));
        builder.differential(parseStructureDefinitionDifferential("differential", getJsonNode(jsonNode, "differential", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private StructureDefinition.Context parseStructureDefinitionContext(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureDefinition.Context.class, jsonNode);
        }
        StructureDefinition.Context.Builder builder = StructureDefinition.Context.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((ExtensionContextType) parseString(ExtensionContextType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        stackPop();
        return builder.build();
    }

    private StructureDefinition.Differential parseStructureDefinitionDifferential(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureDefinition.Differential.class, jsonNode);
        }
        StructureDefinition.Differential.Builder builder = StructureDefinition.Differential.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode elementArray = getArrayNode(jsonNode, "element");
        if (elementArray != null) {
            for (int i = 0; i < elementArray.size(); i++) {
                if (elementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + elementArray.get(i).getNodeType() + " for element: element");
                }
                builder.element(parseElementDefinition("element", elementArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureDefinition.Mapping parseStructureDefinitionMapping(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureDefinition.Mapping.class, jsonNode);
        }
        StructureDefinition.Mapping.Builder builder = StructureDefinition.Mapping.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identity((Id) parseString(Id.builder(), "identity", getJsonNode(jsonNode, "identity", TextNode.class), jsonNode.get("_identity"), -1));
        builder.uri(parseUri("uri", getJsonNode(jsonNode, "uri", TextNode.class), jsonNode.get("_uri"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.comment(parseString("comment", getJsonNode(jsonNode, "comment", TextNode.class), jsonNode.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private StructureDefinition.Snapshot parseStructureDefinitionSnapshot(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureDefinition.Snapshot.class, jsonNode);
        }
        StructureDefinition.Snapshot.Builder builder = StructureDefinition.Snapshot.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode elementArray = getArrayNode(jsonNode, "element");
        if (elementArray != null) {
            for (int i = 0; i < elementArray.size(); i++) {
                if (elementArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + elementArray.get(i).getNodeType() + " for element: element");
                }
                builder.element(parseElementDefinition("element", elementArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap parseStructureMap(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.class, jsonNode);
        }
        StructureMap.Builder builder = StructureMap.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        ArrayNode structureArray = getArrayNode(jsonNode, "structure");
        if (structureArray != null) {
            for (int i = 0; i < structureArray.size(); i++) {
                if (structureArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + structureArray.get(i).getNodeType() + " for element: structure");
                }
                builder.structure(parseStructureMapStructure("structure", structureArray.get(i), i));
            }
        }
        ArrayNode importArray = getArrayNode(jsonNode, "import", true);
        if (importArray != null) {
            ArrayNode _importArray = getArrayNode(jsonNode, "_import");
            for (int i = 0; i < importArray.size(); i++) {
                builder._import((Canonical) parseUri(Canonical.builder(), "import", importArray.get(i), getJsonNode(_importArray, i), i));
            }
        }
        ArrayNode groupArray = getArrayNode(jsonNode, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                if (groupArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + groupArray.get(i).getNodeType() + " for element: group");
                }
                builder.group(parseStructureMapGroup("group", groupArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap.Group parseStructureMapGroup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.Group.class, jsonNode);
        }
        StructureMap.Group.Builder builder = StructureMap.Group.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name((Id) parseString(Id.builder(), "name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder._extends((Id) parseString(Id.builder(), "extends", getJsonNode(jsonNode, "extends", TextNode.class), jsonNode.get("_extends"), -1));
        builder.typeMode((StructureMapGroupTypeMode) parseString(StructureMapGroupTypeMode.builder(), "typeMode", getJsonNode(jsonNode, "typeMode", TextNode.class), jsonNode.get("_typeMode"), -1));
        builder.documentation(parseString("documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        ArrayNode inputArray = getArrayNode(jsonNode, "input");
        if (inputArray != null) {
            for (int i = 0; i < inputArray.size(); i++) {
                if (inputArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + inputArray.get(i).getNodeType() + " for element: input");
                }
                builder.input(parseStructureMapGroupInput("input", inputArray.get(i), i));
            }
        }
        ArrayNode ruleArray = getArrayNode(jsonNode, "rule");
        if (ruleArray != null) {
            for (int i = 0; i < ruleArray.size(); i++) {
                if (ruleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ruleArray.get(i).getNodeType() + " for element: rule");
                }
                builder.rule(parseStructureMapGroupRule("rule", ruleArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Input parseStructureMapGroupInput(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.Group.Input.class, jsonNode);
        }
        StructureMap.Group.Input.Builder builder = StructureMap.Group.Input.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name((Id) parseString(Id.builder(), "name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.type(parseString("type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.mode((StructureMapInputMode) parseString(StructureMapInputMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.documentation(parseString("documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule parseStructureMapGroupRule(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.class, jsonNode);
        }
        StructureMap.Group.Rule.Builder builder = StructureMap.Group.Rule.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name((Id) parseString(Id.builder(), "name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        ArrayNode sourceArray = getArrayNode(jsonNode, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                if (sourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sourceArray.get(i).getNodeType() + " for element: source");
                }
                builder.source(parseStructureMapGroupRuleSource("source", sourceArray.get(i), i));
            }
        }
        ArrayNode targetArray = getArrayNode(jsonNode, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                if (targetArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetArray.get(i).getNodeType() + " for element: target");
                }
                builder.target(parseStructureMapGroupRuleTarget("target", targetArray.get(i), i));
            }
        }
        ArrayNode ruleArray = getArrayNode(jsonNode, "rule");
        if (ruleArray != null) {
            for (int i = 0; i < ruleArray.size(); i++) {
                if (ruleArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ruleArray.get(i).getNodeType() + " for element: rule");
                }
                builder.rule(parseStructureMapGroupRule("rule", ruleArray.get(i), i));
            }
        }
        ArrayNode dependentArray = getArrayNode(jsonNode, "dependent");
        if (dependentArray != null) {
            for (int i = 0; i < dependentArray.size(); i++) {
                if (dependentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dependentArray.get(i).getNodeType() + " for element: dependent");
                }
                builder.dependent(parseStructureMapGroupRuleDependent("dependent", dependentArray.get(i), i));
            }
        }
        builder.documentation(parseString("documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule.Dependent parseStructureMapGroupRuleDependent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.Dependent.class, jsonNode);
        }
        StructureMap.Group.Rule.Dependent.Builder builder = StructureMap.Group.Rule.Dependent.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name((Id) parseString(Id.builder(), "name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        ArrayNode variableArray = getArrayNode(jsonNode, "variable", true);
        if (variableArray != null) {
            ArrayNode _variableArray = getArrayNode(jsonNode, "_variable");
            for (int i = 0; i < variableArray.size(); i++) {
                builder.variable(parseString("variable", variableArray.get(i), getJsonNode(_variableArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule.Source parseStructureMapGroupRuleSource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.Source.class, jsonNode);
        }
        StructureMap.Group.Rule.Source.Builder builder = StructureMap.Group.Rule.Source.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.context((Id) parseString(Id.builder(), "context", getJsonNode(jsonNode, "context", TextNode.class), jsonNode.get("_context"), -1));
        builder.min(parseInteger("min", getJsonNode(jsonNode, "min", NumericNode.class), jsonNode.get("_min"), -1));
        builder.max(parseString("max", getJsonNode(jsonNode, "max", TextNode.class), jsonNode.get("_max"), -1));
        builder.type(parseString("type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.defaultValue(parseChoiceElement("defaultValue", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        builder.element(parseString("element", getJsonNode(jsonNode, "element", TextNode.class), jsonNode.get("_element"), -1));
        builder.listMode((StructureMapSourceListMode) parseString(StructureMapSourceListMode.builder(), "listMode", getJsonNode(jsonNode, "listMode", TextNode.class), jsonNode.get("_listMode"), -1));
        builder.variable((Id) parseString(Id.builder(), "variable", getJsonNode(jsonNode, "variable", TextNode.class), jsonNode.get("_variable"), -1));
        builder.condition(parseString("condition", getJsonNode(jsonNode, "condition", TextNode.class), jsonNode.get("_condition"), -1));
        builder.check(parseString("check", getJsonNode(jsonNode, "check", TextNode.class), jsonNode.get("_check"), -1));
        builder.logMessage(parseString("logMessage", getJsonNode(jsonNode, "logMessage", TextNode.class), jsonNode.get("_logMessage"), -1));
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule.Target parseStructureMapGroupRuleTarget(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.Target.class, jsonNode);
        }
        StructureMap.Group.Rule.Target.Builder builder = StructureMap.Group.Rule.Target.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.context((Id) parseString(Id.builder(), "context", getJsonNode(jsonNode, "context", TextNode.class), jsonNode.get("_context"), -1));
        builder.contextType((StructureMapContextType) parseString(StructureMapContextType.builder(), "contextType", getJsonNode(jsonNode, "contextType", TextNode.class), jsonNode.get("_contextType"), -1));
        builder.element(parseString("element", getJsonNode(jsonNode, "element", TextNode.class), jsonNode.get("_element"), -1));
        builder.variable((Id) parseString(Id.builder(), "variable", getJsonNode(jsonNode, "variable", TextNode.class), jsonNode.get("_variable"), -1));
        ArrayNode listModeArray = getArrayNode(jsonNode, "listMode", true);
        if (listModeArray != null) {
            ArrayNode _listModeArray = getArrayNode(jsonNode, "_listMode");
            for (int i = 0; i < listModeArray.size(); i++) {
                builder.listMode((StructureMapTargetListMode) parseString(StructureMapTargetListMode.builder(), "listMode", listModeArray.get(i), getJsonNode(_listModeArray, i), i));
            }
        }
        builder.listRuleId((Id) parseString(Id.builder(), "listRuleId", getJsonNode(jsonNode, "listRuleId", TextNode.class), jsonNode.get("_listRuleId"), -1));
        builder.transform((StructureMapTransform) parseString(StructureMapTransform.builder(), "transform", getJsonNode(jsonNode, "transform", TextNode.class), jsonNode.get("_transform"), -1));
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseStructureMapGroupRuleTargetParameter("parameter", parameterArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule.Target.Parameter parseStructureMapGroupRuleTargetParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.Target.Parameter.class, jsonNode);
        }
        StructureMap.Group.Rule.Target.Parameter.Builder builder = StructureMap.Group.Rule.Target.Parameter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.value(parseChoiceElement("value", jsonNode, Id.class, String.class, Boolean.class, Integer.class, Decimal.class));
        stackPop();
        return builder.build();
    }

    private StructureMap.Structure parseStructureMapStructure(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(StructureMap.Structure.class, jsonNode);
        }
        StructureMap.Structure.Builder builder = StructureMap.Structure.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.url((Canonical) parseUri(Canonical.builder(), "url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.mode((StructureMapModelMode) parseString(StructureMapModelMode.builder(), "mode", getJsonNode(jsonNode, "mode", TextNode.class), jsonNode.get("_mode"), -1));
        builder.alias(parseString("alias", getJsonNode(jsonNode, "alias", TextNode.class), jsonNode.get("_alias"), -1));
        builder.documentation(parseString("documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private Subscription parseSubscription(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Subscription.class, jsonNode);
        }
        Subscription.Builder builder = Subscription.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.status((SubscriptionStatusCode) parseString(SubscriptionStatusCode.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactPoint("contact", contactArray.get(i), i));
            }
        }
        builder.end(parseInstant("end", getJsonNode(jsonNode, "end", TextNode.class), jsonNode.get("_end"), -1));
        builder.reason(parseString("reason", getJsonNode(jsonNode, "reason", TextNode.class), jsonNode.get("_reason"), -1));
        builder.criteria(parseString("criteria", getJsonNode(jsonNode, "criteria", TextNode.class), jsonNode.get("_criteria"), -1));
        builder.error(parseString("error", getJsonNode(jsonNode, "error", TextNode.class), jsonNode.get("_error"), -1));
        builder.channel(parseSubscriptionChannel("channel", getJsonNode(jsonNode, "channel", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Subscription.Channel parseSubscriptionChannel(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Subscription.Channel.class, jsonNode);
        }
        Subscription.Channel.Builder builder = Subscription.Channel.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((SubscriptionChannelType) parseString(SubscriptionChannelType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.endpoint((Url) parseUri(Url.builder(), "endpoint", getJsonNode(jsonNode, "endpoint", TextNode.class), jsonNode.get("_endpoint"), -1));
        builder.payload((Code) parseString(Code.builder(), "payload", getJsonNode(jsonNode, "payload", TextNode.class), jsonNode.get("_payload"), -1));
        ArrayNode headerArray = getArrayNode(jsonNode, "header", true);
        if (headerArray != null) {
            ArrayNode _headerArray = getArrayNode(jsonNode, "_header");
            for (int i = 0; i < headerArray.size(); i++) {
                builder.header(parseString("header", headerArray.get(i), getJsonNode(_headerArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubscriptionStatus parseSubscriptionStatus(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubscriptionStatus.class, jsonNode);
        }
        SubscriptionStatus.Builder builder = SubscriptionStatus.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.status((SubscriptionStatusCode) parseString(SubscriptionStatusCode.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.type((SubscriptionNotificationType) parseString(SubscriptionNotificationType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.eventsSinceSubscriptionStart(parseString("eventsSinceSubscriptionStart", getJsonNode(jsonNode, "eventsSinceSubscriptionStart", TextNode.class), jsonNode.get("_eventsSinceSubscriptionStart"), -1));
        ArrayNode notificationEventArray = getArrayNode(jsonNode, "notificationEvent");
        if (notificationEventArray != null) {
            for (int i = 0; i < notificationEventArray.size(); i++) {
                if (notificationEventArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + notificationEventArray.get(i).getNodeType() + " for element: notificationEvent");
                }
                builder.notificationEvent(parseSubscriptionStatusNotificationEvent("notificationEvent", notificationEventArray.get(i), i));
            }
        }
        builder.subscription(parseReference("subscription", getJsonNode(jsonNode, "subscription", JsonNode.class), -1));
        builder.topic((Canonical) parseUri(Canonical.builder(), "topic", getJsonNode(jsonNode, "topic", TextNode.class), jsonNode.get("_topic"), -1));
        ArrayNode errorArray = getArrayNode(jsonNode, "error");
        if (errorArray != null) {
            for (int i = 0; i < errorArray.size(); i++) {
                if (errorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + errorArray.get(i).getNodeType() + " for element: error");
                }
                builder.error(parseCodeableConcept("error", errorArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubscriptionStatus.NotificationEvent parseSubscriptionStatusNotificationEvent(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubscriptionStatus.NotificationEvent.class, jsonNode);
        }
        SubscriptionStatus.NotificationEvent.Builder builder = SubscriptionStatus.NotificationEvent.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.eventNumber(parseString("eventNumber", getJsonNode(jsonNode, "eventNumber", TextNode.class), jsonNode.get("_eventNumber"), -1));
        builder.timestamp(parseInstant("timestamp", getJsonNode(jsonNode, "timestamp", TextNode.class), jsonNode.get("_timestamp"), -1));
        builder.focus(parseReference("focus", getJsonNode(jsonNode, "focus", JsonNode.class), -1));
        ArrayNode additionalContextArray = getArrayNode(jsonNode, "additionalContext");
        if (additionalContextArray != null) {
            for (int i = 0; i < additionalContextArray.size(); i++) {
                if (additionalContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + additionalContextArray.get(i).getNodeType() + " for element: additionalContext");
                }
                builder.additionalContext(parseReference("additionalContext", additionalContextArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubscriptionTopic parseSubscriptionTopic(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubscriptionTopic.class, jsonNode);
        }
        SubscriptionTopic.Builder builder = SubscriptionTopic.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        ArrayNode derivedFromArray = getArrayNode(jsonNode, "derivedFrom", true);
        if (derivedFromArray != null) {
            ArrayNode _derivedFromArray = getArrayNode(jsonNode, "_derivedFrom");
            for (int i = 0; i < derivedFromArray.size(); i++) {
                builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", derivedFromArray.get(i), getJsonNode(_derivedFromArray, i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonNode(jsonNode, "approvalDate", TextNode.class), jsonNode.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonNode(jsonNode, "lastReviewDate", TextNode.class), jsonNode.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonNode(jsonNode, "effectivePeriod", JsonNode.class), -1));
        ArrayNode resourceTriggerArray = getArrayNode(jsonNode, "resourceTrigger");
        if (resourceTriggerArray != null) {
            for (int i = 0; i < resourceTriggerArray.size(); i++) {
                if (resourceTriggerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + resourceTriggerArray.get(i).getNodeType() + " for element: resourceTrigger");
                }
                builder.resourceTrigger(parseSubscriptionTopicResourceTrigger("resourceTrigger", resourceTriggerArray.get(i), i));
            }
        }
        ArrayNode eventTriggerArray = getArrayNode(jsonNode, "eventTrigger");
        if (eventTriggerArray != null) {
            for (int i = 0; i < eventTriggerArray.size(); i++) {
                if (eventTriggerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + eventTriggerArray.get(i).getNodeType() + " for element: eventTrigger");
                }
                builder.eventTrigger(parseSubscriptionTopicEventTrigger("eventTrigger", eventTriggerArray.get(i), i));
            }
        }
        ArrayNode canFilterByArray = getArrayNode(jsonNode, "canFilterBy");
        if (canFilterByArray != null) {
            for (int i = 0; i < canFilterByArray.size(); i++) {
                if (canFilterByArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + canFilterByArray.get(i).getNodeType() + " for element: canFilterBy");
                }
                builder.canFilterBy(parseSubscriptionTopicCanFilterBy("canFilterBy", canFilterByArray.get(i), i));
            }
        }
        ArrayNode notificationShapeArray = getArrayNode(jsonNode, "notificationShape");
        if (notificationShapeArray != null) {
            for (int i = 0; i < notificationShapeArray.size(); i++) {
                if (notificationShapeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + notificationShapeArray.get(i).getNodeType() + " for element: notificationShape");
                }
                builder.notificationShape(parseSubscriptionTopicNotificationShape("notificationShape", notificationShapeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubscriptionTopic.CanFilterBy parseSubscriptionTopicCanFilterBy(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubscriptionTopic.CanFilterBy.class, jsonNode);
        }
        SubscriptionTopic.CanFilterBy.Builder builder = SubscriptionTopic.CanFilterBy.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.resource(parseUri("resource", getJsonNode(jsonNode, "resource", TextNode.class), jsonNode.get("_resource"), -1));
        builder.filterParameter(parseString("filterParameter", getJsonNode(jsonNode, "filterParameter", TextNode.class), jsonNode.get("_filterParameter"), -1));
        builder.filterDefinition(parseUri("filterDefinition", getJsonNode(jsonNode, "filterDefinition", TextNode.class), jsonNode.get("_filterDefinition"), -1));
        ArrayNode modifierArray = getArrayNode(jsonNode, "modifier", true);
        if (modifierArray != null) {
            ArrayNode _modifierArray = getArrayNode(jsonNode, "_modifier");
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier((SubscriptionTopicFilterBySearchModifier) parseString(SubscriptionTopicFilterBySearchModifier.builder(), "modifier", modifierArray.get(i), getJsonNode(_modifierArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubscriptionTopic.EventTrigger parseSubscriptionTopicEventTrigger(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubscriptionTopic.EventTrigger.class, jsonNode);
        }
        SubscriptionTopic.EventTrigger.Builder builder = SubscriptionTopic.EventTrigger.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.event(parseCodeableConcept("event", getJsonNode(jsonNode, "event", JsonNode.class), -1));
        builder.resource(parseUri("resource", getJsonNode(jsonNode, "resource", TextNode.class), jsonNode.get("_resource"), -1));
        stackPop();
        return builder.build();
    }

    private SubscriptionTopic.NotificationShape parseSubscriptionTopicNotificationShape(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubscriptionTopic.NotificationShape.class, jsonNode);
        }
        SubscriptionTopic.NotificationShape.Builder builder = SubscriptionTopic.NotificationShape.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.resource(parseUri("resource", getJsonNode(jsonNode, "resource", TextNode.class), jsonNode.get("_resource"), -1));
        ArrayNode includeArray = getArrayNode(jsonNode, "include", true);
        if (includeArray != null) {
            ArrayNode _includeArray = getArrayNode(jsonNode, "_include");
            for (int i = 0; i < includeArray.size(); i++) {
                builder.include(parseString("include", includeArray.get(i), getJsonNode(_includeArray, i), i));
            }
        }
        ArrayNode revIncludeArray = getArrayNode(jsonNode, "revInclude", true);
        if (revIncludeArray != null) {
            ArrayNode _revIncludeArray = getArrayNode(jsonNode, "_revInclude");
            for (int i = 0; i < revIncludeArray.size(); i++) {
                builder.revInclude(parseString("revInclude", revIncludeArray.get(i), getJsonNode(_revIncludeArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubscriptionTopic.ResourceTrigger parseSubscriptionTopicResourceTrigger(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubscriptionTopic.ResourceTrigger.class, jsonNode);
        }
        SubscriptionTopic.ResourceTrigger.Builder builder = SubscriptionTopic.ResourceTrigger.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.resource(parseUri("resource", getJsonNode(jsonNode, "resource", TextNode.class), jsonNode.get("_resource"), -1));
        ArrayNode supportedInteractionArray = getArrayNode(jsonNode, "supportedInteraction", true);
        if (supportedInteractionArray != null) {
            ArrayNode _supportedInteractionArray = getArrayNode(jsonNode, "_supportedInteraction");
            for (int i = 0; i < supportedInteractionArray.size(); i++) {
                builder.supportedInteraction((MethodCode) parseString(MethodCode.builder(), "supportedInteraction", supportedInteractionArray.get(i), getJsonNode(_supportedInteractionArray, i), i));
            }
        }
        builder.queryCriteria(parseSubscriptionTopicResourceTriggerQueryCriteria("queryCriteria", getJsonNode(jsonNode, "queryCriteria", JsonNode.class), -1));
        builder.fhirPathCriteria(parseString("fhirPathCriteria", getJsonNode(jsonNode, "fhirPathCriteria", TextNode.class), jsonNode.get("_fhirPathCriteria"), -1));
        stackPop();
        return builder.build();
    }

    private SubscriptionTopic.ResourceTrigger.QueryCriteria parseSubscriptionTopicResourceTriggerQueryCriteria(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubscriptionTopic.ResourceTrigger.QueryCriteria.class, jsonNode);
        }
        SubscriptionTopic.ResourceTrigger.QueryCriteria.Builder builder = SubscriptionTopic.ResourceTrigger.QueryCriteria.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.previous(parseString("previous", getJsonNode(jsonNode, "previous", TextNode.class), jsonNode.get("_previous"), -1));
        builder.resultForCreate((CriteriaNotExistsBehavior) parseString(CriteriaNotExistsBehavior.builder(), "resultForCreate", getJsonNode(jsonNode, "resultForCreate", TextNode.class), jsonNode.get("_resultForCreate"), -1));
        builder.current(parseString("current", getJsonNode(jsonNode, "current", TextNode.class), jsonNode.get("_current"), -1));
        builder.resultForDelete((CriteriaNotExistsBehavior) parseString(CriteriaNotExistsBehavior.builder(), "resultForDelete", getJsonNode(jsonNode, "resultForDelete", TextNode.class), jsonNode.get("_resultForDelete"), -1));
        builder.requireBoth(parseBoolean("requireBoth", getJsonNode(jsonNode, "requireBoth", JsonNode.class), jsonNode.get("_requireBoth"), -1));
        stackPop();
        return builder.build();
    }

    private Substance parseSubstance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Substance.class, jsonNode);
        }
        Substance.Builder builder = Substance.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((FHIRSubstanceStatus) parseString(FHIRSubstanceStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        ArrayNode categoryArray = getArrayNode(jsonNode, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                if (categoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + categoryArray.get(i).getNodeType() + " for element: category");
                }
                builder.category(parseCodeableConcept("category", categoryArray.get(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode instanceArray = getArrayNode(jsonNode, "instance");
        if (instanceArray != null) {
            for (int i = 0; i < instanceArray.size(); i++) {
                if (instanceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + instanceArray.get(i).getNodeType() + " for element: instance");
                }
                builder.instance(parseSubstanceInstance("instance", instanceArray.get(i), i));
            }
        }
        ArrayNode ingredientArray = getArrayNode(jsonNode, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                if (ingredientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + ingredientArray.get(i).getNodeType() + " for element: ingredient");
                }
                builder.ingredient(parseSubstanceIngredient("ingredient", ingredientArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Substance.Ingredient parseSubstanceIngredient(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Substance.Ingredient.class, jsonNode);
        }
        Substance.Ingredient.Builder builder = Substance.Ingredient.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.quantity(parseRatio("quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.substance(parseChoiceElement("substance", jsonNode, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Substance.Instance parseSubstanceInstance(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Substance.Instance.class, jsonNode);
        }
        Substance.Instance.Builder builder = Substance.Instance.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.expiry(parseDateTime("expiry", getJsonNode(jsonNode, "expiry", TextNode.class), jsonNode.get("_expiry"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition parseSubstanceDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.class, jsonNode);
        }
        SubstanceDefinition.Builder builder = SubstanceDefinition.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        ArrayNode classificationArray = getArrayNode(jsonNode, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                if (classificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + classificationArray.get(i).getNodeType() + " for element: classification");
                }
                builder.classification(parseCodeableConcept("classification", classificationArray.get(i), i));
            }
        }
        builder.domain(parseCodeableConcept("domain", getJsonNode(jsonNode, "domain", JsonNode.class), -1));
        ArrayNode gradeArray = getArrayNode(jsonNode, "grade");
        if (gradeArray != null) {
            for (int i = 0; i < gradeArray.size(); i++) {
                if (gradeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + gradeArray.get(i).getNodeType() + " for element: grade");
                }
                builder.grade(parseCodeableConcept("grade", gradeArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode informationSourceArray = getArrayNode(jsonNode, "informationSource");
        if (informationSourceArray != null) {
            for (int i = 0; i < informationSourceArray.size(); i++) {
                if (informationSourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + informationSourceArray.get(i).getNodeType() + " for element: informationSource");
                }
                builder.informationSource(parseReference("informationSource", informationSourceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode manufacturerArray = getArrayNode(jsonNode, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                if (manufacturerArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + manufacturerArray.get(i).getNodeType() + " for element: manufacturer");
                }
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.get(i), i));
            }
        }
        ArrayNode supplierArray = getArrayNode(jsonNode, "supplier");
        if (supplierArray != null) {
            for (int i = 0; i < supplierArray.size(); i++) {
                if (supplierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supplierArray.get(i).getNodeType() + " for element: supplier");
                }
                builder.supplier(parseReference("supplier", supplierArray.get(i), i));
            }
        }
        ArrayNode moietyArray = getArrayNode(jsonNode, "moiety");
        if (moietyArray != null) {
            for (int i = 0; i < moietyArray.size(); i++) {
                if (moietyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + moietyArray.get(i).getNodeType() + " for element: moiety");
                }
                builder.moiety(parseSubstanceDefinitionMoiety("moiety", moietyArray.get(i), i));
            }
        }
        ArrayNode propertyArray = getArrayNode(jsonNode, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                if (propertyArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + propertyArray.get(i).getNodeType() + " for element: property");
                }
                builder.property(parseSubstanceDefinitionProperty("property", propertyArray.get(i), i));
            }
        }
        ArrayNode molecularWeightArray = getArrayNode(jsonNode, "molecularWeight");
        if (molecularWeightArray != null) {
            for (int i = 0; i < molecularWeightArray.size(); i++) {
                if (molecularWeightArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + molecularWeightArray.get(i).getNodeType() + " for element: molecularWeight");
                }
                builder.molecularWeight(parseSubstanceDefinitionMolecularWeight("molecularWeight", molecularWeightArray.get(i), i));
            }
        }
        builder.structure(parseSubstanceDefinitionStructure("structure", getJsonNode(jsonNode, "structure", JsonNode.class), -1));
        ArrayNode codeArray = getArrayNode(jsonNode, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                if (codeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeArray.get(i).getNodeType() + " for element: code");
                }
                builder.code(parseSubstanceDefinitionCode("code", codeArray.get(i), i));
            }
        }
        ArrayNode nameArray = getArrayNode(jsonNode, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                if (nameArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + nameArray.get(i).getNodeType() + " for element: name");
                }
                builder.name(parseSubstanceDefinitionName("name", nameArray.get(i), i));
            }
        }
        ArrayNode relationshipArray = getArrayNode(jsonNode, "relationship");
        if (relationshipArray != null) {
            for (int i = 0; i < relationshipArray.size(); i++) {
                if (relationshipArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relationshipArray.get(i).getNodeType() + " for element: relationship");
                }
                builder.relationship(parseSubstanceDefinitionRelationship("relationship", relationshipArray.get(i), i));
            }
        }
        builder.sourceMaterial(parseSubstanceDefinitionSourceMaterial("sourceMaterial", getJsonNode(jsonNode, "sourceMaterial", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.Code parseSubstanceDefinitionCode(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.Code.class, jsonNode);
        }
        SubstanceDefinition.Code.Builder builder = SubstanceDefinition.Code.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.statusDate(parseDateTime("statusDate", getJsonNode(jsonNode, "statusDate", TextNode.class), jsonNode.get("_statusDate"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode sourceArray = getArrayNode(jsonNode, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                if (sourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sourceArray.get(i).getNodeType() + " for element: source");
                }
                builder.source(parseReference("source", sourceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.Moiety parseSubstanceDefinitionMoiety(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.Moiety.class, jsonNode);
        }
        SubstanceDefinition.Moiety.Builder builder = SubstanceDefinition.Moiety.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.role(parseCodeableConcept("role", getJsonNode(jsonNode, "role", JsonNode.class), -1));
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.stereochemistry(parseCodeableConcept("stereochemistry", getJsonNode(jsonNode, "stereochemistry", JsonNode.class), -1));
        builder.opticalActivity(parseCodeableConcept("opticalActivity", getJsonNode(jsonNode, "opticalActivity", JsonNode.class), -1));
        builder.molecularFormula(parseString("molecularFormula", getJsonNode(jsonNode, "molecularFormula", TextNode.class), jsonNode.get("_molecularFormula"), -1));
        builder.amount(parseChoiceElement("amount", jsonNode, Quantity.class, String.class));
        builder.measurementType(parseCodeableConcept("measurementType", getJsonNode(jsonNode, "measurementType", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.MolecularWeight parseSubstanceDefinitionMolecularWeight(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.MolecularWeight.class, jsonNode);
        }
        SubstanceDefinition.MolecularWeight.Builder builder = SubstanceDefinition.MolecularWeight.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.method(parseCodeableConcept("method", getJsonNode(jsonNode, "method", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.amount(parseQuantity("amount", getJsonNode(jsonNode, "amount", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.Name parseSubstanceDefinitionName(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.Name.class, jsonNode);
        }
        SubstanceDefinition.Name.Builder builder = SubstanceDefinition.Name.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.preferred(parseBoolean("preferred", getJsonNode(jsonNode, "preferred", JsonNode.class), jsonNode.get("_preferred"), -1));
        ArrayNode languageArray = getArrayNode(jsonNode, "language");
        if (languageArray != null) {
            for (int i = 0; i < languageArray.size(); i++) {
                if (languageArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + languageArray.get(i).getNodeType() + " for element: language");
                }
                builder.language(parseCodeableConcept("language", languageArray.get(i), i));
            }
        }
        ArrayNode domainArray = getArrayNode(jsonNode, "domain");
        if (domainArray != null) {
            for (int i = 0; i < domainArray.size(); i++) {
                if (domainArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + domainArray.get(i).getNodeType() + " for element: domain");
                }
                builder.domain(parseCodeableConcept("domain", domainArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        ArrayNode synonymArray = getArrayNode(jsonNode, "synonym");
        if (synonymArray != null) {
            for (int i = 0; i < synonymArray.size(); i++) {
                if (synonymArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + synonymArray.get(i).getNodeType() + " for element: synonym");
                }
                builder.synonym(parseSubstanceDefinitionName("synonym", synonymArray.get(i), i));
            }
        }
        ArrayNode translationArray = getArrayNode(jsonNode, "translation");
        if (translationArray != null) {
            for (int i = 0; i < translationArray.size(); i++) {
                if (translationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + translationArray.get(i).getNodeType() + " for element: translation");
                }
                builder.translation(parseSubstanceDefinitionName("translation", translationArray.get(i), i));
            }
        }
        ArrayNode officialArray = getArrayNode(jsonNode, "official");
        if (officialArray != null) {
            for (int i = 0; i < officialArray.size(); i++) {
                if (officialArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + officialArray.get(i).getNodeType() + " for element: official");
                }
                builder.official(parseSubstanceDefinitionNameOfficial("official", officialArray.get(i), i));
            }
        }
        ArrayNode sourceArray = getArrayNode(jsonNode, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                if (sourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sourceArray.get(i).getNodeType() + " for element: source");
                }
                builder.source(parseReference("source", sourceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.Name.Official parseSubstanceDefinitionNameOfficial(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.Name.Official.class, jsonNode);
        }
        SubstanceDefinition.Name.Official.Builder builder = SubstanceDefinition.Name.Official.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.authority(parseCodeableConcept("authority", getJsonNode(jsonNode, "authority", JsonNode.class), -1));
        builder.status(parseCodeableConcept("status", getJsonNode(jsonNode, "status", JsonNode.class), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.Property parseSubstanceDefinitionProperty(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.Property.class, jsonNode);
        }
        SubstanceDefinition.Property.Builder builder = SubstanceDefinition.Property.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Date.class, Boolean.class, Attachment.class));
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.Relationship parseSubstanceDefinitionRelationship(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.Relationship.class, jsonNode);
        }
        SubstanceDefinition.Relationship.Builder builder = SubstanceDefinition.Relationship.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.substanceDefinition(parseChoiceElement("substanceDefinition", jsonNode, Reference.class, CodeableConcept.class));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.isDefining(parseBoolean("isDefining", getJsonNode(jsonNode, "isDefining", JsonNode.class), jsonNode.get("_isDefining"), -1));
        builder.amount(parseChoiceElement("amount", jsonNode, Quantity.class, Ratio.class, String.class));
        builder.ratioHighLimitAmount(parseRatio("ratioHighLimitAmount", getJsonNode(jsonNode, "ratioHighLimitAmount", JsonNode.class), -1));
        builder.comparator(parseCodeableConcept("comparator", getJsonNode(jsonNode, "comparator", JsonNode.class), -1));
        ArrayNode sourceArray = getArrayNode(jsonNode, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                if (sourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sourceArray.get(i).getNodeType() + " for element: source");
                }
                builder.source(parseReference("source", sourceArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.SourceMaterial parseSubstanceDefinitionSourceMaterial(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.SourceMaterial.class, jsonNode);
        }
        SubstanceDefinition.SourceMaterial.Builder builder = SubstanceDefinition.SourceMaterial.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.genus(parseCodeableConcept("genus", getJsonNode(jsonNode, "genus", JsonNode.class), -1));
        builder.species(parseCodeableConcept("species", getJsonNode(jsonNode, "species", JsonNode.class), -1));
        builder.part(parseCodeableConcept("part", getJsonNode(jsonNode, "part", JsonNode.class), -1));
        ArrayNode countryOfOriginArray = getArrayNode(jsonNode, "countryOfOrigin");
        if (countryOfOriginArray != null) {
            for (int i = 0; i < countryOfOriginArray.size(); i++) {
                if (countryOfOriginArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + countryOfOriginArray.get(i).getNodeType() + " for element: countryOfOrigin");
                }
                builder.countryOfOrigin(parseCodeableConcept("countryOfOrigin", countryOfOriginArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.Structure parseSubstanceDefinitionStructure(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.Structure.class, jsonNode);
        }
        SubstanceDefinition.Structure.Builder builder = SubstanceDefinition.Structure.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.stereochemistry(parseCodeableConcept("stereochemistry", getJsonNode(jsonNode, "stereochemistry", JsonNode.class), -1));
        builder.opticalActivity(parseCodeableConcept("opticalActivity", getJsonNode(jsonNode, "opticalActivity", JsonNode.class), -1));
        builder.molecularFormula(parseString("molecularFormula", getJsonNode(jsonNode, "molecularFormula", TextNode.class), jsonNode.get("_molecularFormula"), -1));
        builder.molecularFormulaByMoiety(parseString("molecularFormulaByMoiety", getJsonNode(jsonNode, "molecularFormulaByMoiety", TextNode.class), jsonNode.get("_molecularFormulaByMoiety"), -1));
        builder.molecularWeight(parseSubstanceDefinitionMolecularWeight("molecularWeight", getJsonNode(jsonNode, "molecularWeight", JsonNode.class), -1));
        ArrayNode techniqueArray = getArrayNode(jsonNode, "technique");
        if (techniqueArray != null) {
            for (int i = 0; i < techniqueArray.size(); i++) {
                if (techniqueArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + techniqueArray.get(i).getNodeType() + " for element: technique");
                }
                builder.technique(parseCodeableConcept("technique", techniqueArray.get(i), i));
            }
        }
        ArrayNode sourceDocumentArray = getArrayNode(jsonNode, "sourceDocument");
        if (sourceDocumentArray != null) {
            for (int i = 0; i < sourceDocumentArray.size(); i++) {
                if (sourceDocumentArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + sourceDocumentArray.get(i).getNodeType() + " for element: sourceDocument");
                }
                builder.sourceDocument(parseReference("sourceDocument", sourceDocumentArray.get(i), i));
            }
        }
        ArrayNode representationArray = getArrayNode(jsonNode, "representation");
        if (representationArray != null) {
            for (int i = 0; i < representationArray.size(); i++) {
                if (representationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + representationArray.get(i).getNodeType() + " for element: representation");
                }
                builder.representation(parseSubstanceDefinitionStructureRepresentation("representation", representationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceDefinition.Structure.Representation parseSubstanceDefinitionStructureRepresentation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SubstanceDefinition.Structure.Representation.class, jsonNode);
        }
        SubstanceDefinition.Structure.Representation.Builder builder = SubstanceDefinition.Structure.Representation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.representation(parseString("representation", getJsonNode(jsonNode, "representation", TextNode.class), jsonNode.get("_representation"), -1));
        builder.format(parseCodeableConcept("format", getJsonNode(jsonNode, "format", JsonNode.class), -1));
        builder.document(parseReference("document", getJsonNode(jsonNode, "document", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private SupplyDelivery parseSupplyDelivery(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SupplyDelivery.class, jsonNode);
        }
        SupplyDelivery.Builder builder = SupplyDelivery.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((SupplyDeliveryStatus) parseString(SupplyDeliveryStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.suppliedItem(parseSupplyDeliverySuppliedItem("suppliedItem", getJsonNode(jsonNode, "suppliedItem", JsonNode.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, Period.class, Timing.class));
        builder.supplier(parseReference("supplier", getJsonNode(jsonNode, "supplier", JsonNode.class), -1));
        builder.destination(parseReference("destination", getJsonNode(jsonNode, "destination", JsonNode.class), -1));
        ArrayNode receiverArray = getArrayNode(jsonNode, "receiver");
        if (receiverArray != null) {
            for (int i = 0; i < receiverArray.size(); i++) {
                if (receiverArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + receiverArray.get(i).getNodeType() + " for element: receiver");
                }
                builder.receiver(parseReference("receiver", receiverArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SupplyDelivery.SuppliedItem parseSupplyDeliverySuppliedItem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SupplyDelivery.SuppliedItem.class, jsonNode);
        }
        SupplyDelivery.SuppliedItem.Builder builder = SupplyDelivery.SuppliedItem.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        builder.item(parseChoiceElement("item", jsonNode, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private SupplyRequest parseSupplyRequest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SupplyRequest.class, jsonNode);
        }
        SupplyRequest.Builder builder = SupplyRequest.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((SupplyRequestStatus) parseString(SupplyRequestStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.category(parseCodeableConcept("category", getJsonNode(jsonNode, "category", JsonNode.class), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        builder.item(parseChoiceElement("item", jsonNode, CodeableConcept.class, Reference.class));
        builder.quantity(parseQuantity("quantity", getJsonNode(jsonNode, "quantity", JsonNode.class), -1));
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseSupplyRequestParameter("parameter", parameterArray.get(i), i));
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonNode, DateTime.class, Period.class, Timing.class));
        builder.authoredOn(parseDateTime("authoredOn", getJsonNode(jsonNode, "authoredOn", TextNode.class), jsonNode.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonNode(jsonNode, "requester", JsonNode.class), -1));
        ArrayNode supplierArray = getArrayNode(jsonNode, "supplier");
        if (supplierArray != null) {
            for (int i = 0; i < supplierArray.size(); i++) {
                if (supplierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + supplierArray.get(i).getNodeType() + " for element: supplier");
                }
                builder.supplier(parseReference("supplier", supplierArray.get(i), i));
            }
        }
        ArrayNode reasonCodeArray = getArrayNode(jsonNode, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                if (reasonCodeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonCodeArray.get(i).getNodeType() + " for element: reasonCode");
                }
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.get(i), i));
            }
        }
        ArrayNode reasonReferenceArray = getArrayNode(jsonNode, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                if (reasonReferenceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + reasonReferenceArray.get(i).getNodeType() + " for element: reasonReference");
                }
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.get(i), i));
            }
        }
        builder.deliverFrom(parseReference("deliverFrom", getJsonNode(jsonNode, "deliverFrom", JsonNode.class), -1));
        builder.deliverTo(parseReference("deliverTo", getJsonNode(jsonNode, "deliverTo", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private SupplyRequest.Parameter parseSupplyRequestParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(SupplyRequest.Parameter.class, jsonNode);
        }
        SupplyRequest.Parameter.Builder builder = SupplyRequest.Parameter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Range.class, Boolean.class));
        stackPop();
        return builder.build();
    }

    private Task parseTask(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Task.class, jsonNode);
        }
        Task.Builder builder = Task.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", getJsonNode(jsonNode, "instantiatesCanonical", TextNode.class), jsonNode.get("_instantiatesCanonical"), -1));
        builder.instantiatesUri(parseUri("instantiatesUri", getJsonNode(jsonNode, "instantiatesUri", TextNode.class), jsonNode.get("_instantiatesUri"), -1));
        ArrayNode basedOnArray = getArrayNode(jsonNode, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                if (basedOnArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + basedOnArray.get(i).getNodeType() + " for element: basedOn");
                }
                builder.basedOn(parseReference("basedOn", basedOnArray.get(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonNode(jsonNode, "groupIdentifier", JsonNode.class), -1));
        ArrayNode partOfArray = getArrayNode(jsonNode, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                if (partOfArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + partOfArray.get(i).getNodeType() + " for element: partOf");
                }
                builder.partOf(parseReference("partOf", partOfArray.get(i), i));
            }
        }
        builder.status((TaskStatus) parseString(TaskStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonNode(jsonNode, "statusReason", JsonNode.class), -1));
        builder.businessStatus(parseCodeableConcept("businessStatus", getJsonNode(jsonNode, "businessStatus", JsonNode.class), -1));
        builder.intent((TaskIntent) parseString(TaskIntent.builder(), "intent", getJsonNode(jsonNode, "intent", TextNode.class), jsonNode.get("_intent"), -1));
        builder.priority((TaskPriority) parseString(TaskPriority.builder(), "priority", getJsonNode(jsonNode, "priority", TextNode.class), jsonNode.get("_priority"), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.focus(parseReference("focus", getJsonNode(jsonNode, "focus", JsonNode.class), -1));
        builder._for(parseReference("for", getJsonNode(jsonNode, "for", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.executionPeriod(parsePeriod("executionPeriod", getJsonNode(jsonNode, "executionPeriod", JsonNode.class), -1));
        builder.authoredOn(parseDateTime("authoredOn", getJsonNode(jsonNode, "authoredOn", TextNode.class), jsonNode.get("_authoredOn"), -1));
        builder.lastModified(parseDateTime("lastModified", getJsonNode(jsonNode, "lastModified", TextNode.class), jsonNode.get("_lastModified"), -1));
        builder.requester(parseReference("requester", getJsonNode(jsonNode, "requester", JsonNode.class), -1));
        ArrayNode performerTypeArray = getArrayNode(jsonNode, "performerType");
        if (performerTypeArray != null) {
            for (int i = 0; i < performerTypeArray.size(); i++) {
                if (performerTypeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + performerTypeArray.get(i).getNodeType() + " for element: performerType");
                }
                builder.performerType(parseCodeableConcept("performerType", performerTypeArray.get(i), i));
            }
        }
        builder.owner(parseReference("owner", getJsonNode(jsonNode, "owner", JsonNode.class), -1));
        builder.location(parseReference("location", getJsonNode(jsonNode, "location", JsonNode.class), -1));
        builder.reasonCode(parseCodeableConcept("reasonCode", getJsonNode(jsonNode, "reasonCode", JsonNode.class), -1));
        builder.reasonReference(parseReference("reasonReference", getJsonNode(jsonNode, "reasonReference", JsonNode.class), -1));
        ArrayNode insuranceArray = getArrayNode(jsonNode, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                if (insuranceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + insuranceArray.get(i).getNodeType() + " for element: insurance");
                }
                builder.insurance(parseReference("insurance", insuranceArray.get(i), i));
            }
        }
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        ArrayNode relevantHistoryArray = getArrayNode(jsonNode, "relevantHistory");
        if (relevantHistoryArray != null) {
            for (int i = 0; i < relevantHistoryArray.size(); i++) {
                if (relevantHistoryArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + relevantHistoryArray.get(i).getNodeType() + " for element: relevantHistory");
                }
                builder.relevantHistory(parseReference("relevantHistory", relevantHistoryArray.get(i), i));
            }
        }
        builder.restriction(parseTaskRestriction("restriction", getJsonNode(jsonNode, "restriction", JsonNode.class), -1));
        ArrayNode inputArray = getArrayNode(jsonNode, "input");
        if (inputArray != null) {
            for (int i = 0; i < inputArray.size(); i++) {
                if (inputArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + inputArray.get(i).getNodeType() + " for element: input");
                }
                builder.input(parseTaskInput("input", inputArray.get(i), i));
            }
        }
        ArrayNode outputArray = getArrayNode(jsonNode, "output");
        if (outputArray != null) {
            for (int i = 0; i < outputArray.size(); i++) {
                if (outputArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + outputArray.get(i).getNodeType() + " for element: output");
                }
                builder.output(parseTaskOutput("output", outputArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Task.Input parseTaskInput(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Task.Input.class, jsonNode);
        }
        Task.Input.Builder builder = Task.Input.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        stackPop();
        return builder.build();
    }

    private Task.Output parseTaskOutput(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Task.Output.class, jsonNode);
        }
        Task.Output.Builder builder = Task.Output.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCodeableConcept("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        stackPop();
        return builder.build();
    }

    private Task.Restriction parseTaskRestriction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Task.Restriction.class, jsonNode);
        }
        Task.Restriction.Builder builder = Task.Restriction.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.repetitions((PositiveInt) parseInteger(PositiveInt.builder(), "repetitions", getJsonNode(jsonNode, "repetitions", NumericNode.class), jsonNode.get("_repetitions"), -1));
        builder.period(parsePeriod("period", getJsonNode(jsonNode, "period", JsonNode.class), -1));
        ArrayNode recipientArray = getArrayNode(jsonNode, "recipient");
        if (recipientArray != null) {
            for (int i = 0; i < recipientArray.size(); i++) {
                if (recipientArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + recipientArray.get(i).getNodeType() + " for element: recipient");
                }
                builder.recipient(parseReference("recipient", recipientArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities parseTerminologyCapabilities(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.class, jsonNode);
        }
        TerminologyCapabilities.Builder builder = TerminologyCapabilities.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.kind((CapabilityStatementKind) parseString(CapabilityStatementKind.builder(), "kind", getJsonNode(jsonNode, "kind", TextNode.class), jsonNode.get("_kind"), -1));
        builder.software(parseTerminologyCapabilitiesSoftware("software", getJsonNode(jsonNode, "software", JsonNode.class), -1));
        builder.implementation(parseTerminologyCapabilitiesImplementation("implementation", getJsonNode(jsonNode, "implementation", JsonNode.class), -1));
        builder.lockedDate(parseBoolean("lockedDate", getJsonNode(jsonNode, "lockedDate", JsonNode.class), jsonNode.get("_lockedDate"), -1));
        ArrayNode codeSystemArray = getArrayNode(jsonNode, "codeSystem");
        if (codeSystemArray != null) {
            for (int i = 0; i < codeSystemArray.size(); i++) {
                if (codeSystemArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + codeSystemArray.get(i).getNodeType() + " for element: codeSystem");
                }
                builder.codeSystem(parseTerminologyCapabilitiesCodeSystem("codeSystem", codeSystemArray.get(i), i));
            }
        }
        builder.expansion(parseTerminologyCapabilitiesExpansion("expansion", getJsonNode(jsonNode, "expansion", JsonNode.class), -1));
        builder.codeSearch((CodeSearchSupport) parseString(CodeSearchSupport.builder(), "codeSearch", getJsonNode(jsonNode, "codeSearch", TextNode.class), jsonNode.get("_codeSearch"), -1));
        builder.validateCode(parseTerminologyCapabilitiesValidateCode("validateCode", getJsonNode(jsonNode, "validateCode", JsonNode.class), -1));
        builder.translation(parseTerminologyCapabilitiesTranslation("translation", getJsonNode(jsonNode, "translation", JsonNode.class), -1));
        builder.closure(parseTerminologyCapabilitiesClosure("closure", getJsonNode(jsonNode, "closure", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Closure parseTerminologyCapabilitiesClosure(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.Closure.class, jsonNode);
        }
        TerminologyCapabilities.Closure.Builder builder = TerminologyCapabilities.Closure.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.translation(parseBoolean("translation", getJsonNode(jsonNode, "translation", JsonNode.class), jsonNode.get("_translation"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.CodeSystem parseTerminologyCapabilitiesCodeSystem(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.CodeSystem.class, jsonNode);
        }
        TerminologyCapabilities.CodeSystem.Builder builder = TerminologyCapabilities.CodeSystem.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.uri((Canonical) parseUri(Canonical.builder(), "uri", getJsonNode(jsonNode, "uri", TextNode.class), jsonNode.get("_uri"), -1));
        ArrayNode versionArray = getArrayNode(jsonNode, "version");
        if (versionArray != null) {
            for (int i = 0; i < versionArray.size(); i++) {
                if (versionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + versionArray.get(i).getNodeType() + " for element: version");
                }
                builder.version(parseTerminologyCapabilitiesCodeSystemVersion("version", versionArray.get(i), i));
            }
        }
        builder.subsumption(parseBoolean("subsumption", getJsonNode(jsonNode, "subsumption", JsonNode.class), jsonNode.get("_subsumption"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.CodeSystem.Version parseTerminologyCapabilitiesCodeSystemVersion(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.CodeSystem.Version.class, jsonNode);
        }
        TerminologyCapabilities.CodeSystem.Version.Builder builder = TerminologyCapabilities.CodeSystem.Version.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code(parseString("code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.isDefault(parseBoolean("isDefault", getJsonNode(jsonNode, "isDefault", JsonNode.class), jsonNode.get("_isDefault"), -1));
        builder.compositional(parseBoolean("compositional", getJsonNode(jsonNode, "compositional", JsonNode.class), jsonNode.get("_compositional"), -1));
        ArrayNode languageArray = getArrayNode(jsonNode, "language", true);
        if (languageArray != null) {
            ArrayNode _languageArray = getArrayNode(jsonNode, "_language");
            for (int i = 0; i < languageArray.size(); i++) {
                builder.language((Code) parseString(Code.builder(), "language", languageArray.get(i), getJsonNode(_languageArray, i), i));
            }
        }
        ArrayNode filterArray = getArrayNode(jsonNode, "filter");
        if (filterArray != null) {
            for (int i = 0; i < filterArray.size(); i++) {
                if (filterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + filterArray.get(i).getNodeType() + " for element: filter");
                }
                builder.filter(parseTerminologyCapabilitiesCodeSystemVersionFilter("filter", filterArray.get(i), i));
            }
        }
        ArrayNode propertyArray = getArrayNode(jsonNode, "property", true);
        if (propertyArray != null) {
            ArrayNode _propertyArray = getArrayNode(jsonNode, "_property");
            for (int i = 0; i < propertyArray.size(); i++) {
                builder.property((Code) parseString(Code.builder(), "property", propertyArray.get(i), getJsonNode(_propertyArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.CodeSystem.Version.Filter parseTerminologyCapabilitiesCodeSystemVersionFilter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.CodeSystem.Version.Filter.class, jsonNode);
        }
        TerminologyCapabilities.CodeSystem.Version.Filter.Builder builder = TerminologyCapabilities.CodeSystem.Version.Filter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        ArrayNode opArray = getArrayNode(jsonNode, "op", true);
        if (opArray != null) {
            ArrayNode _opArray = getArrayNode(jsonNode, "_op");
            for (int i = 0; i < opArray.size(); i++) {
                builder.op((Code) parseString(Code.builder(), "op", opArray.get(i), getJsonNode(_opArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Expansion parseTerminologyCapabilitiesExpansion(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.Expansion.class, jsonNode);
        }
        TerminologyCapabilities.Expansion.Builder builder = TerminologyCapabilities.Expansion.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.hierarchical(parseBoolean("hierarchical", getJsonNode(jsonNode, "hierarchical", JsonNode.class), jsonNode.get("_hierarchical"), -1));
        builder.paging(parseBoolean("paging", getJsonNode(jsonNode, "paging", JsonNode.class), jsonNode.get("_paging"), -1));
        builder.incomplete(parseBoolean("incomplete", getJsonNode(jsonNode, "incomplete", JsonNode.class), jsonNode.get("_incomplete"), -1));
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseTerminologyCapabilitiesExpansionParameter("parameter", parameterArray.get(i), i));
            }
        }
        builder.textFilter((Markdown) parseString(Markdown.builder(), "textFilter", getJsonNode(jsonNode, "textFilter", TextNode.class), jsonNode.get("_textFilter"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Expansion.Parameter parseTerminologyCapabilitiesExpansionParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.Expansion.Parameter.class, jsonNode);
        }
        TerminologyCapabilities.Expansion.Parameter.Builder builder = TerminologyCapabilities.Expansion.Parameter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name((Code) parseString(Code.builder(), "name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.documentation(parseString("documentation", getJsonNode(jsonNode, "documentation", TextNode.class), jsonNode.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Implementation parseTerminologyCapabilitiesImplementation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.Implementation.class, jsonNode);
        }
        TerminologyCapabilities.Implementation.Builder builder = TerminologyCapabilities.Implementation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Software parseTerminologyCapabilitiesSoftware(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.Software.class, jsonNode);
        }
        TerminologyCapabilities.Software.Builder builder = TerminologyCapabilities.Software.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Translation parseTerminologyCapabilitiesTranslation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.Translation.class, jsonNode);
        }
        TerminologyCapabilities.Translation.Builder builder = TerminologyCapabilities.Translation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.needsMap(parseBoolean("needsMap", getJsonNode(jsonNode, "needsMap", JsonNode.class), jsonNode.get("_needsMap"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.ValidateCode parseTerminologyCapabilitiesValidateCode(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TerminologyCapabilities.ValidateCode.class, jsonNode);
        }
        TerminologyCapabilities.ValidateCode.Builder builder = TerminologyCapabilities.ValidateCode.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.translations(parseBoolean("translations", getJsonNode(jsonNode, "translations", JsonNode.class), jsonNode.get("_translations"), -1));
        stackPop();
        return builder.build();
    }

    private TestReport parseTestReport(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.class, jsonNode);
        }
        TestReport.Builder builder = TestReport.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.status((TestReportStatus) parseString(TestReportStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.testScript(parseReference("testScript", getJsonNode(jsonNode, "testScript", JsonNode.class), -1));
        builder.result((TestReportResult) parseString(TestReportResult.builder(), "result", getJsonNode(jsonNode, "result", TextNode.class), jsonNode.get("_result"), -1));
        builder.score(parseDecimal("score", getJsonNode(jsonNode, "score", NumericNode.class), jsonNode.get("_score"), -1));
        builder.tester(parseString("tester", getJsonNode(jsonNode, "tester", TextNode.class), jsonNode.get("_tester"), -1));
        builder.issued(parseDateTime("issued", getJsonNode(jsonNode, "issued", TextNode.class), jsonNode.get("_issued"), -1));
        ArrayNode participantArray = getArrayNode(jsonNode, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                if (participantArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + participantArray.get(i).getNodeType() + " for element: participant");
                }
                builder.participant(parseTestReportParticipant("participant", participantArray.get(i), i));
            }
        }
        builder.setup(parseTestReportSetup("setup", getJsonNode(jsonNode, "setup", JsonNode.class), -1));
        ArrayNode testArray = getArrayNode(jsonNode, "test");
        if (testArray != null) {
            for (int i = 0; i < testArray.size(); i++) {
                if (testArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + testArray.get(i).getNodeType() + " for element: test");
                }
                builder.test(parseTestReportTest("test", testArray.get(i), i));
            }
        }
        builder.teardown(parseTestReportTeardown("teardown", getJsonNode(jsonNode, "teardown", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Participant parseTestReportParticipant(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Participant.class, jsonNode);
        }
        TestReport.Participant.Builder builder = TestReport.Participant.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type((TestReportParticipantType) parseString(TestReportParticipantType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.uri(parseUri("uri", getJsonNode(jsonNode, "uri", TextNode.class), jsonNode.get("_uri"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Setup parseTestReportSetup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Setup.class, jsonNode);
        }
        TestReport.Setup.Builder builder = TestReport.Setup.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseTestReportSetupAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestReport.Setup.Action parseTestReportSetupAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Setup.Action.class, jsonNode);
        }
        TestReport.Setup.Action.Builder builder = TestReport.Setup.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.operation(parseTestReportSetupActionOperation("operation", getJsonNode(jsonNode, "operation", JsonNode.class), -1));
        builder._assert(parseTestReportSetupActionAssert("assert", getJsonNode(jsonNode, "assert", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Setup.Action.Assert parseTestReportSetupActionAssert(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Setup.Action.Assert.class, jsonNode);
        }
        TestReport.Setup.Action.Assert.Builder builder = TestReport.Setup.Action.Assert.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.result((TestReportActionResult) parseString(TestReportActionResult.builder(), "result", getJsonNode(jsonNode, "result", TextNode.class), jsonNode.get("_result"), -1));
        builder.message((Markdown) parseString(Markdown.builder(), "message", getJsonNode(jsonNode, "message", TextNode.class), jsonNode.get("_message"), -1));
        builder.detail(parseString("detail", getJsonNode(jsonNode, "detail", TextNode.class), jsonNode.get("_detail"), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Setup.Action.Operation parseTestReportSetupActionOperation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Setup.Action.Operation.class, jsonNode);
        }
        TestReport.Setup.Action.Operation.Builder builder = TestReport.Setup.Action.Operation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.result((TestReportActionResult) parseString(TestReportActionResult.builder(), "result", getJsonNode(jsonNode, "result", TextNode.class), jsonNode.get("_result"), -1));
        builder.message((Markdown) parseString(Markdown.builder(), "message", getJsonNode(jsonNode, "message", TextNode.class), jsonNode.get("_message"), -1));
        builder.detail(parseUri("detail", getJsonNode(jsonNode, "detail", TextNode.class), jsonNode.get("_detail"), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Teardown parseTestReportTeardown(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Teardown.class, jsonNode);
        }
        TestReport.Teardown.Builder builder = TestReport.Teardown.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseTestReportTeardownAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestReport.Teardown.Action parseTestReportTeardownAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Teardown.Action.class, jsonNode);
        }
        TestReport.Teardown.Action.Builder builder = TestReport.Teardown.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.operation(parseTestReportSetupActionOperation("operation", getJsonNode(jsonNode, "operation", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Test parseTestReportTest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Test.class, jsonNode);
        }
        TestReport.Test.Builder builder = TestReport.Test.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseTestReportTestAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestReport.Test.Action parseTestReportTestAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestReport.Test.Action.class, jsonNode);
        }
        TestReport.Test.Action.Builder builder = TestReport.Test.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.operation(parseTestReportSetupActionOperation("operation", getJsonNode(jsonNode, "operation", JsonNode.class), -1));
        builder._assert(parseTestReportSetupActionAssert("assert", getJsonNode(jsonNode, "assert", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript parseTestScript(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.class, jsonNode);
        }
        TestScript.Builder builder = TestScript.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonNode(jsonNode, "identifier", JsonNode.class), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        ArrayNode originArray = getArrayNode(jsonNode, "origin");
        if (originArray != null) {
            for (int i = 0; i < originArray.size(); i++) {
                if (originArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + originArray.get(i).getNodeType() + " for element: origin");
                }
                builder.origin(parseTestScriptOrigin("origin", originArray.get(i), i));
            }
        }
        ArrayNode destinationArray = getArrayNode(jsonNode, "destination");
        if (destinationArray != null) {
            for (int i = 0; i < destinationArray.size(); i++) {
                if (destinationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + destinationArray.get(i).getNodeType() + " for element: destination");
                }
                builder.destination(parseTestScriptDestination("destination", destinationArray.get(i), i));
            }
        }
        builder.metadata(parseTestScriptMetadata("metadata", getJsonNode(jsonNode, "metadata", JsonNode.class), -1));
        ArrayNode fixtureArray = getArrayNode(jsonNode, "fixture");
        if (fixtureArray != null) {
            for (int i = 0; i < fixtureArray.size(); i++) {
                if (fixtureArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + fixtureArray.get(i).getNodeType() + " for element: fixture");
                }
                builder.fixture(parseTestScriptFixture("fixture", fixtureArray.get(i), i));
            }
        }
        ArrayNode profileArray = getArrayNode(jsonNode, "profile");
        if (profileArray != null) {
            for (int i = 0; i < profileArray.size(); i++) {
                if (profileArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + profileArray.get(i).getNodeType() + " for element: profile");
                }
                builder.profile(parseReference("profile", profileArray.get(i), i));
            }
        }
        ArrayNode variableArray = getArrayNode(jsonNode, "variable");
        if (variableArray != null) {
            for (int i = 0; i < variableArray.size(); i++) {
                if (variableArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + variableArray.get(i).getNodeType() + " for element: variable");
                }
                builder.variable(parseTestScriptVariable("variable", variableArray.get(i), i));
            }
        }
        builder.setup(parseTestScriptSetup("setup", getJsonNode(jsonNode, "setup", JsonNode.class), -1));
        ArrayNode testArray = getArrayNode(jsonNode, "test");
        if (testArray != null) {
            for (int i = 0; i < testArray.size(); i++) {
                if (testArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + testArray.get(i).getNodeType() + " for element: test");
                }
                builder.test(parseTestScriptTest("test", testArray.get(i), i));
            }
        }
        builder.teardown(parseTestScriptTeardown("teardown", getJsonNode(jsonNode, "teardown", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Destination parseTestScriptDestination(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Destination.class, jsonNode);
        }
        TestScript.Destination.Builder builder = TestScript.Destination.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.index(parseInteger("index", getJsonNode(jsonNode, "index", NumericNode.class), jsonNode.get("_index"), -1));
        builder.profile(parseCoding("profile", getJsonNode(jsonNode, "profile", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Fixture parseTestScriptFixture(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Fixture.class, jsonNode);
        }
        TestScript.Fixture.Builder builder = TestScript.Fixture.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.autocreate(parseBoolean("autocreate", getJsonNode(jsonNode, "autocreate", JsonNode.class), jsonNode.get("_autocreate"), -1));
        builder.autodelete(parseBoolean("autodelete", getJsonNode(jsonNode, "autodelete", JsonNode.class), jsonNode.get("_autodelete"), -1));
        builder.resource(parseReference("resource", getJsonNode(jsonNode, "resource", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Metadata parseTestScriptMetadata(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Metadata.class, jsonNode);
        }
        TestScript.Metadata.Builder builder = TestScript.Metadata.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode linkArray = getArrayNode(jsonNode, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                if (linkArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + linkArray.get(i).getNodeType() + " for element: link");
                }
                builder.link(parseTestScriptMetadataLink("link", linkArray.get(i), i));
            }
        }
        ArrayNode capabilityArray = getArrayNode(jsonNode, "capability");
        if (capabilityArray != null) {
            for (int i = 0; i < capabilityArray.size(); i++) {
                if (capabilityArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + capabilityArray.get(i).getNodeType() + " for element: capability");
                }
                builder.capability(parseTestScriptMetadataCapability("capability", capabilityArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestScript.Metadata.Capability parseTestScriptMetadataCapability(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Metadata.Capability.class, jsonNode);
        }
        TestScript.Metadata.Capability.Builder builder = TestScript.Metadata.Capability.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.required(parseBoolean("required", getJsonNode(jsonNode, "required", JsonNode.class), jsonNode.get("_required"), -1));
        builder.validated(parseBoolean("validated", getJsonNode(jsonNode, "validated", JsonNode.class), jsonNode.get("_validated"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode originArray = getArrayNode(jsonNode, "origin", true);
        if (originArray != null) {
            ArrayNode _originArray = getArrayNode(jsonNode, "_origin");
            for (int i = 0; i < originArray.size(); i++) {
                builder.origin(parseInteger("origin", originArray.get(i), getJsonNode(_originArray, i), i));
            }
        }
        builder.destination(parseInteger("destination", getJsonNode(jsonNode, "destination", NumericNode.class), jsonNode.get("_destination"), -1));
        ArrayNode linkArray = getArrayNode(jsonNode, "link", true);
        if (linkArray != null) {
            ArrayNode _linkArray = getArrayNode(jsonNode, "_link");
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parseUri("link", linkArray.get(i), getJsonNode(_linkArray, i), i));
            }
        }
        builder.capabilities((Canonical) parseUri(Canonical.builder(), "capabilities", getJsonNode(jsonNode, "capabilities", TextNode.class), jsonNode.get("_capabilities"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Metadata.Link parseTestScriptMetadataLink(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Metadata.Link.class, jsonNode);
        }
        TestScript.Metadata.Link.Builder builder = TestScript.Metadata.Link.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Origin parseTestScriptOrigin(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Origin.class, jsonNode);
        }
        TestScript.Origin.Builder builder = TestScript.Origin.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.index(parseInteger("index", getJsonNode(jsonNode, "index", NumericNode.class), jsonNode.get("_index"), -1));
        builder.profile(parseCoding("profile", getJsonNode(jsonNode, "profile", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Setup parseTestScriptSetup(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Setup.class, jsonNode);
        }
        TestScript.Setup.Builder builder = TestScript.Setup.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseTestScriptSetupAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestScript.Setup.Action parseTestScriptSetupAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Setup.Action.class, jsonNode);
        }
        TestScript.Setup.Action.Builder builder = TestScript.Setup.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.operation(parseTestScriptSetupActionOperation("operation", getJsonNode(jsonNode, "operation", JsonNode.class), -1));
        builder._assert(parseTestScriptSetupActionAssert("assert", getJsonNode(jsonNode, "assert", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Setup.Action.Assert parseTestScriptSetupActionAssert(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Setup.Action.Assert.class, jsonNode);
        }
        TestScript.Setup.Action.Assert.Builder builder = TestScript.Setup.Action.Assert.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.label(parseString("label", getJsonNode(jsonNode, "label", TextNode.class), jsonNode.get("_label"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.direction((AssertionDirectionType) parseString(AssertionDirectionType.builder(), "direction", getJsonNode(jsonNode, "direction", TextNode.class), jsonNode.get("_direction"), -1));
        builder.compareToSourceId(parseString("compareToSourceId", getJsonNode(jsonNode, "compareToSourceId", TextNode.class), jsonNode.get("_compareToSourceId"), -1));
        builder.compareToSourceExpression(parseString("compareToSourceExpression", getJsonNode(jsonNode, "compareToSourceExpression", TextNode.class), jsonNode.get("_compareToSourceExpression"), -1));
        builder.compareToSourcePath(parseString("compareToSourcePath", getJsonNode(jsonNode, "compareToSourcePath", TextNode.class), jsonNode.get("_compareToSourcePath"), -1));
        builder.contentType((Code) parseString(Code.builder(), "contentType", getJsonNode(jsonNode, "contentType", TextNode.class), jsonNode.get("_contentType"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        builder.headerField(parseString("headerField", getJsonNode(jsonNode, "headerField", TextNode.class), jsonNode.get("_headerField"), -1));
        builder.minimumId(parseString("minimumId", getJsonNode(jsonNode, "minimumId", TextNode.class), jsonNode.get("_minimumId"), -1));
        builder.navigationLinks(parseBoolean("navigationLinks", getJsonNode(jsonNode, "navigationLinks", JsonNode.class), jsonNode.get("_navigationLinks"), -1));
        builder.operator((AssertionOperatorType) parseString(AssertionOperatorType.builder(), "operator", getJsonNode(jsonNode, "operator", TextNode.class), jsonNode.get("_operator"), -1));
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.requestMethod((TestScriptRequestMethodCode) parseString(TestScriptRequestMethodCode.builder(), "requestMethod", getJsonNode(jsonNode, "requestMethod", TextNode.class), jsonNode.get("_requestMethod"), -1));
        builder.requestURL(parseString("requestURL", getJsonNode(jsonNode, "requestURL", TextNode.class), jsonNode.get("_requestURL"), -1));
        builder.resource((FHIRDefinedType) parseString(FHIRDefinedType.builder(), "resource", getJsonNode(jsonNode, "resource", TextNode.class), jsonNode.get("_resource"), -1));
        builder.response((AssertionResponseTypes) parseString(AssertionResponseTypes.builder(), "response", getJsonNode(jsonNode, "response", TextNode.class), jsonNode.get("_response"), -1));
        builder.responseCode(parseString("responseCode", getJsonNode(jsonNode, "responseCode", TextNode.class), jsonNode.get("_responseCode"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", getJsonNode(jsonNode, "sourceId", TextNode.class), jsonNode.get("_sourceId"), -1));
        builder.validateProfileId((Id) parseString(Id.builder(), "validateProfileId", getJsonNode(jsonNode, "validateProfileId", TextNode.class), jsonNode.get("_validateProfileId"), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        builder.warningOnly(parseBoolean("warningOnly", getJsonNode(jsonNode, "warningOnly", JsonNode.class), jsonNode.get("_warningOnly"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Setup.Action.Operation parseTestScriptSetupActionOperation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Setup.Action.Operation.class, jsonNode);
        }
        TestScript.Setup.Action.Operation.Builder builder = TestScript.Setup.Action.Operation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.type(parseCoding("type", getJsonNode(jsonNode, "type", JsonNode.class), -1));
        builder.resource((FHIRDefinedType) parseString(FHIRDefinedType.builder(), "resource", getJsonNode(jsonNode, "resource", TextNode.class), jsonNode.get("_resource"), -1));
        builder.label(parseString("label", getJsonNode(jsonNode, "label", TextNode.class), jsonNode.get("_label"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.accept((Code) parseString(Code.builder(), "accept", getJsonNode(jsonNode, "accept", TextNode.class), jsonNode.get("_accept"), -1));
        builder.contentType((Code) parseString(Code.builder(), "contentType", getJsonNode(jsonNode, "contentType", TextNode.class), jsonNode.get("_contentType"), -1));
        builder.destination(parseInteger("destination", getJsonNode(jsonNode, "destination", NumericNode.class), jsonNode.get("_destination"), -1));
        builder.encodeRequestUrl(parseBoolean("encodeRequestUrl", getJsonNode(jsonNode, "encodeRequestUrl", JsonNode.class), jsonNode.get("_encodeRequestUrl"), -1));
        builder.method((TestScriptRequestMethodCode) parseString(TestScriptRequestMethodCode.builder(), "method", getJsonNode(jsonNode, "method", TextNode.class), jsonNode.get("_method"), -1));
        builder.origin(parseInteger("origin", getJsonNode(jsonNode, "origin", NumericNode.class), jsonNode.get("_origin"), -1));
        builder.params(parseString("params", getJsonNode(jsonNode, "params", TextNode.class), jsonNode.get("_params"), -1));
        ArrayNode requestHeaderArray = getArrayNode(jsonNode, "requestHeader");
        if (requestHeaderArray != null) {
            for (int i = 0; i < requestHeaderArray.size(); i++) {
                if (requestHeaderArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + requestHeaderArray.get(i).getNodeType() + " for element: requestHeader");
                }
                builder.requestHeader(parseTestScriptSetupActionOperationRequestHeader("requestHeader", requestHeaderArray.get(i), i));
            }
        }
        builder.requestId((Id) parseString(Id.builder(), "requestId", getJsonNode(jsonNode, "requestId", TextNode.class), jsonNode.get("_requestId"), -1));
        builder.responseId((Id) parseString(Id.builder(), "responseId", getJsonNode(jsonNode, "responseId", TextNode.class), jsonNode.get("_responseId"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", getJsonNode(jsonNode, "sourceId", TextNode.class), jsonNode.get("_sourceId"), -1));
        builder.targetId((Id) parseString(Id.builder(), "targetId", getJsonNode(jsonNode, "targetId", TextNode.class), jsonNode.get("_targetId"), -1));
        builder.url(parseString("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Setup.Action.Operation.RequestHeader parseTestScriptSetupActionOperationRequestHeader(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Setup.Action.Operation.RequestHeader.class, jsonNode);
        }
        TestScript.Setup.Action.Operation.RequestHeader.Builder builder = TestScript.Setup.Action.Operation.RequestHeader.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.field(parseString("field", getJsonNode(jsonNode, "field", TextNode.class), jsonNode.get("_field"), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Teardown parseTestScriptTeardown(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Teardown.class, jsonNode);
        }
        TestScript.Teardown.Builder builder = TestScript.Teardown.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseTestScriptTeardownAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestScript.Teardown.Action parseTestScriptTeardownAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Teardown.Action.class, jsonNode);
        }
        TestScript.Teardown.Action.Builder builder = TestScript.Teardown.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.operation(parseTestScriptSetupActionOperation("operation", getJsonNode(jsonNode, "operation", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Test parseTestScriptTest(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Test.class, jsonNode);
        }
        TestScript.Test.Builder builder = TestScript.Test.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode actionArray = getArrayNode(jsonNode, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                if (actionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + actionArray.get(i).getNodeType() + " for element: action");
                }
                builder.action(parseTestScriptTestAction("action", actionArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestScript.Test.Action parseTestScriptTestAction(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Test.Action.class, jsonNode);
        }
        TestScript.Test.Action.Builder builder = TestScript.Test.Action.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.operation(parseTestScriptSetupActionOperation("operation", getJsonNode(jsonNode, "operation", JsonNode.class), -1));
        builder._assert(parseTestScriptSetupActionAssert("assert", getJsonNode(jsonNode, "assert", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Variable parseTestScriptVariable(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TestScript.Variable.class, jsonNode);
        }
        TestScript.Variable.Builder builder = TestScript.Variable.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.defaultValue(parseString("defaultValue", getJsonNode(jsonNode, "defaultValue", TextNode.class), jsonNode.get("_defaultValue"), -1));
        builder.description(parseString("description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        builder.expression(parseString("expression", getJsonNode(jsonNode, "expression", TextNode.class), jsonNode.get("_expression"), -1));
        builder.headerField(parseString("headerField", getJsonNode(jsonNode, "headerField", TextNode.class), jsonNode.get("_headerField"), -1));
        builder.hint(parseString("hint", getJsonNode(jsonNode, "hint", TextNode.class), jsonNode.get("_hint"), -1));
        builder.path(parseString("path", getJsonNode(jsonNode, "path", TextNode.class), jsonNode.get("_path"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", getJsonNode(jsonNode, "sourceId", TextNode.class), jsonNode.get("_sourceId"), -1));
        stackPop();
        return builder.build();
    }

    private Time parseTime(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Time.Builder builder = Time.builder();
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.STRING) {
            TextNode jsonString = (TextNode) jsonValue;
            builder.value(jsonString.textValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Timing parseTiming(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Timing.class, jsonNode);
        }
        Timing.Builder builder = Timing.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        ArrayNode eventArray = getArrayNode(jsonNode, "event", true);
        if (eventArray != null) {
            ArrayNode _eventArray = getArrayNode(jsonNode, "_event");
            for (int i = 0; i < eventArray.size(); i++) {
                builder.event(parseDateTime("event", eventArray.get(i), getJsonNode(_eventArray, i), i));
            }
        }
        builder.repeat(parseTimingRepeat("repeat", getJsonNode(jsonNode, "repeat", JsonNode.class), -1));
        builder.code(parseCodeableConcept("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Timing.Repeat parseTimingRepeat(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(Timing.Repeat.class, jsonNode);
        }
        Timing.Repeat.Builder builder = Timing.Repeat.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.bounds(parseChoiceElement("bounds", jsonNode, Duration.class, Range.class, Period.class));
        builder.count((PositiveInt) parseInteger(PositiveInt.builder(), "count", getJsonNode(jsonNode, "count", NumericNode.class), jsonNode.get("_count"), -1));
        builder.countMax((PositiveInt) parseInteger(PositiveInt.builder(), "countMax", getJsonNode(jsonNode, "countMax", NumericNode.class), jsonNode.get("_countMax"), -1));
        builder.duration(parseDecimal("duration", getJsonNode(jsonNode, "duration", NumericNode.class), jsonNode.get("_duration"), -1));
        builder.durationMax(parseDecimal("durationMax", getJsonNode(jsonNode, "durationMax", NumericNode.class), jsonNode.get("_durationMax"), -1));
        builder.durationUnit((UnitsOfTime) parseString(UnitsOfTime.builder(), "durationUnit", getJsonNode(jsonNode, "durationUnit", TextNode.class), jsonNode.get("_durationUnit"), -1));
        builder.frequency((PositiveInt) parseInteger(PositiveInt.builder(), "frequency", getJsonNode(jsonNode, "frequency", NumericNode.class), jsonNode.get("_frequency"), -1));
        builder.frequencyMax((PositiveInt) parseInteger(PositiveInt.builder(), "frequencyMax", getJsonNode(jsonNode, "frequencyMax", NumericNode.class), jsonNode.get("_frequencyMax"), -1));
        builder.period(parseDecimal("period", getJsonNode(jsonNode, "period", NumericNode.class), jsonNode.get("_period"), -1));
        builder.periodMax(parseDecimal("periodMax", getJsonNode(jsonNode, "periodMax", NumericNode.class), jsonNode.get("_periodMax"), -1));
        builder.periodUnit((UnitsOfTime) parseString(UnitsOfTime.builder(), "periodUnit", getJsonNode(jsonNode, "periodUnit", TextNode.class), jsonNode.get("_periodUnit"), -1));
        ArrayNode dayOfWeekArray = getArrayNode(jsonNode, "dayOfWeek", true);
        if (dayOfWeekArray != null) {
            ArrayNode _dayOfWeekArray = getArrayNode(jsonNode, "_dayOfWeek");
            for (int i = 0; i < dayOfWeekArray.size(); i++) {
                builder.dayOfWeek((DayOfWeek) parseString(DayOfWeek.builder(), "dayOfWeek", dayOfWeekArray.get(i), getJsonNode(_dayOfWeekArray, i), i));
            }
        }
        ArrayNode timeOfDayArray = getArrayNode(jsonNode, "timeOfDay", true);
        if (timeOfDayArray != null) {
            ArrayNode _timeOfDayArray = getArrayNode(jsonNode, "_timeOfDay");
            for (int i = 0; i < timeOfDayArray.size(); i++) {
                builder.timeOfDay(parseTime("timeOfDay", timeOfDayArray.get(i), getJsonNode(_timeOfDayArray, i), i));
            }
        }
        ArrayNode whenArray = getArrayNode(jsonNode, "when", true);
        if (whenArray != null) {
            ArrayNode _whenArray = getArrayNode(jsonNode, "_when");
            for (int i = 0; i < whenArray.size(); i++) {
                builder.when((EventTiming) parseString(EventTiming.builder(), "when", whenArray.get(i), getJsonNode(_whenArray, i), i));
            }
        }
        builder.offset((UnsignedInt) parseInteger(UnsignedInt.builder(), "offset", getJsonNode(jsonNode, "offset", NumericNode.class), jsonNode.get("_offset"), -1));
        stackPop();
        return builder.build();
    }

    private TriggerDefinition parseTriggerDefinition(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(TriggerDefinition.class, jsonNode);
        }
        TriggerDefinition.Builder builder = TriggerDefinition.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.type((TriggerType) parseString(TriggerType.builder(), "type", getJsonNode(jsonNode, "type", TextNode.class), jsonNode.get("_type"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.timing(parseChoiceElement("timing", jsonNode, Timing.class, Reference.class, Date.class, DateTime.class));
        ArrayNode dataArray = getArrayNode(jsonNode, "data");
        if (dataArray != null) {
            for (int i = 0; i < dataArray.size(); i++) {
                if (dataArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + dataArray.get(i).getNodeType() + " for element: data");
                }
                builder.data(parseDataRequirement("data", dataArray.get(i), i));
            }
        }
        builder.condition(parseExpression("condition", getJsonNode(jsonNode, "condition", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private Uri parseUri(Uri.Builder builder, java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.STRING) {
            TextNode jsonString = (TextNode) jsonValue;
            builder.value(jsonString.textValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Uri parseUri(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        return parseUri(Uri.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    private UsageContext parseUsageContext(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(UsageContext.class, jsonNode);
        }
        UsageContext.Builder builder = UsageContext.builder();
        builder.setValidating(validating);
        parseElement(builder, jsonNode);
        builder.code(parseCoding("code", getJsonNode(jsonNode, "code", JsonNode.class), -1));
        builder.value(parseChoiceElement("value", jsonNode, CodeableConcept.class, Quantity.class, Range.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private ValueSet parseValueSet(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.class, jsonNode);
        }
        ValueSet.Builder builder = ValueSet.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        builder.url(parseUri("url", getJsonNode(jsonNode, "url", TextNode.class), jsonNode.get("_url"), -1));
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.title(parseString("title", getJsonNode(jsonNode, "title", TextNode.class), jsonNode.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonNode(jsonNode, "experimental", JsonNode.class), jsonNode.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonNode(jsonNode, "publisher", TextNode.class), jsonNode.get("_publisher"), -1));
        ArrayNode contactArray = getArrayNode(jsonNode, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                if (contactArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + contactArray.get(i).getNodeType() + " for element: contact");
                }
                builder.contact(parseContactDetail("contact", contactArray.get(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonNode(jsonNode, "description", TextNode.class), jsonNode.get("_description"), -1));
        ArrayNode useContextArray = getArrayNode(jsonNode, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                if (useContextArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + useContextArray.get(i).getNodeType() + " for element: useContext");
                }
                builder.useContext(parseUsageContext("useContext", useContextArray.get(i), i));
            }
        }
        ArrayNode jurisdictionArray = getArrayNode(jsonNode, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                if (jurisdictionArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + jurisdictionArray.get(i).getNodeType() + " for element: jurisdiction");
                }
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.get(i), i));
            }
        }
        builder.immutable(parseBoolean("immutable", getJsonNode(jsonNode, "immutable", JsonNode.class), jsonNode.get("_immutable"), -1));
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonNode(jsonNode, "purpose", TextNode.class), jsonNode.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonNode(jsonNode, "copyright", TextNode.class), jsonNode.get("_copyright"), -1));
        builder.compose(parseValueSetCompose("compose", getJsonNode(jsonNode, "compose", JsonNode.class), -1));
        builder.expansion(parseValueSetExpansion("expansion", getJsonNode(jsonNode, "expansion", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose parseValueSetCompose(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.Compose.class, jsonNode);
        }
        ValueSet.Compose.Builder builder = ValueSet.Compose.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.lockedDate(parseDate("lockedDate", getJsonNode(jsonNode, "lockedDate", TextNode.class), jsonNode.get("_lockedDate"), -1));
        builder.inactive(parseBoolean("inactive", getJsonNode(jsonNode, "inactive", JsonNode.class), jsonNode.get("_inactive"), -1));
        ArrayNode includeArray = getArrayNode(jsonNode, "include");
        if (includeArray != null) {
            for (int i = 0; i < includeArray.size(); i++) {
                if (includeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + includeArray.get(i).getNodeType() + " for element: include");
                }
                builder.include(parseValueSetComposeInclude("include", includeArray.get(i), i));
            }
        }
        ArrayNode excludeArray = getArrayNode(jsonNode, "exclude");
        if (excludeArray != null) {
            for (int i = 0; i < excludeArray.size(); i++) {
                if (excludeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + excludeArray.get(i).getNodeType() + " for element: exclude");
                }
                builder.exclude(parseValueSetComposeInclude("exclude", excludeArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose.Include parseValueSetComposeInclude(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.Compose.Include.class, jsonNode);
        }
        ValueSet.Compose.Include.Builder builder = ValueSet.Compose.Include.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.system(parseUri("system", getJsonNode(jsonNode, "system", TextNode.class), jsonNode.get("_system"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        ArrayNode conceptArray = getArrayNode(jsonNode, "concept");
        if (conceptArray != null) {
            for (int i = 0; i < conceptArray.size(); i++) {
                if (conceptArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + conceptArray.get(i).getNodeType() + " for element: concept");
                }
                builder.concept(parseValueSetComposeIncludeConcept("concept", conceptArray.get(i), i));
            }
        }
        ArrayNode filterArray = getArrayNode(jsonNode, "filter");
        if (filterArray != null) {
            for (int i = 0; i < filterArray.size(); i++) {
                if (filterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + filterArray.get(i).getNodeType() + " for element: filter");
                }
                builder.filter(parseValueSetComposeIncludeFilter("filter", filterArray.get(i), i));
            }
        }
        ArrayNode valueSetArray = getArrayNode(jsonNode, "valueSet", true);
        if (valueSetArray != null) {
            ArrayNode _valueSetArray = getArrayNode(jsonNode, "_valueSet");
            for (int i = 0; i < valueSetArray.size(); i++) {
                builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", valueSetArray.get(i), getJsonNode(_valueSetArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose.Include.Concept parseValueSetComposeIncludeConcept(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.Compose.Include.Concept.class, jsonNode);
        }
        ValueSet.Compose.Include.Concept.Builder builder = ValueSet.Compose.Include.Concept.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        ArrayNode designationArray = getArrayNode(jsonNode, "designation");
        if (designationArray != null) {
            for (int i = 0; i < designationArray.size(); i++) {
                if (designationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + designationArray.get(i).getNodeType() + " for element: designation");
                }
                builder.designation(parseValueSetComposeIncludeConceptDesignation("designation", designationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose.Include.Concept.Designation parseValueSetComposeIncludeConceptDesignation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.Compose.Include.Concept.Designation.class, jsonNode);
        }
        ValueSet.Compose.Include.Concept.Designation.Builder builder = ValueSet.Compose.Include.Concept.Designation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.language((Code) parseString(Code.builder(), "language", getJsonNode(jsonNode, "language", TextNode.class), jsonNode.get("_language"), -1));
        builder.use(parseCoding("use", getJsonNode(jsonNode, "use", JsonNode.class), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose.Include.Filter parseValueSetComposeIncludeFilter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.Compose.Include.Filter.class, jsonNode);
        }
        ValueSet.Compose.Include.Filter.Builder builder = ValueSet.Compose.Include.Filter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.property((Code) parseString(Code.builder(), "property", getJsonNode(jsonNode, "property", TextNode.class), jsonNode.get("_property"), -1));
        builder.op((FilterOperator) parseString(FilterOperator.builder(), "op", getJsonNode(jsonNode, "op", TextNode.class), jsonNode.get("_op"), -1));
        builder.value(parseString("value", getJsonNode(jsonNode, "value", TextNode.class), jsonNode.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ValueSet.Expansion parseValueSetExpansion(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.Expansion.class, jsonNode);
        }
        ValueSet.Expansion.Builder builder = ValueSet.Expansion.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.identifier(parseUri("identifier", getJsonNode(jsonNode, "identifier", TextNode.class), jsonNode.get("_identifier"), -1));
        builder.timestamp(parseDateTime("timestamp", getJsonNode(jsonNode, "timestamp", TextNode.class), jsonNode.get("_timestamp"), -1));
        builder.total(parseInteger("total", getJsonNode(jsonNode, "total", NumericNode.class), jsonNode.get("_total"), -1));
        builder.offset(parseInteger("offset", getJsonNode(jsonNode, "offset", NumericNode.class), jsonNode.get("_offset"), -1));
        ArrayNode parameterArray = getArrayNode(jsonNode, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                if (parameterArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + parameterArray.get(i).getNodeType() + " for element: parameter");
                }
                builder.parameter(parseValueSetExpansionParameter("parameter", parameterArray.get(i), i));
            }
        }
        ArrayNode containsArray = getArrayNode(jsonNode, "contains");
        if (containsArray != null) {
            for (int i = 0; i < containsArray.size(); i++) {
                if (containsArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + containsArray.get(i).getNodeType() + " for element: contains");
                }
                builder.contains(parseValueSetExpansionContains("contains", containsArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Expansion.Contains parseValueSetExpansionContains(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.Expansion.Contains.class, jsonNode);
        }
        ValueSet.Expansion.Contains.Builder builder = ValueSet.Expansion.Contains.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.system(parseUri("system", getJsonNode(jsonNode, "system", TextNode.class), jsonNode.get("_system"), -1));
        builder._abstract(parseBoolean("abstract", getJsonNode(jsonNode, "abstract", JsonNode.class), jsonNode.get("_abstract"), -1));
        builder.inactive(parseBoolean("inactive", getJsonNode(jsonNode, "inactive", JsonNode.class), jsonNode.get("_inactive"), -1));
        builder.version(parseString("version", getJsonNode(jsonNode, "version", TextNode.class), jsonNode.get("_version"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonNode(jsonNode, "code", TextNode.class), jsonNode.get("_code"), -1));
        builder.display(parseString("display", getJsonNode(jsonNode, "display", TextNode.class), jsonNode.get("_display"), -1));
        ArrayNode designationArray = getArrayNode(jsonNode, "designation");
        if (designationArray != null) {
            for (int i = 0; i < designationArray.size(); i++) {
                if (designationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + designationArray.get(i).getNodeType() + " for element: designation");
                }
                builder.designation(parseValueSetComposeIncludeConceptDesignation("designation", designationArray.get(i), i));
            }
        }
        ArrayNode containsArray = getArrayNode(jsonNode, "contains");
        if (containsArray != null) {
            for (int i = 0; i < containsArray.size(); i++) {
                if (containsArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + containsArray.get(i).getNodeType() + " for element: contains");
                }
                builder.contains(parseValueSetExpansionContains("contains", containsArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Expansion.Parameter parseValueSetExpansionParameter(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(ValueSet.Expansion.Parameter.class, jsonNode);
        }
        ValueSet.Expansion.Parameter.Builder builder = ValueSet.Expansion.Parameter.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.name(parseString("name", getJsonNode(jsonNode, "name", TextNode.class), jsonNode.get("_name"), -1));
        builder.value(parseChoiceElement("value", jsonNode, String.class, Boolean.class, Integer.class, Decimal.class, Uri.class, Code.class, DateTime.class));
        stackPop();
        return builder.build();
    }

    private VerificationResult parseVerificationResult(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(VerificationResult.class, jsonNode);
        }
        VerificationResult.Builder builder = VerificationResult.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode targetArray = getArrayNode(jsonNode, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                if (targetArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + targetArray.get(i).getNodeType() + " for element: target");
                }
                builder.target(parseReference("target", targetArray.get(i), i));
            }
        }
        ArrayNode targetLocationArray = getArrayNode(jsonNode, "targetLocation", true);
        if (targetLocationArray != null) {
            ArrayNode _targetLocationArray = getArrayNode(jsonNode, "_targetLocation");
            for (int i = 0; i < targetLocationArray.size(); i++) {
                builder.targetLocation(parseString("targetLocation", targetLocationArray.get(i), getJsonNode(_targetLocationArray, i), i));
            }
        }
        builder.need(parseCodeableConcept("need", getJsonNode(jsonNode, "need", JsonNode.class), -1));
        builder.status((Status) parseString(Status.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.statusDate(parseDateTime("statusDate", getJsonNode(jsonNode, "statusDate", TextNode.class), jsonNode.get("_statusDate"), -1));
        builder.validationType(parseCodeableConcept("validationType", getJsonNode(jsonNode, "validationType", JsonNode.class), -1));
        ArrayNode validationProcessArray = getArrayNode(jsonNode, "validationProcess");
        if (validationProcessArray != null) {
            for (int i = 0; i < validationProcessArray.size(); i++) {
                if (validationProcessArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + validationProcessArray.get(i).getNodeType() + " for element: validationProcess");
                }
                builder.validationProcess(parseCodeableConcept("validationProcess", validationProcessArray.get(i), i));
            }
        }
        builder.frequency(parseTiming("frequency", getJsonNode(jsonNode, "frequency", JsonNode.class), -1));
        builder.lastPerformed(parseDateTime("lastPerformed", getJsonNode(jsonNode, "lastPerformed", TextNode.class), jsonNode.get("_lastPerformed"), -1));
        builder.nextScheduled(parseDate("nextScheduled", getJsonNode(jsonNode, "nextScheduled", TextNode.class), jsonNode.get("_nextScheduled"), -1));
        builder.failureAction(parseCodeableConcept("failureAction", getJsonNode(jsonNode, "failureAction", JsonNode.class), -1));
        ArrayNode primarySourceArray = getArrayNode(jsonNode, "primarySource");
        if (primarySourceArray != null) {
            for (int i = 0; i < primarySourceArray.size(); i++) {
                if (primarySourceArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + primarySourceArray.get(i).getNodeType() + " for element: primarySource");
                }
                builder.primarySource(parseVerificationResultPrimarySource("primarySource", primarySourceArray.get(i), i));
            }
        }
        builder.attestation(parseVerificationResultAttestation("attestation", getJsonNode(jsonNode, "attestation", JsonNode.class), -1));
        ArrayNode validatorArray = getArrayNode(jsonNode, "validator");
        if (validatorArray != null) {
            for (int i = 0; i < validatorArray.size(); i++) {
                if (validatorArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + validatorArray.get(i).getNodeType() + " for element: validator");
                }
                builder.validator(parseVerificationResultValidator("validator", validatorArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private VerificationResult.Attestation parseVerificationResultAttestation(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(VerificationResult.Attestation.class, jsonNode);
        }
        VerificationResult.Attestation.Builder builder = VerificationResult.Attestation.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.who(parseReference("who", getJsonNode(jsonNode, "who", JsonNode.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonNode(jsonNode, "onBehalfOf", JsonNode.class), -1));
        builder.communicationMethod(parseCodeableConcept("communicationMethod", getJsonNode(jsonNode, "communicationMethod", JsonNode.class), -1));
        builder.date(parseDate("date", getJsonNode(jsonNode, "date", TextNode.class), jsonNode.get("_date"), -1));
        builder.sourceIdentityCertificate(parseString("sourceIdentityCertificate", getJsonNode(jsonNode, "sourceIdentityCertificate", TextNode.class), jsonNode.get("_sourceIdentityCertificate"), -1));
        builder.proxyIdentityCertificate(parseString("proxyIdentityCertificate", getJsonNode(jsonNode, "proxyIdentityCertificate", TextNode.class), jsonNode.get("_proxyIdentityCertificate"), -1));
        builder.proxySignature(parseSignature("proxySignature", getJsonNode(jsonNode, "proxySignature", JsonNode.class), -1));
        builder.sourceSignature(parseSignature("sourceSignature", getJsonNode(jsonNode, "sourceSignature", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private VerificationResult.PrimarySource parseVerificationResultPrimarySource(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(VerificationResult.PrimarySource.class, jsonNode);
        }
        VerificationResult.PrimarySource.Builder builder = VerificationResult.PrimarySource.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.who(parseReference("who", getJsonNode(jsonNode, "who", JsonNode.class), -1));
        ArrayNode typeArray = getArrayNode(jsonNode, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                if (typeArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + typeArray.get(i).getNodeType() + " for element: type");
                }
                builder.type(parseCodeableConcept("type", typeArray.get(i), i));
            }
        }
        ArrayNode communicationMethodArray = getArrayNode(jsonNode, "communicationMethod");
        if (communicationMethodArray != null) {
            for (int i = 0; i < communicationMethodArray.size(); i++) {
                if (communicationMethodArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + communicationMethodArray.get(i).getNodeType() + " for element: communicationMethod");
                }
                builder.communicationMethod(parseCodeableConcept("communicationMethod", communicationMethodArray.get(i), i));
            }
        }
        builder.validationStatus(parseCodeableConcept("validationStatus", getJsonNode(jsonNode, "validationStatus", JsonNode.class), -1));
        builder.validationDate(parseDateTime("validationDate", getJsonNode(jsonNode, "validationDate", TextNode.class), jsonNode.get("_validationDate"), -1));
        builder.canPushUpdates(parseCodeableConcept("canPushUpdates", getJsonNode(jsonNode, "canPushUpdates", JsonNode.class), -1));
        ArrayNode pushTypeAvailableArray = getArrayNode(jsonNode, "pushTypeAvailable");
        if (pushTypeAvailableArray != null) {
            for (int i = 0; i < pushTypeAvailableArray.size(); i++) {
                if (pushTypeAvailableArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + pushTypeAvailableArray.get(i).getNodeType() + " for element: pushTypeAvailable");
                }
                builder.pushTypeAvailable(parseCodeableConcept("pushTypeAvailable", pushTypeAvailableArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private VerificationResult.Validator parseVerificationResultValidator(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(VerificationResult.Validator.class, jsonNode);
        }
        VerificationResult.Validator.Builder builder = VerificationResult.Validator.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.organization(parseReference("organization", getJsonNode(jsonNode, "organization", JsonNode.class), -1));
        builder.identityCertificate(parseString("identityCertificate", getJsonNode(jsonNode, "identityCertificate", TextNode.class), jsonNode.get("_identityCertificate"), -1));
        builder.attestationSignature(parseSignature("attestationSignature", getJsonNode(jsonNode, "attestationSignature", JsonNode.class), -1));
        stackPop();
        return builder.build();
    }

    private VisionPrescription parseVisionPrescription(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(VisionPrescription.class, jsonNode);
        }
        VisionPrescription.Builder builder = VisionPrescription.builder();
        builder.setValidating(validating);
        parseDomainResource(builder, jsonNode);
        ArrayNode identifierArray = getArrayNode(jsonNode, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                if (identifierArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + identifierArray.get(i).getNodeType() + " for element: identifier");
                }
                builder.identifier(parseIdentifier("identifier", identifierArray.get(i), i));
            }
        }
        builder.status((VisionStatus) parseString(VisionStatus.builder(), "status", getJsonNode(jsonNode, "status", TextNode.class), jsonNode.get("_status"), -1));
        builder.created(parseDateTime("created", getJsonNode(jsonNode, "created", TextNode.class), jsonNode.get("_created"), -1));
        builder.patient(parseReference("patient", getJsonNode(jsonNode, "patient", JsonNode.class), -1));
        builder.encounter(parseReference("encounter", getJsonNode(jsonNode, "encounter", JsonNode.class), -1));
        builder.dateWritten(parseDateTime("dateWritten", getJsonNode(jsonNode, "dateWritten", TextNode.class), jsonNode.get("_dateWritten"), -1));
        builder.prescriber(parseReference("prescriber", getJsonNode(jsonNode, "prescriber", JsonNode.class), -1));
        ArrayNode lensSpecificationArray = getArrayNode(jsonNode, "lensSpecification");
        if (lensSpecificationArray != null) {
            for (int i = 0; i < lensSpecificationArray.size(); i++) {
                if (lensSpecificationArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + lensSpecificationArray.get(i).getNodeType() + " for element: lensSpecification");
                }
                builder.lensSpecification(parseVisionPrescriptionLensSpecification("lensSpecification", lensSpecificationArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private VisionPrescription.LensSpecification parseVisionPrescriptionLensSpecification(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(VisionPrescription.LensSpecification.class, jsonNode);
        }
        VisionPrescription.LensSpecification.Builder builder = VisionPrescription.LensSpecification.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.product(parseCodeableConcept("product", getJsonNode(jsonNode, "product", JsonNode.class), -1));
        builder.eye((VisionEyes) parseString(VisionEyes.builder(), "eye", getJsonNode(jsonNode, "eye", TextNode.class), jsonNode.get("_eye"), -1));
        builder.sphere(parseDecimal("sphere", getJsonNode(jsonNode, "sphere", NumericNode.class), jsonNode.get("_sphere"), -1));
        builder.cylinder(parseDecimal("cylinder", getJsonNode(jsonNode, "cylinder", NumericNode.class), jsonNode.get("_cylinder"), -1));
        builder.axis(parseInteger("axis", getJsonNode(jsonNode, "axis", NumericNode.class), jsonNode.get("_axis"), -1));
        ArrayNode prismArray = getArrayNode(jsonNode, "prism");
        if (prismArray != null) {
            for (int i = 0; i < prismArray.size(); i++) {
                if (prismArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + prismArray.get(i).getNodeType() + " for element: prism");
                }
                builder.prism(parseVisionPrescriptionLensSpecificationPrism("prism", prismArray.get(i), i));
            }
        }
        builder.add(parseDecimal("add", getJsonNode(jsonNode, "add", NumericNode.class), jsonNode.get("_add"), -1));
        builder.power(parseDecimal("power", getJsonNode(jsonNode, "power", NumericNode.class), jsonNode.get("_power"), -1));
        builder.backCurve(parseDecimal("backCurve", getJsonNode(jsonNode, "backCurve", NumericNode.class), jsonNode.get("_backCurve"), -1));
        builder.diameter(parseDecimal("diameter", getJsonNode(jsonNode, "diameter", NumericNode.class), jsonNode.get("_diameter"), -1));
        builder.duration((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "duration", getJsonNode(jsonNode, "duration", JsonNode.class), -1));
        builder.color(parseString("color", getJsonNode(jsonNode, "color", TextNode.class), jsonNode.get("_color"), -1));
        builder.brand(parseString("brand", getJsonNode(jsonNode, "brand", TextNode.class), jsonNode.get("_brand"), -1));
        ArrayNode noteArray = getArrayNode(jsonNode, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                if (noteArray.get(i).getNodeType() != JsonNodeType.OBJECT) {
                    throw new IllegalArgumentException("Expected: OBJECT but found: " + noteArray.get(i).getNodeType() + " for element: note");
                }
                builder.note(parseAnnotation("note", noteArray.get(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private VisionPrescription.LensSpecification.Prism parseVisionPrescriptionLensSpecificationPrism(java.lang.String elementName, JsonNode jsonNode, int elementIndex) {
        if (jsonNode == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (!ignoringUnrecognizedElements) {
            checkForUnrecognizedElements(VisionPrescription.LensSpecification.Prism.class, jsonNode);
        }
        VisionPrescription.LensSpecification.Prism.Builder builder = VisionPrescription.LensSpecification.Prism.builder();
        builder.setValidating(validating);
        parseBackboneElement(builder, jsonNode);
        builder.amount(parseDecimal("amount", getJsonNode(jsonNode, "amount", NumericNode.class), jsonNode.get("_amount"), -1));
        builder.base((VisionBase) parseString(VisionBase.builder(), "base", getJsonNode(jsonNode, "base", TextNode.class), jsonNode.get("_base"), -1));
        stackPop();
        return builder.build();
    }

    private Xhtml parseXhtml(java.lang.String elementName, JsonNode jsonValue, JsonNode _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Xhtml.Builder builder = Xhtml.builder();
        builder.setValidating(validating);
        if (_jsonValue != null && _jsonValue.getNodeType() == JsonNodeType.OBJECT) {
            JsonNode jsonNode = (JsonNode) _jsonValue;
            if (!ignoringUnrecognizedElements) {
                checkForUnrecognizedElements(Element.class, jsonNode);
            }
            parseElement(builder, jsonNode);
        } else if (_jsonValue != null && (_jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getNodeType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getNodeType() == JsonNodeType.STRING) {
            TextNode jsonString = (TextNode) jsonValue;
            builder.value(jsonString.textValue());
        } else if (jsonValue != null && (jsonValue.getNodeType() != JsonNodeType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getNodeType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private void stackPush(java.lang.String elementName, int elementIndex) {
        if (elementIndex != -1) {
            stack.push(elementName + "[" + elementIndex + "]");
        } else {
            stack.push(elementName);
        }
        if (DEBUG) {
            System.out.println(getPath());
        }
    }

    private void stackPop() {
        stack.pop();
    }

    private Element parseChoiceElement(java.lang.String name, JsonNode jsonNode, Class<?>... choiceTypes) {
        if (jsonNode == null) {
            return null;
        }

        java.lang.String elementName = null;
        java.lang.String _elementName = null;
        Class<?> elementType = null;

        for (Class<?> choiceType : choiceTypes) {
            java.lang.String key = getChoiceElementName(name, choiceType);
            if (jsonNode.has(key)) {
                if (elementName != null) {
                    throw new IllegalArgumentException("Only one choice element key of the form: " + name + "[x] is allowed");
                }
                elementName = key;
                elementType = choiceType;
            }

            java.lang.String _key = "_" + key;
            if (jsonNode.has(_key)) {
                if (_elementName != null) {
                    throw new IllegalArgumentException("Only one choice element key of the form: _" + name + "[x] is allowed");
                }
                _elementName = _key;
                if (elementType == null) {
                    elementType = choiceType;
                }
            }
        }

        if (elementName != null && _elementName != null && !_elementName.endsWith(elementName)) {
            throw new IllegalArgumentException("Choice element keys: " + elementName + " and " + _elementName + " are not consistent");
        }

        JsonNode jsonValue = null;
        if (elementName != null) {
            jsonValue = jsonNode.get(elementName);
        }

        JsonNode _jsonValue = null;
        if (_elementName != null) {
            _jsonValue = jsonNode.get(_elementName);
        }

        if (elementType != null) {
            switch (elementType.getSimpleName()) {
            case "Base64Binary":
                return parseBase64Binary(elementName, jsonValue, _jsonValue, -1);
            case "Boolean":
                return parseBoolean(elementName, jsonValue, _jsonValue, -1);
            case "Canonical":
                return parseUri(Canonical.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Code":
                return parseString(Code.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Date":
                return parseDate(elementName, jsonValue, _jsonValue, -1);
            case "DateTime":
                return parseDateTime(elementName, jsonValue, _jsonValue, -1);
            case "Decimal":
                return parseDecimal(elementName, jsonValue, _jsonValue, -1);
            case "Id":
                return parseString(Id.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Instant":
                return parseInstant(elementName, jsonValue, _jsonValue, -1);
            case "Integer":
                return parseInteger(elementName, jsonValue, _jsonValue, -1);
            case "Markdown":
                return parseString(Markdown.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Oid":
                return parseUri(Oid.builder(), elementName, jsonValue, _jsonValue, -1);
            case "PositiveInt":
                return parseInteger(PositiveInt.builder(), elementName, jsonValue, _jsonValue, -1);
            case "String":
                return parseString(elementName, jsonValue, _jsonValue, -1);
            case "Time":
                return parseTime(elementName, jsonValue, _jsonValue, -1);
            case "UnsignedInt":
                return parseInteger(UnsignedInt.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Uri":
                return parseUri(elementName, jsonValue, _jsonValue, -1);
            case "Url":
                return parseUri(Url.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Uuid":
                return parseUri(Uuid.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Address":
                return parseAddress(elementName, (JsonNode) jsonValue, -1);
            case "Age":
                return parseQuantity(Age.builder(), elementName, (JsonNode) jsonValue, -1);
            case "Annotation":
                return parseAnnotation(elementName, (JsonNode) jsonValue, -1);
            case "Attachment":
                return parseAttachment(elementName, (JsonNode) jsonValue, -1);
            case "CodeableConcept":
                return parseCodeableConcept(elementName, (JsonNode) jsonValue, -1);
            case "CodeableReference":
                return parseCodeableReference(elementName, (JsonNode) jsonValue, -1);
            case "Coding":
                return parseCoding(elementName, (JsonNode) jsonValue, -1);
            case "ContactPoint":
                return parseContactPoint(elementName, (JsonNode) jsonValue, -1);
            case "Count":
                return parseQuantity(Count.builder(), elementName, (JsonNode) jsonValue, -1);
            case "Distance":
                return parseQuantity(Distance.builder(), elementName, (JsonNode) jsonValue, -1);
            case "Duration":
                return parseQuantity(Duration.builder(), elementName, (JsonNode) jsonValue, -1);
            case "HumanName":
                return parseHumanName(elementName, (JsonNode) jsonValue, -1);
            case "Identifier":
                return parseIdentifier(elementName, (JsonNode) jsonValue, -1);
            case "Money":
                return parseMoney(elementName, (JsonNode) jsonValue, -1);
            case "MoneyQuantity":
                return parseQuantity(MoneyQuantity.builder(), elementName, (JsonNode) jsonValue, -1);
            case "Period":
                return parsePeriod(elementName, (JsonNode) jsonValue, -1);
            case "Quantity":
                return parseQuantity(elementName, (JsonNode) jsonValue, -1);
            case "Range":
                return parseRange(elementName, (JsonNode) jsonValue, -1);
            case "Ratio":
                return parseRatio(elementName, (JsonNode) jsonValue, -1);
            case "RatioRange":
                return parseRatioRange(elementName, (JsonNode) jsonValue, -1);
            case "Reference":
                return parseReference(elementName, (JsonNode) jsonValue, -1);
            case "SampledData":
                return parseSampledData(elementName, (JsonNode) jsonValue, -1);
            case "SimpleQuantity":
                return parseQuantity(SimpleQuantity.builder(), elementName, (JsonNode) jsonValue, -1);
            case "Signature":
                return parseSignature(elementName, (JsonNode) jsonValue, -1);
            case "Timing":
                return parseTiming(elementName, (JsonNode) jsonValue, -1);
            case "ContactDetail":
                return parseContactDetail(elementName, (JsonNode) jsonValue, -1);
            case "Contributor":
                return parseContributor(elementName, (JsonNode) jsonValue, -1);
            case "DataRequirement":
                return parseDataRequirement(elementName, (JsonNode) jsonValue, -1);
            case "Expression":
                return parseExpression(elementName, (JsonNode) jsonValue, -1);
            case "ParameterDefinition":
                return parseParameterDefinition(elementName, (JsonNode) jsonValue, -1);
            case "RelatedArtifact":
                return parseRelatedArtifact(elementName, (JsonNode) jsonValue, -1);
            case "TriggerDefinition":
                return parseTriggerDefinition(elementName, (JsonNode) jsonValue, -1);
            case "UsageContext":
                return parseUsageContext(elementName, (JsonNode) jsonValue, -1);
            case "Dosage":
                return parseDosage(elementName, (JsonNode) jsonValue, -1);
            case "Meta":
                return parseMeta(elementName, (JsonNode) jsonValue, -1);
            }
        }

        return null;
    }

    private java.lang.String getPath() {
        StringJoiner joiner = new StringJoiner(".");
        for (java.lang.String s : stack) {
            joiner.add(s);
        }
        return joiner.toString();
    }

    private java.lang.String parseJavaString(java.lang.String elementName, TextNode jsonString, int elementIndex) {
        if (jsonString == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        java.lang.String javaString = jsonString.textValue();
        stackPop();
        return javaString;
    }
}
