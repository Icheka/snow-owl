/*
 * Copyright 2011-2019 B2i Healthcare, https://b2ihealthcare.com
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.b2international.snowowl.snomed.cis;

import java.util.Map;
import java.util.Set;

import com.b2international.snowowl.core.terminology.ComponentCategory;
import com.b2international.snowowl.snomed.cis.domain.SctId;

/**
 * The SNOMED CT identifier service interface generates and maintains
 * identifiers according to the Technical Implementation Guide.
 * 
 * IDs are generated by defining the {@link ComponentCategory} (the component
 * type we need ID for), and an optional namespace parameter. The returned
 * SNOMED CT ID will have a valid check-digit, partition-identifier, and the
 * optional namespace identifier.
 * 
 * @since 4.0
 * @see www.snomed.org/tig?t=trg_app_sctid
 */
public interface ISnomedIdentifierService {

	/**
	 * Generates multiple SNOMED CT IDs for the defined
	 * {@link ComponentCategory} with the defined extension namespace.
	 * 
	 * @param namespace the extension namespace to use when generating the ID
	 * @param category the component type to generate ID for
	 * @param quantity the number of IDs to generate
	 * 
	 * @return a collection of generated IDs (in Assigned state)
	 */
	Set<String> generate(String namespace, ComponentCategory category, int quantity);
	
	/**
	 * Generates multiple SNOMED CT IDs for the defined {@link ComponentCategory} with the defined extension namespace.
	 * 
	 * @param namespace the extension namespace to use when generating the ID
	 * @param category the component type to generate ID for
	 * @param quantity the number of IDs to generate
	 * 
	 * @return a collection of generated {@link SctId} instances (in Assigned state)
	 */
	Map<String, SctId> generateSctIds(String namespace, ComponentCategory category, int quantity);

	/**
	 * Registers multiple SNOMED CT IDs.
	 * 
	 * @param componentIds the IDs to register
	 */
	Map<String, SctId> register(Set<String> componentIds);

	/**
	 * Reserves multiple SNOMED CT ID for the defined {@link ComponentCategory}
	 * with the defined extension namespace.
	 * 
	 * @param namespace the extension namespace to use when generating the ID
	 * @param category the component type to generate ID for
	 * 
	 * @return a collection of reserved IDs (in Reserved state)
	 */
	Set<String> reserve(String namespace, ComponentCategory category, int quantity);

	/**
	 * Reserves multiple SNOMED CT ID for the defined {@link ComponentCategory} with the defined extension namespace.
	 * 
	 * @param namespace the extension namespace to use when generating the ID
	 * @param category the component type to generate ID for
	 * 
	 * @return a collection of reserved {@link SctId} instances (in Reserved state)
	 */
	Map<String, SctId> reserveSctIds(String namespace, ComponentCategory category, int quantity);
	
	/**
	 * Releases the given SNOMED CT IDs.
	 * 
	 * @param componentIds the IDs to release
	 */
	Map<String, SctId> release(Set<String> componentIds);

	/**
	 * Deprecates the given SNOMED CT IDs.
	 * 
	 * @param componentIds the IDs to deprecate
	 * @re
	 */
	Map<String, SctId> deprecate(Set<String> componentIds);

	/**
	 * Publishes the given SNOMED CT IDs.
	 * 
	 * @param componentIds the IDs to publish
	 */
	Map<String, SctId> publish(Set<String> componentIds);

	/**
	 * Retrieves the {@link SctId}s for the given component IDs.
	 * 
	 * @param componentIds the IDs of the components to load
	 * @return a map of {@link SctId}s carrying additional information about each component ID
	 */
	Map<String, SctId> getSctIds(Set<String> componentIds);

	/**
	 * Tells if the identifier service supports import related requests.
	 * 
	 * @return <code>true</code> if the importer should register component IDs seen during an RF2 import, <code>false</code> otherwise
	 */
	boolean importSupported();

}
